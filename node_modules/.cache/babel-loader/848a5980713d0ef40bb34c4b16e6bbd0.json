{"ast":null,"code":"import{isAddress}from'../../utils';export function filterTokens(tokens,search){if(search.length===0)return tokens;var searchingAddress=isAddress(search);if(searchingAddress){return tokens.filter(function(token){return token.address===searchingAddress;});}var lowerSearchParts=search.toLowerCase().split(/\\s+/).filter(function(s){return s.length>0;});if(lowerSearchParts.length===0){return tokens;}var matchesSearch=function matchesSearch(s){var sParts=s.toLowerCase().split(/\\s+/).filter(function(s){return s.length>0;});return lowerSearchParts.every(function(p){return p.length===0||sParts.some(function(sp){return sp.startsWith(p)||sp.endsWith(p);});});};return tokens.filter(function(token){var symbol=token.symbol,name=token.name;return symbol&&matchesSearch(symbol)||name&&matchesSearch(name);});}","map":{"version":3,"sources":["C:/Users/marin/Desktop/bananaswap/src/components/SearchModal/filtering.ts"],"names":["isAddress","filterTokens","tokens","search","length","searchingAddress","filter","token","address","lowerSearchParts","toLowerCase","split","s","matchesSearch","sParts","every","p","some","sp","startsWith","endsWith","symbol","name"],"mappings":"AAAA,OAASA,SAAT,KAA0B,aAA1B,CAGA,MAAO,SAASC,CAAAA,YAAT,CAAsBC,MAAtB,CAAuCC,MAAvC,CAAgE,CACrE,GAAIA,MAAM,CAACC,MAAP,GAAkB,CAAtB,CAAyB,MAAOF,CAAAA,MAAP,CAEzB,GAAMG,CAAAA,gBAAgB,CAAGL,SAAS,CAACG,MAAD,CAAlC,CAEA,GAAIE,gBAAJ,CAAsB,CACpB,MAAOH,CAAAA,MAAM,CAACI,MAAP,CAAc,SAAAC,KAAK,QAAIA,CAAAA,KAAK,CAACC,OAAN,GAAkBH,gBAAtB,EAAnB,CAAP,CACD,CAED,GAAMI,CAAAA,gBAAgB,CAAGN,MAAM,CAC5BO,WADsB,GAEtBC,KAFsB,CAEhB,KAFgB,EAGtBL,MAHsB,CAGf,SAAAM,CAAC,QAAIA,CAAAA,CAAC,CAACR,MAAF,CAAW,CAAf,EAHc,CAAzB,CAKA,GAAIK,gBAAgB,CAACL,MAAjB,GAA4B,CAAhC,CAAmC,CACjC,MAAOF,CAAAA,MAAP,CACD,CAED,GAAMW,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACD,CAAD,CAAwB,CAC5C,GAAME,CAAAA,MAAM,CAAGF,CAAC,CACbF,WADY,GAEZC,KAFY,CAEN,KAFM,EAGZL,MAHY,CAGL,SAAAM,CAAC,QAAIA,CAAAA,CAAC,CAACR,MAAF,CAAW,CAAf,EAHI,CAAf,CAKA,MAAOK,CAAAA,gBAAgB,CAACM,KAAjB,CAAuB,SAAAC,CAAC,QAAIA,CAAAA,CAAC,CAACZ,MAAF,GAAa,CAAb,EAAkBU,MAAM,CAACG,IAAP,CAAY,SAAAC,EAAE,QAAIA,CAAAA,EAAE,CAACC,UAAH,CAAcH,CAAd,GAAoBE,EAAE,CAACE,QAAH,CAAYJ,CAAZ,CAAxB,EAAd,CAAtB,EAAxB,CAAP,CACD,CAPD,CASA,MAAOd,CAAAA,MAAM,CAACI,MAAP,CAAc,SAAAC,KAAK,CAAI,CAC5B,GAAQc,CAAAA,MAAR,CAAyBd,KAAzB,CAAQc,MAAR,CAAgBC,IAAhB,CAAyBf,KAAzB,CAAgBe,IAAhB,CAEA,MAAQD,CAAAA,MAAM,EAAIR,aAAa,CAACQ,MAAD,CAAxB,EAAsCC,IAAI,EAAIT,aAAa,CAACS,IAAD,CAAlE,CACD,CAJM,CAAP,CAKD","sourcesContent":["import { isAddress } from '../../utils'\r\nimport { Token } from 'moonbeamswap'\r\n\r\nexport function filterTokens(tokens: Token[], search: string): Token[] {\r\n  if (search.length === 0) return tokens\r\n\r\n  const searchingAddress = isAddress(search)\r\n\r\n  if (searchingAddress) {\r\n    return tokens.filter(token => token.address === searchingAddress)\r\n  }\r\n\r\n  const lowerSearchParts = search\r\n    .toLowerCase()\r\n    .split(/\\s+/)\r\n    .filter(s => s.length > 0)\r\n\r\n  if (lowerSearchParts.length === 0) {\r\n    return tokens\r\n  }\r\n\r\n  const matchesSearch = (s: string): boolean => {\r\n    const sParts = s\r\n      .toLowerCase()\r\n      .split(/\\s+/)\r\n      .filter(s => s.length > 0)\r\n\r\n    return lowerSearchParts.every(p => p.length === 0 || sParts.some(sp => sp.startsWith(p) || sp.endsWith(p)))\r\n  }\r\n\r\n  return tokens.filter(token => {\r\n    const { symbol, name } = token\r\n\r\n    return (symbol && matchesSearch(symbol)) || (name && matchesSearch(name))\r\n  })\r\n}\r\n"]},"metadata":{},"sourceType":"module"}