{"ast":null,"code":"import { TokenAmount } from 'moonbeamswap';\nimport { useTokenContract } from '../hooks/useContract';\nimport { useSingleCallResult } from '../state/multicall/hooks'; // returns undefined if input token is undefined, or fails to get token contract,\n// or contract total supply cannot be fetched\n\nexport function useTotalSupply(token) {\n  var _useSingleCallResult, _useSingleCallResult$;\n\n  const contract = useTokenContract(token === null || token === void 0 ? void 0 : token.address, false);\n  const totalSupply = (_useSingleCallResult = useSingleCallResult(contract, 'totalSupply')) === null || _useSingleCallResult === void 0 ? void 0 : (_useSingleCallResult$ = _useSingleCallResult.result) === null || _useSingleCallResult$ === void 0 ? void 0 : _useSingleCallResult$[0];\n  return token && totalSupply ? new TokenAmount(token, totalSupply.toString()) : undefined;\n}","map":{"version":3,"sources":["C:/Users/marin/Documents/Dev/bananaswap/moonbeam-uniswap/uniswap-interface-moonbeam/src/data/TotalSupply.ts"],"names":["TokenAmount","useTokenContract","useSingleCallResult","useTotalSupply","token","contract","address","totalSupply","result","toString","undefined"],"mappings":"AACA,SAAgBA,WAAhB,QAAmC,cAAnC;AACA,SAASC,gBAAT,QAAiC,sBAAjC;AACA,SAASC,mBAAT,QAAoC,0BAApC,C,CAEA;AACA;;AACA,OAAO,SAASC,cAAT,CAAwBC,KAAxB,EAAgE;AAAA;;AACrE,QAAMC,QAAQ,GAAGJ,gBAAgB,CAACG,KAAD,aAACA,KAAD,uBAACA,KAAK,CAAEE,OAAR,EAAiB,KAAjB,CAAjC;AAEA,QAAMC,WAAsB,2BAAGL,mBAAmB,CAACG,QAAD,EAAW,aAAX,CAAtB,kFAAG,qBAA8CG,MAAjD,0DAAG,sBAAuD,CAAvD,CAA/B;AAEA,SAAOJ,KAAK,IAAIG,WAAT,GAAuB,IAAIP,WAAJ,CAAgBI,KAAhB,EAAuBG,WAAW,CAACE,QAAZ,EAAvB,CAAvB,GAAwEC,SAA/E;AACD","sourcesContent":["import { BigNumber } from '@ethersproject/bignumber'\r\nimport { Token, TokenAmount } from 'moonbeamswap'\r\nimport { useTokenContract } from '../hooks/useContract'\r\nimport { useSingleCallResult } from '../state/multicall/hooks'\r\n\r\n// returns undefined if input token is undefined, or fails to get token contract,\r\n// or contract total supply cannot be fetched\r\nexport function useTotalSupply(token?: Token): TokenAmount | undefined {\r\n  const contract = useTokenContract(token?.address, false)\r\n\r\n  const totalSupply: BigNumber = useSingleCallResult(contract, 'totalSupply')?.result?.[0]\r\n\r\n  return token && totalSupply ? new TokenAmount(token, totalSupply.toString()) : undefined\r\n}\r\n"]},"metadata":{},"sourceType":"module"}