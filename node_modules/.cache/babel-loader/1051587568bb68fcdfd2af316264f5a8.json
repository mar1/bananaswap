{"ast":null,"code":"import _slicedToArray from\"C:\\\\Users\\\\marin\\\\Desktop\\\\bananaswap\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import copy from'copy-to-clipboard';import{useCallback,useEffect,useState}from'react';export default function useCopyClipboard(){var timeout=arguments.length>0&&arguments[0]!==undefined?arguments[0]:500;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isCopied=_useState2[0],setIsCopied=_useState2[1];var staticCopy=useCallback(function(text){var didCopy=copy(text);setIsCopied(didCopy);},[]);useEffect(function(){if(isCopied){var hide=setTimeout(function(){setIsCopied(false);},timeout);return function(){clearTimeout(hide);};}return undefined;},[isCopied,setIsCopied,timeout]);return[isCopied,staticCopy];}","map":{"version":3,"sources":["C:/Users/marin/Desktop/bananaswap/src/hooks/useCopyClipboard.ts"],"names":["copy","useCallback","useEffect","useState","useCopyClipboard","timeout","isCopied","setIsCopied","staticCopy","text","didCopy","hide","setTimeout","clearTimeout","undefined"],"mappings":"iKAAA,MAAOA,CAAAA,IAAP,KAAiB,mBAAjB,CACA,OAASC,WAAT,CAAsBC,SAAtB,CAAiCC,QAAjC,KAAiD,OAAjD,CAEA,cAAe,SAASC,CAAAA,gBAAT,EAA8E,IAApDC,CAAAA,OAAoD,2DAA1C,GAA0C,CAC3F,cAAgCF,QAAQ,CAAC,KAAD,CAAxC,wCAAOG,QAAP,eAAiBC,WAAjB,eAEA,GAAMC,CAAAA,UAAU,CAAGP,WAAW,CAAC,SAAAQ,IAAI,CAAI,CACrC,GAAMC,CAAAA,OAAO,CAAGV,IAAI,CAACS,IAAD,CAApB,CACAF,WAAW,CAACG,OAAD,CAAX,CACD,CAH6B,CAG3B,EAH2B,CAA9B,CAKAR,SAAS,CAAC,UAAM,CACd,GAAII,QAAJ,CAAc,CACZ,GAAMK,CAAAA,IAAI,CAAGC,UAAU,CAAC,UAAM,CAC5BL,WAAW,CAAC,KAAD,CAAX,CACD,CAFsB,CAEpBF,OAFoB,CAAvB,CAIA,MAAO,WAAM,CACXQ,YAAY,CAACF,IAAD,CAAZ,CACD,CAFD,CAGD,CACD,MAAOG,CAAAA,SAAP,CACD,CAXQ,CAWN,CAACR,QAAD,CAAWC,WAAX,CAAwBF,OAAxB,CAXM,CAAT,CAaA,MAAO,CAACC,QAAD,CAAWE,UAAX,CAAP,CACD","sourcesContent":["import copy from 'copy-to-clipboard'\r\nimport { useCallback, useEffect, useState } from 'react'\r\n\r\nexport default function useCopyClipboard(timeout = 500): [boolean, (toCopy: string) => void] {\r\n  const [isCopied, setIsCopied] = useState(false)\r\n\r\n  const staticCopy = useCallback(text => {\r\n    const didCopy = copy(text)\r\n    setIsCopied(didCopy)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (isCopied) {\r\n      const hide = setTimeout(() => {\r\n        setIsCopied(false)\r\n      }, timeout)\r\n\r\n      return () => {\r\n        clearTimeout(hide)\r\n      }\r\n    }\r\n    return undefined\r\n  }, [isCopied, setIsCopied, timeout])\r\n\r\n  return [isCopied, staticCopy]\r\n}\r\n"]},"metadata":{},"sourceType":"module"}