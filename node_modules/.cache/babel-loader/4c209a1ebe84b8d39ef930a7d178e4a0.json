{"ast":null,"code":"import{useEffect,useRef}from'react';// modified from https://usehooks.com/usePrevious/\nexport default function usePrevious(value){// The ref object is a generic container whose current property is mutable ...\n// ... and can hold any value, similar to an instance property on a class\nvar ref=useRef();// Store current value in ref\nuseEffect(function(){ref.current=value;},[value]);// Only re-run if value changes\n// Return previous value (happens before update in useEffect above)\nreturn ref.current;}","map":{"version":3,"sources":["C:/Users/marin/Desktop/bananaswap/src/hooks/usePrevious.ts"],"names":["useEffect","useRef","usePrevious","value","ref","current"],"mappings":"AAAA,OAASA,SAAT,CAAoBC,MAApB,KAAkC,OAAlC,CAEA;AACA,cAAe,SAASC,CAAAA,WAAT,CAAwBC,KAAxB,CAAkC,CAC/C;AACA;AACA,GAAMC,CAAAA,GAAG,CAAGH,MAAM,EAAlB,CAEA;AACAD,SAAS,CAAC,UAAM,CACdI,GAAG,CAACC,OAAJ,CAAcF,KAAd,CACD,CAFQ,CAEN,CAACA,KAAD,CAFM,CAAT,CAEY;AAEZ;AACA,MAAOC,CAAAA,GAAG,CAACC,OAAX,CACD","sourcesContent":["import { useEffect, useRef } from 'react'\r\n\r\n// modified from https://usehooks.com/usePrevious/\r\nexport default function usePrevious<T>(value: T) {\r\n  // The ref object is a generic container whose current property is mutable ...\r\n  // ... and can hold any value, similar to an instance property on a class\r\n  const ref = useRef<T>()\r\n\r\n  // Store current value in ref\r\n  useEffect(() => {\r\n    ref.current = value\r\n  }, [value]) // Only re-run if value changes\r\n\r\n  // Return previous value (happens before update in useEffect above)\r\n  return ref.current\r\n}\r\n"]},"metadata":{},"sourceType":"module"}