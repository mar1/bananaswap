{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marin\\\\Documents\\\\Dev\\\\bananaswap\\\\moonbeam-uniswap\\\\uniswap-interface-moonbeam\\\\src\\\\pages\\\\Earn\\\\index.tsx\";\nimport { JSBI, Token, ChainId } from 'moonbeamswap';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { Text } from 'rebass';\nimport { useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport { ButtonPrimary } from '../../components/Button';\nimport { AutoColumn } from '../../components/Column';\nimport CurrencyInputPanel from '../../components/CurrencyInputPanel';\nimport { StakeTabs } from '../../components/NavigationTabs';\nimport { useActiveWeb3React } from '../../hooks';\nimport { ApprovalState, useApproveCallbackFromTrade } from '../../hooks/useApproveCallback';\nimport useENSAddress from '../../hooks/useENSAddress';\nimport useToggledVersion, { Version } from '../../hooks/useToggledVersion';\nimport useWrapCallback, { WrapType } from '../../hooks/useWrapCallback';\nimport { Field } from '../../state/swap/actions';\nimport { useDerivedSwapInfo, useSwapActionHandlers, useSwapState } from '../../state/swap/hooks';\nimport { useUserSlippageTolerance } from '../../state/user/hooks';\nimport { maxAmountSpend } from '../../utils/maxAmountSpend';\nimport AppBody from '../AppBody';\nimport { toV2LiquidityToken, useTrackedTokenPairs } from '../../state/user/hooks';\nimport { useTokenBalancesWithLoadingIndicator } from '../../state/wallet/hooks';\nimport '.././style.css';\nimport { ethers } from 'ethers';\nimport Stake from './components/Stake';\nimport { lpTokenAddress, farmAddress, lpTokenABI, farmABI } from './conf.js';\nexport default function Swap() {\n  var _parsedAmounts$indepe, _parsedAmounts$indepe2, _parsedAmounts$depend, _parsedAmounts$depend2, _parsedAmounts$indepe3, _parsedAmounts$Field$;\n\n  const {\n    t\n  } = useTranslation();\n  const {\n    account\n  } = useActiveWeb3React();\n  const LP = new Token(ChainId.MOONBASE, '0x205A1AecA18DDCB130825B961BcE897302690A5d', 18, 'BAN', 'Bananaswap'); // swap state\n\n  const {\n    independentField,\n    typedValue,\n    recipient\n  } = useSwapState();\n  const {\n    v2Trade,\n    currencyBalances,\n    parsedAmount,\n    currencies,\n    inputError: swapInputError\n  } = useDerivedSwapInfo();\n  const {\n    wrapType,\n    execute: onWrap,\n    inputError: wrapInputError\n  } = useWrapCallback(currencies[Field.INPUT], currencies[Field.OUTPUT], typedValue);\n  console.log(currencies);\n  const showWrap = wrapType !== WrapType.NOT_APPLICABLE;\n  const {\n    address: recipientAddress\n  } = useENSAddress(recipient);\n  const toggledVersion = useToggledVersion();\n  const trade = showWrap ? undefined : {\n    [Version.v2]: v2Trade\n  }[toggledVersion];\n  const parsedAmounts = showWrap ? {\n    [Field.INPUT]: parsedAmount,\n    [Field.OUTPUT]: parsedAmount\n  } : {\n    [Field.INPUT]: independentField === Field.INPUT ? parsedAmount : trade === null || trade === void 0 ? void 0 : trade.inputAmount,\n    [Field.OUTPUT]: independentField === Field.OUTPUT ? parsedAmount : trade === null || trade === void 0 ? void 0 : trade.outputAmount\n  };\n  const {\n    onSwitchTokens,\n    onCurrencySelection,\n    onUserInput,\n    onChangeRecipient\n  } = useSwapActionHandlers();\n  const isValid = !swapInputError;\n  const dependentField = independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT;\n  const trackedTokenPairs = useTrackedTokenPairs();\n  const tokenPairsWithLiquidityTokens = useMemo(() => trackedTokenPairs.map(tokens => ({\n    liquidityToken: toV2LiquidityToken(tokens),\n    tokens\n  })), [trackedTokenPairs]);\n  const liquidityTokens = useMemo(() => tokenPairsWithLiquidityTokens.map(tpwlt => tpwlt.liquidityToken), [tokenPairsWithLiquidityTokens]);\n  const [v2PairsBalances, fetchingV2PairBalances] = useTokenBalancesWithLoadingIndicator(account !== null && account !== void 0 ? account : undefined, liquidityTokens); // fetch the reserves for all V2 pools in which the user has a balance\n\n  const liquidityTokensWithBalances = useMemo(() => tokenPairsWithLiquidityTokens.filter(({\n    liquidityToken\n  }) => {\n    var _v2PairsBalances$liqu;\n\n    return (_v2PairsBalances$liqu = v2PairsBalances[liquidityToken.address]) === null || _v2PairsBalances$liqu === void 0 ? void 0 : _v2PairsBalances$liqu.greaterThan('0');\n  }), [tokenPairsWithLiquidityTokens, v2PairsBalances]);\n  const formattedAmounts = {\n    [independentField]: typedValue,\n    [dependentField]: showWrap ? (_parsedAmounts$indepe = (_parsedAmounts$indepe2 = parsedAmounts[independentField]) === null || _parsedAmounts$indepe2 === void 0 ? void 0 : _parsedAmounts$indepe2.toExact()) !== null && _parsedAmounts$indepe !== void 0 ? _parsedAmounts$indepe : '' : (_parsedAmounts$depend = (_parsedAmounts$depend2 = parsedAmounts[dependentField]) === null || _parsedAmounts$depend2 === void 0 ? void 0 : _parsedAmounts$depend2.toSignificant(6)) !== null && _parsedAmounts$depend !== void 0 ? _parsedAmounts$depend : ''\n  };\n  const route = trade === null || trade === void 0 ? void 0 : trade.route;\n  const userHasSpecifiedInputOutput = Boolean(currencies[Field.INPUT] && ((_parsedAmounts$indepe3 = parsedAmounts[independentField]) === null || _parsedAmounts$indepe3 === void 0 ? void 0 : _parsedAmounts$indepe3.greaterThan(JSBI.BigInt(0))));\n  const noRoute = !route;\n  const [allowedSlippage] = useUserSlippageTolerance(); // check whether the user has approved the router on the input token\n\n  const [approval, approveCallback] = useApproveCallbackFromTrade(trade, allowedSlippage); // check if user has gone through approval process, used to show two step buttons, reset on token change\n\n  const [approvalSubmitted, setApprovalSubmitted] = useState(false); // mark when a user has submitted an approval, reset onTokenSelection for input field\n\n  useEffect(() => {\n    if (approval === ApprovalState.PENDING) {\n      setApprovalSubmitted(true);\n    }\n  }, [approval, approvalSubmitted]);\n  const handleInputSelect = useCallback(inputCurrency => {\n    setApprovalSubmitted(false); // reset 2 step UI for approvals\n\n    onCurrencySelection(Field.INPUT, inputCurrency);\n  }, [onCurrencySelection]);\n  const handleTypeInput = useCallback(value => {\n    onUserInput(Field.INPUT, value);\n  }, [onUserInput]);\n  const handleTypeOutput = useCallback(value => {\n    onUserInput(Field.OUTPUT, value);\n  }, [onUserInput]);\n  const maxAmountInput = maxAmountSpend(currencyBalances[Field.INPUT]);\n  console.log('max', maxAmountSpend(currencyBalances[LP]));\n  const atMaxAmountInput = Boolean(maxAmountInput && ((_parsedAmounts$Field$ = parsedAmounts[Field.INPUT]) === null || _parsedAmounts$Field$ === void 0 ? void 0 : _parsedAmounts$Field$.equalTo(maxAmountInput)));\n  const handleMaxInput = useCallback(() => {\n    alert('o');\n  }, [maxAmountInput, onUserInput]);\n  console.log(Field.INPUT);\n\n  async function go() {\n    let tokenAmount = await window.document.getElementsByClassName('token-amount-input');\n    console.log(tokenAmount[0].value);\n  }\n\n  async function replace() {\n    let imgLp = await window.document.querySelector('#swap-currency-input2 > div > div.sc-cqCuEk.bFUFXO > button > span');\n\n    if (imgLp) {\n      imgLp.innerHTML = `<img src=\"http://localhost:3000/bananascoin.png\" width='34px;'></img><span style=\"padding-left: 0.3rem;\">BAN</span>`;\n    }\n\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = provider.getSigner();\n    const signerAddress = await signer.getAddress();\n    const farmContract = new ethers.Contract(farmAddress, farmABI, provider);\n    let rewardsPerBlock = await farmContract.rewardPerBlock();\n    rewardsPerBlock = ethers.utils.formatUnits(rewardsPerBlock, 18);\n    let APR = rewardsPerBlock * 1855058;\n    let APRp = window.document.getElementById('apr');\n    APRp.innerText = `APY: ${Number(APR).toFixed(2)} %`;\n  }\n\n  replace();\n\n  async function StakeLP() {\n    const provider2 = new ethers.providers.Web3Provider(window.ethereum);\n    await provider2.send(\"eth_requestAccounts\", []);\n    const signer2 = provider2.getSigner();\n    console.log(signer2);\n    let tokenAmount = await window.document.getElementsByClassName('token-amount-input');\n    const amountToDeposit = tokenAmount[0].value;\n    const farmContract = new ethers.Contract(farmAddress, farmABI, provider2);\n    const LPContract = new ethers.Contract(lpTokenAddress, lpTokenABI, provider2);\n    const Approve = await LPContract.approve(farmAddress, amountToDeposit);\n  }\n\n  const dpid = 1;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AppBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(StakeTabs, {\n    active: 'earn',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 1\n    }\n  }), /*#__PURE__*/React.createElement(AutoColumn, {\n    width: \"500px\",\n    gap: \"lg\",\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 1\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"http://localhost:3000/bananascoin.png\",\n    width: \"150px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 3\n    }\n  }), /*#__PURE__*/React.createElement(Text, {\n    textAlign: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 1\n    }\n  }, \"Stake your LP tokens to get extra $BANANAS rewards\"), /*#__PURE__*/React.createElement(CurrencyInputPanel, {\n    label: independentField === Field.OUTPUT && !showWrap && trade ? 'From (estimated)' : 'From',\n    value: formattedAmounts[Field.INPUT],\n    currency: LP,\n    onUserInput: handleTypeInput,\n    onCurrencySelect: handleInputSelect,\n    disableCurrencySelect: true\n    /*\r\n    otherCurrency={currencies[Field.OUTPUT]}\r\n    */\n    ,\n    id: \"swap-currency-input2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 1\n    }\n  }), /*#__PURE__*/React.createElement(ButtonPrimary, {\n    id: \"join-pool-button\",\n    as: Link,\n    style: {\n      padding: 16\n    },\n    onClick: StakeLP,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    fontWeight: 500,\n    fontSize: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 7\n    }\n  }, t('stakeLp'))), /*#__PURE__*/React.createElement(Text, {\n    fontWeight: 500,\n    fontSize: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    id: \"apr\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 5\n    }\n  })), /*#__PURE__*/React.createElement(Stake, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 5\n    }\n  }))));\n} //465: {betterTradeLinkVersion && <BetterTradeLink version={betterTradeLinkVersion} />}","map":{"version":3,"sources":["C:/Users/marin/Documents/Dev/bananaswap/moonbeam-uniswap/uniswap-interface-moonbeam/src/pages/Earn/index.tsx"],"names":["JSBI","Token","ChainId","React","useCallback","useEffect","useMemo","useState","Text","useTranslation","Link","ButtonPrimary","AutoColumn","CurrencyInputPanel","StakeTabs","useActiveWeb3React","ApprovalState","useApproveCallbackFromTrade","useENSAddress","useToggledVersion","Version","useWrapCallback","WrapType","Field","useDerivedSwapInfo","useSwapActionHandlers","useSwapState","useUserSlippageTolerance","maxAmountSpend","AppBody","toV2LiquidityToken","useTrackedTokenPairs","useTokenBalancesWithLoadingIndicator","ethers","Stake","lpTokenAddress","farmAddress","lpTokenABI","farmABI","Swap","t","account","LP","MOONBASE","independentField","typedValue","recipient","v2Trade","currencyBalances","parsedAmount","currencies","inputError","swapInputError","wrapType","execute","onWrap","wrapInputError","INPUT","OUTPUT","console","log","showWrap","NOT_APPLICABLE","address","recipientAddress","toggledVersion","trade","undefined","v2","parsedAmounts","inputAmount","outputAmount","onSwitchTokens","onCurrencySelection","onUserInput","onChangeRecipient","isValid","dependentField","trackedTokenPairs","tokenPairsWithLiquidityTokens","map","tokens","liquidityToken","liquidityTokens","tpwlt","v2PairsBalances","fetchingV2PairBalances","liquidityTokensWithBalances","filter","greaterThan","formattedAmounts","toExact","toSignificant","route","userHasSpecifiedInputOutput","Boolean","BigInt","noRoute","allowedSlippage","approval","approveCallback","approvalSubmitted","setApprovalSubmitted","PENDING","handleInputSelect","inputCurrency","handleTypeInput","value","handleTypeOutput","maxAmountInput","atMaxAmountInput","equalTo","handleMaxInput","alert","go","tokenAmount","window","document","getElementsByClassName","replace","imgLp","querySelector","innerHTML","provider","providers","Web3Provider","ethereum","send","signer","getSigner","signerAddress","getAddress","farmContract","Contract","rewardsPerBlock","rewardPerBlock","utils","formatUnits","APR","APRp","getElementById","innerText","Number","toFixed","StakeLP","provider2","signer2","amountToDeposit","LPContract","Approve","approve","dpid","padding"],"mappings":"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","sourcesContent":["import { CurrencyAmount, JSBI, Token, Trade, ChainId } from 'moonbeamswap'\r\nimport React, { useCallback, useContext, useEffect, useMemo, useState } from 'react'\r\nimport { ArrowDown } from 'react-feather'\r\nimport ReactGA from 'react-ga'\r\nimport { Text } from 'rebass'\r\nimport { useTranslation } from 'react-i18next'\r\nimport { Link } from 'react-router-dom'\r\nimport { ThemeContext } from 'styled-components'\r\nimport AddressInputPanel from '../../components/AddressInputPanel'\r\nimport { ButtonError, ButtonLight, ButtonPrimary, ButtonConfirmed } from '../../components/Button'\r\nimport Card, { GreyCard } from '../../components/Card'\r\nimport { AutoColumn } from '../../components/Column'\r\nimport ConfirmSwapModal from '../../components/swap/ConfirmSwapModal'\r\nimport CurrencyInputPanel from '../../components/CurrencyInputPanel'\r\nimport { StakeTabs } from '../../components/NavigationTabs'\r\nimport { AutoRow, RowBetween } from '../../components/Row'\r\nimport AdvancedSwapDetailsDropdown from '../../components/swap/AdvancedSwapDetailsDropdown'\r\nimport confirmPriceImpactWithoutFee from '../../components/swap/confirmPriceImpactWithoutFee'\r\nimport { ArrowWrapper, BottomGrouping, SwapCallbackError, Wrapper } from '../../components/swap/styleds'\r\nimport TradePrice from '../../components/swap/TradePrice'\r\nimport TokenWarningModal from '../../components/TokenWarningModal'\r\nimport ProgressSteps from '../../components/ProgressSteps'\r\n\r\nimport { INITIAL_ALLOWED_SLIPPAGE } from '../../constants'\r\nimport { useActiveWeb3React } from '../../hooks'\r\nimport { useCurrency } from '../../hooks/Tokens'\r\nimport { ApprovalState, useApproveCallbackFromTrade } from '../../hooks/useApproveCallback'\r\nimport useENSAddress from '../../hooks/useENSAddress'\r\nimport { useSwapCallback } from '../../hooks/useSwapCallback'\r\nimport useToggledVersion, { Version } from '../../hooks/useToggledVersion'\r\nimport useWrapCallback, { WrapType } from '../../hooks/useWrapCallback'\r\nimport { useToggleSettingsMenu, useWalletModalToggle } from '../../state/application/hooks'\r\nimport { Field } from '../../state/swap/actions'\r\nimport {\r\n  useDefaultsFromURLSearch,\r\n  useDerivedSwapInfo,\r\n  useSwapActionHandlers,\r\n  useSwapState\r\n} from '../../state/swap/hooks'\r\nimport { useExpertModeManager, useUserDeadline, useUserSlippageTolerance } from '../../state/user/hooks'\r\nimport { LinkStyledButton, TYPE } from '../../theme'\r\nimport { maxAmountSpend } from '../../utils/maxAmountSpend'\r\nimport { computeTradePriceBreakdown, warningSeverity } from '../../utils/prices'\r\nimport AppBody from '../AppBody'\r\nimport { ClickableText } from '../Pool/styleds'\r\nimport Loader from '../../components/Loader'\r\nimport { toV2LiquidityToken, useTrackedTokenPairs } from '../../state/user/hooks'\r\nimport { usePairs } from '../../data/Reserves'\r\nimport { useTokenBalancesWithLoadingIndicator } from '../../state/wallet/hooks'\r\nimport { Pair } from 'moonbeamswap'\r\nimport '.././style.css'\r\nimport { Contracts } from './contracts.js'\r\nimport { ethers } from 'ethers'\r\n\r\nimport Stake from './components/Stake'\r\nimport { lpTokenAddress, farmAddress, bananasAddress, lpTokenABI, farmABI, bananasABI} from './conf.js'\r\n\r\nimport BigNumber from 'bignumber.js'\r\n\r\nexport default function Swap() {\r\n  const { t } = useTranslation()\r\n  const { account } = useActiveWeb3React()\r\n\r\n const LP = new Token(ChainId.MOONBASE, '0x205A1AecA18DDCB130825B961BcE897302690A5d', 18, 'BAN', 'Bananaswap')\r\n\r\n    // swap state\r\n    const { independentField, typedValue, recipient } = useSwapState()\r\n    const { v2Trade, currencyBalances, parsedAmount, currencies, inputError: swapInputError } = useDerivedSwapInfo()\r\n    const { wrapType, execute: onWrap, inputError: wrapInputError } = useWrapCallback(\r\n      currencies[Field.INPUT],\r\n      currencies[Field.OUTPUT],\r\n      typedValue\r\n    )\r\n    console.log(currencies)\r\n    const showWrap: boolean = wrapType !== WrapType.NOT_APPLICABLE\r\n    const { address: recipientAddress } = useENSAddress(recipient)\r\n    const toggledVersion = useToggledVersion()\r\n    const trade = showWrap\r\n      ? undefined\r\n      : {\r\n          [Version.v2]: v2Trade\r\n        }[toggledVersion]\r\n  \r\n    const parsedAmounts = showWrap\r\n      ? {\r\n          [Field.INPUT]: parsedAmount,\r\n          [Field.OUTPUT]: parsedAmount\r\n        }\r\n      : {\r\n          [Field.INPUT]: independentField === Field.INPUT ? parsedAmount : trade?.inputAmount,\r\n          [Field.OUTPUT]: independentField === Field.OUTPUT ? parsedAmount : trade?.outputAmount\r\n        }\r\n  \r\n    const { onSwitchTokens, onCurrencySelection, onUserInput, onChangeRecipient } = useSwapActionHandlers()\r\n    const isValid = !swapInputError\r\n    const dependentField: Field = independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT\r\n\r\n  const trackedTokenPairs = useTrackedTokenPairs()\r\n  const tokenPairsWithLiquidityTokens = useMemo(\r\n    () => trackedTokenPairs.map(tokens => ({ liquidityToken: toV2LiquidityToken(tokens), tokens })),\r\n    [trackedTokenPairs]\r\n  )\r\n  const liquidityTokens = useMemo(() => tokenPairsWithLiquidityTokens.map(tpwlt => tpwlt.liquidityToken), [\r\n    tokenPairsWithLiquidityTokens\r\n  ])\r\n  const [v2PairsBalances, fetchingV2PairBalances] = useTokenBalancesWithLoadingIndicator(\r\n    account ?? undefined,\r\n    liquidityTokens\r\n  )\r\n\r\n  // fetch the reserves for all V2 pools in which the user has a balance\r\n  const liquidityTokensWithBalances = useMemo(\r\n    () =>\r\n      tokenPairsWithLiquidityTokens.filter(({ liquidityToken }) =>\r\n        v2PairsBalances[liquidityToken.address]?.greaterThan('0')\r\n      ),\r\n    [tokenPairsWithLiquidityTokens, v2PairsBalances]\r\n  )\r\n\r\n  const formattedAmounts = {\r\n    [independentField]: typedValue,\r\n    [dependentField]: showWrap\r\n      ? parsedAmounts[independentField]?.toExact() ?? ''\r\n      : parsedAmounts[dependentField]?.toSignificant(6) ?? ''\r\n  }\r\n\r\n  const route = trade?.route\r\n  const userHasSpecifiedInputOutput = Boolean(\r\n    currencies[Field.INPUT] && parsedAmounts[independentField]?.greaterThan(JSBI.BigInt(0))\r\n  )\r\n  const noRoute = !route\r\n  const [allowedSlippage] = useUserSlippageTolerance()\r\n  // check whether the user has approved the router on the input token\r\n  const [approval, approveCallback] = useApproveCallbackFromTrade(trade, allowedSlippage)\r\n\r\n  // check if user has gone through approval process, used to show two step buttons, reset on token change\r\n  const [approvalSubmitted, setApprovalSubmitted] = useState<boolean>(false)\r\n\r\n  // mark when a user has submitted an approval, reset onTokenSelection for input field\r\n  useEffect(() => {\r\n    if (approval === ApprovalState.PENDING) {\r\n      setApprovalSubmitted(true)\r\n    }\r\n  }, [approval, approvalSubmitted])\r\n\r\n\r\n\r\n\r\n  const handleInputSelect = useCallback(\r\n    inputCurrency => {\r\n      setApprovalSubmitted(false) // reset 2 step UI for approvals\r\n      onCurrencySelection(Field.INPUT, inputCurrency)\r\n    },\r\n    [onCurrencySelection]\r\n  )\r\n\r\n  const handleTypeInput = useCallback(\r\n    (value: string) => {\r\n      onUserInput(Field.INPUT, value)\r\n    },\r\n    [onUserInput]\r\n  )\r\n  const handleTypeOutput = useCallback(\r\n    (value: string) => {\r\n      onUserInput(Field.OUTPUT, value)\r\n    },\r\n    [onUserInput]\r\n  )\r\n  const maxAmountInput: CurrencyAmount | undefined = maxAmountSpend(currencyBalances[Field.INPUT])\r\n  console.log('max', maxAmountSpend(currencyBalances[LP]))\r\n  const atMaxAmountInput = Boolean(maxAmountInput && parsedAmounts[Field.INPUT]?.equalTo(maxAmountInput))\r\n  const handleMaxInput = useCallback(() => {\r\n    alert('o')\r\n  }, [maxAmountInput, onUserInput])\r\n\r\n  console.log(Field.INPUT)\r\n  async function go() {\r\nlet tokenAmount = await window.document.getElementsByClassName('token-amount-input')\r\nconsole.log(tokenAmount[0].value)\r\n  }\r\n  async function replace() {\r\n  let imgLp =   await window.document.querySelector('#swap-currency-input2 > div > div.sc-cqCuEk.bFUFXO > button > span')\r\nif (imgLp) {\r\n imgLp.innerHTML = `<img src=\"http://localhost:3000/bananascoin.png\" width='34px;'></img><span style=\"padding-left: 0.3rem;\">BAN</span>`\r\n}\r\nconst provider = new ethers.providers.Web3Provider(window.ethereum)\r\nawait provider.send(\"eth_requestAccounts\", []);\r\nconst signer = provider.getSigner()\r\nconst signerAddress = await signer.getAddress()\r\nconst farmContract = new ethers.Contract(farmAddress, farmABI, provider);\r\nlet rewardsPerBlock = await farmContract.rewardPerBlock()\r\nrewardsPerBlock = ethers.utils.formatUnits(rewardsPerBlock, 18)\r\nlet APR = rewardsPerBlock * 1855058\r\nlet APRp = window.document.getElementById('apr')\r\nAPRp.innerText = `APY: ${Number(APR).toFixed(2)} %`\r\n\r\n  }\r\n  replace();\r\n\r\nasync function StakeLP() {\r\n  const provider2 = new ethers.providers.Web3Provider(window.ethereum)\r\n  await provider2.send(\"eth_requestAccounts\", []);\r\n  const signer2 = provider2.getSigner()\r\n  console.log(signer2)\r\n  let tokenAmount = await window.document.getElementsByClassName('token-amount-input')\r\n  const amountToDeposit = tokenAmount[0].value\r\n  \r\n  const farmContract = new ethers.Contract(farmAddress, farmABI, provider2);\r\n  const LPContract = new ethers.Contract(lpTokenAddress, lpTokenABI, provider2);\r\n  const Approve = await LPContract.approve(farmAddress, amountToDeposit)\r\n   \r\n  }\r\n  const dpid = 1\r\n  \r\n\r\n  return (\r\n    <>\r\n     <AppBody>\r\n<StakeTabs active={'earn'} />\r\n<AutoColumn width=\"500px\" gap=\"lg\" justify=\"center\">\r\n  <img src=\"http://localhost:3000/bananascoin.png\" width='150px'></img>\r\n<Text textAlign=\"center\">Stake your LP tokens to get extra $BANANAS rewards</Text>\r\n<CurrencyInputPanel \r\n\r\n\r\n              label={independentField === Field.OUTPUT && !showWrap && trade ? 'From (estimated)' : 'From'}\r\n           \r\n             value={formattedAmounts[Field.INPUT]}\r\n                \r\n              currency={LP}\r\n            \r\n              onUserInput={handleTypeInput}\r\n          \r\n        \r\n              \r\n              onCurrencySelect={handleInputSelect}\r\n              disableCurrencySelect={true}\r\n\r\n             \r\n                    /*\r\n              otherCurrency={currencies[Field.OUTPUT]}\r\n              \r\n*/  \r\n\r\n              id=\"swap-currency-input2\"\r\n            />\r\n    <ButtonPrimary id=\"join-pool-button\" as={Link} style={{ padding: 16 }} onClick={StakeLP}>\r\n      <Text fontWeight={500} fontSize={20}>\r\n        {t('stakeLp')}\r\n      </Text>\r\n    </ButtonPrimary>\r\n    <Text fontWeight={500} fontSize={20}>\r\n    <Text id=\"apr\"></Text> \r\n      </Text>\r\n    <Stake />\r\n    </AutoColumn>\r\n    \r\n</AppBody>\r\n    </>\r\n  )\r\n}\r\n\r\n//465: {betterTradeLinkVersion && <BetterTradeLink version={betterTradeLinkVersion} />}\r\n"]},"metadata":{},"sourceType":"module"}