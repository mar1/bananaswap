{"ast":null,"code":"import { useEffect, useState } from 'react';\n/**\r\n * Returns the last value of type T that passes a filter function\r\n * @param value changing value\r\n * @param filterFn function that determines whether a given value should be considered for the last value\r\n */\n\nexport default function useLast(value, filterFn) {\n  const [last, setLast] = useState(filterFn && filterFn(value) ? value : undefined);\n  useEffect(() => {\n    setLast(last => {\n      const shouldUse = filterFn ? filterFn(value) : true;\n      if (shouldUse) return value;\n      return last;\n    });\n  }, [filterFn, value]);\n  return last;\n}\n\nfunction isDefined(x) {\n  return x !== null && x !== undefined;\n}\n/**\r\n * Returns the last truthy value of type T\r\n * @param value changing value\r\n */\n\n\nexport function useLastTruthy(value) {\n  return useLast(value, isDefined);\n}","map":{"version":3,"sources":["C:/Users/marin/Documents/Dev/bananaswap/moonbeam-uniswap/uniswap-interface-moonbeam/src/hooks/useLast.ts"],"names":["useEffect","useState","useLast","value","filterFn","last","setLast","undefined","shouldUse","isDefined","x","useLastTruthy"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,OAAT,CACbC,KADa,EAEbC,QAFa,EAGS;AACtB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAuBG,QAAQ,IAAIA,QAAQ,CAACD,KAAD,CAApB,GAA8BA,KAA9B,GAAsCI,SAA7D,CAAhC;AACAP,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,OAAO,CAACD,IAAI,IAAI;AACd,YAAMG,SAAkB,GAAGJ,QAAQ,GAAGA,QAAQ,CAACD,KAAD,CAAX,GAAqB,IAAxD;AACA,UAAIK,SAAJ,EAAe,OAAOL,KAAP;AACf,aAAOE,IAAP;AACD,KAJM,CAAP;AAKD,GANQ,EAMN,CAACD,QAAD,EAAWD,KAAX,CANM,CAAT;AAOA,SAAOE,IAAP;AACD;;AAED,SAASI,SAAT,CAAsBC,CAAtB,EAAuD;AACrD,SAAOA,CAAC,KAAK,IAAN,IAAcA,CAAC,KAAKH,SAA3B;AACD;AAED;AACA;AACA;AACA;;;AACA,OAAO,SAASI,aAAT,CAA0BR,KAA1B,EAA6E;AAClF,SAAOD,OAAO,CAACC,KAAD,EAAQM,SAAR,CAAd;AACD","sourcesContent":["import { useEffect, useState } from 'react'\r\n\r\n/**\r\n * Returns the last value of type T that passes a filter function\r\n * @param value changing value\r\n * @param filterFn function that determines whether a given value should be considered for the last value\r\n */\r\nexport default function useLast<T>(\r\n  value: T | undefined | null,\r\n  filterFn?: (value: T | null | undefined) => boolean\r\n): T | null | undefined {\r\n  const [last, setLast] = useState<T | null | undefined>(filterFn && filterFn(value) ? value : undefined)\r\n  useEffect(() => {\r\n    setLast(last => {\r\n      const shouldUse: boolean = filterFn ? filterFn(value) : true\r\n      if (shouldUse) return value\r\n      return last\r\n    })\r\n  }, [filterFn, value])\r\n  return last\r\n}\r\n\r\nfunction isDefined<T>(x: T | null | undefined): x is T {\r\n  return x !== null && x !== undefined\r\n}\r\n\r\n/**\r\n * Returns the last truthy value of type T\r\n * @param value changing value\r\n */\r\nexport function useLastTruthy<T>(value: T | undefined | null): T | null | undefined {\r\n  return useLast(value, isDefined)\r\n}\r\n"]},"metadata":{},"sourceType":"module"}