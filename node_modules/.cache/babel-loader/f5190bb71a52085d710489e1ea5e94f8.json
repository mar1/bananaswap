{"ast":null,"code":"/**\r\n * Given a URI that may be ipfs, ipns, http, or https protocol, return the fetch-able http(s) URLs for the same content\r\n * @param uri to convert to fetch-able http url\r\n */export default function uriToHttp(uri){var _uri$match,_uri$match2;var protocol=uri.split(':')[0].toLowerCase();switch(protocol){case'https':return[uri];case'http':return[uri];case'ipfs':var hash=(_uri$match=uri.match(/^ipfs:(\\/\\/)?(.*)$/i))===null||_uri$match===void 0?void 0:_uri$match[2];return[\"https://cloudflare-ipfs.com/ipfs/\".concat(hash,\"/\"),\"https://ipfs.io/ipfs/\".concat(hash,\"/\")];case'ipns':var name=(_uri$match2=uri.match(/^ipns:(\\/\\/)?(.*)$/i))===null||_uri$match2===void 0?void 0:_uri$match2[2];return[\"https://cloudflare-ipfs.com/ipns/\".concat(name,\"/\"),\"https://ipfs.io/ipns/\".concat(name,\"/\")];default:return[];}}","map":{"version":3,"sources":["C:/Users/marin/Desktop/bananaswap/src/utils/uriToHttp.ts"],"names":["uriToHttp","uri","protocol","split","toLowerCase","hash","match","name"],"mappings":"AAAA;AACA;AACA;AACA,GACA,cAAe,SAASA,CAAAA,SAAT,CAAmBC,GAAnB,CAA0C,4BACvD,GAAMC,CAAAA,QAAQ,CAAGD,GAAG,CAACE,KAAJ,CAAU,GAAV,EAAe,CAAf,EAAkBC,WAAlB,EAAjB,CACA,OAAQF,QAAR,EACE,IAAK,OAAL,CACE,MAAO,CAACD,GAAD,CAAP,CACF,IAAK,MAAL,CACE,MAAO,CAACA,GAAD,CAAP,CACF,IAAK,MAAL,CACE,GAAMI,CAAAA,IAAI,aAAGJ,GAAG,CAACK,KAAJ,CAAU,qBAAV,CAAH,qCAAG,WAAmC,CAAnC,CAAb,CACA,MAAO,4CAAqCD,IAArC,qCAAsEA,IAAtE,MAAP,CACF,IAAK,MAAL,CACE,GAAME,CAAAA,IAAI,cAAGN,GAAG,CAACK,KAAJ,CAAU,qBAAV,CAAH,sCAAG,YAAmC,CAAnC,CAAb,CACA,MAAO,4CAAqCC,IAArC,qCAAsEA,IAAtE,MAAP,CACF,QACE,MAAO,EAAP,CAZJ,CAcD","sourcesContent":["/**\r\n * Given a URI that may be ipfs, ipns, http, or https protocol, return the fetch-able http(s) URLs for the same content\r\n * @param uri to convert to fetch-able http url\r\n */\r\nexport default function uriToHttp(uri: string): string[] {\r\n  const protocol = uri.split(':')[0].toLowerCase()\r\n  switch (protocol) {\r\n    case 'https':\r\n      return [uri]\r\n    case 'http':\r\n      return [uri]\r\n    case 'ipfs':\r\n      const hash = uri.match(/^ipfs:(\\/\\/)?(.*)$/i)?.[2]\r\n      return [`https://cloudflare-ipfs.com/ipfs/${hash}/`, `https://ipfs.io/ipfs/${hash}/`]\r\n    case 'ipns':\r\n      const name = uri.match(/^ipns:(\\/\\/)?(.*)$/i)?.[2]\r\n      return [`https://cloudflare-ipfs.com/ipns/${name}/`, `https://ipfs.io/ipns/${name}/`]\r\n    default:\r\n      return []\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}