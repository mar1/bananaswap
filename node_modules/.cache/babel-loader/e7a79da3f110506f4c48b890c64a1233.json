{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marin\\\\Documents\\\\Dev\\\\bananaswap\\\\moonbeam-uniswap\\\\uniswap-interface-moonbeam\\\\src\\\\pages\\\\Earn\\\\index.tsx\";\nimport { JSBI, Token, ChainId } from 'moonbeamswap';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { Text } from 'rebass';\nimport { useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport { ButtonPrimary } from '../../components/Button';\nimport { AutoColumn } from '../../components/Column';\nimport CurrencyInputPanel from '../../components/CurrencyInputPanel';\nimport { StakeTabs } from '../../components/NavigationTabs';\nimport { useActiveWeb3React } from '../../hooks';\nimport { ApprovalState, useApproveCallbackFromTrade } from '../../hooks/useApproveCallback';\nimport useENSAddress from '../../hooks/useENSAddress';\nimport useToggledVersion, { Version } from '../../hooks/useToggledVersion';\nimport useWrapCallback, { WrapType } from '../../hooks/useWrapCallback';\nimport { Field } from '../../state/swap/actions';\nimport { useDerivedSwapInfo, useSwapActionHandlers, useSwapState } from '../../state/swap/hooks';\nimport { useUserSlippageTolerance } from '../../state/user/hooks';\nimport { maxAmountSpend } from '../../utils/maxAmountSpend';\nimport AppBody from '../AppBody';\nimport { toV2LiquidityToken, useTrackedTokenPairs } from '../../state/user/hooks';\nimport { useTokenBalancesWithLoadingIndicator } from '../../state/wallet/hooks';\nimport '.././style.css';\nimport { ethers } from 'ethers';\nimport BigNumber from 'bignumber.js';\nexport const getFarmAddress = farm => {\n  return farm && farm.farmAddress;\n};\nexport const getERC20Address = farm => {\n  return farm && farm.erc20Address;\n};\nexport const getWethContract = farm => {\n  return farm && farm.contracts && farm.contracts.weth;\n};\nexport const getFarmContract = farm => {\n  return farm && farm.contracts && farm.contracts.farm;\n};\nexport const getERC20Contract = farm => {\n  return farm && farm.contracts && farm.contracts.erc20;\n};\nexport const getFarms = farm => {\n  return farm ? farm.contracts.pools.map(({\n    id,\n    pid,\n    version,\n    name,\n    symbol,\n    icon,\n    tokenAddress,\n    tokenSymbol,\n    tokenContract,\n    lpAddress,\n    lpContract,\n    pool\n  }) => ({\n    id,\n    pid,\n    version,\n    name,\n    lpToken: symbol,\n    lpTokenAddress: lpAddress,\n    lpContract,\n    tokenAddress,\n    tokenSymbol,\n    tokenContract,\n    earnToken: 'lto',\n    earnTokenAddress: farm.contracts.erc20.options.address,\n    icon,\n    pool\n  })) : [];\n};\nexport const getPoolWeight = async (farmContract, pid) => {\n  try {\n    const {\n      allocPoint\n    } = await farmContract.methods.poolInfo(pid).call();\n    const totalAllocPoint = await farmContract.methods.totalAllocPoint().call();\n    return new BigNumber(allocPoint).div(new BigNumber(totalAllocPoint));\n  } catch {\n    return new BigNumber(0);\n  }\n};\nexport const getEarned = async (farmContract, pid, account) => {\n  return farmContract.methods.pending(pid, account).call();\n};\nexport const getTotalLPWethValue = async (farmContract, wethContract, lpContract, tokenContract, pid) => {\n  // Get balance of the token address\n  const tokenAmountWholeLP = await tokenContract.methods.balanceOf(lpContract.options.address).call();\n  const tokenDecimals = await tokenContract.methods.decimals().call(); // Get the share of lpContract that farmContract owns\n\n  const balance = await lpContract.methods.balanceOf(farmContract.options.address).call(); // Convert that into the portion of total lpContract = p1\n\n  const totalSupply = await lpContract.methods.totalSupply().call(); // Get total weth value for the lpContract = w1\n\n  const lpContractWeth = await wethContract.methods.balanceOf(lpContract.options.address).call(); // Return p1 * w1 * 2\n\n  const portionLp = new BigNumber(balance).div(new BigNumber(totalSupply));\n  const lpWethWorth = new BigNumber(lpContractWeth);\n  const totalLpWethValue = portionLp.times(lpWethWorth).times(new BigNumber(2)); // Calculate\n\n  const tokenAmount = new BigNumber(tokenAmountWholeLP).times(portionLp).div(new BigNumber(10).pow(tokenDecimals));\n  const wethAmount = new BigNumber(lpContractWeth).times(portionLp).div(new BigNumber(10).pow(18));\n  return {\n    tokenAmount,\n    wethAmount,\n    totalWethValue: totalLpWethValue.div(new BigNumber(10).pow(18)),\n    tokenPriceInWeth: wethAmount.div(tokenAmount),\n    poolWeight: await getPoolWeight(farmContract, pid)\n  };\n};\nexport const approve = async (lpContract, farmContract, account) => {\n  return lpContract.methods.approve(farmContract.options.address, ethers.constants.MaxUint256).send({\n    from: account\n  });\n};\nexport const getFarmSupply = async farm => {\n  return new BigNumber(await farm.contracts.erc20.methods.totalSupply().call());\n}; //\n\nexport const getPoolStartTime = async farmContract => {\n  return await farmContract.methods.starttime().call();\n};\nexport const stake = async (farmContract, pid, amount, account) => {\n  return farmContract.methods.deposit(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString()).send({\n    from: account\n  }).on('transactionHash', tx => {\n    console.log(tx);\n    return tx.transactionHash;\n  });\n};\nexport const unstake = async (farmContract, pid, amount, account) => {\n  return farmContract.methods.withdraw(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString()).send({\n    from: account\n  }).on('transactionHash', tx => {\n    console.log(tx);\n    return tx.transactionHash;\n  });\n};\nexport const harvest = async (farmContract, pid, account) => {\n  return farmContract.methods.deposit(pid, '0').send({\n    from: account\n  }).on('transactionHash', tx => {\n    console.log(tx);\n    return tx.transactionHash;\n  });\n};\nexport const getStaked = async (farmContract, pid, account) => {\n  try {\n    const {\n      amount\n    } = await farmContract.methods.userInfo(pid, account).call();\n    return new BigNumber(amount);\n  } catch {\n    return new BigNumber(0);\n  }\n};\nexport const redeem = async (farmContract, account) => {\n  let now = new Date().getTime() / 1000;\n\n  if (now >= 1597172400) {\n    return farmContract.methods.exit().send({\n      from: account\n    }).on('transactionHash', tx => {\n      console.log(tx);\n      return tx.transactionHash;\n    });\n  } else {\n    alert('pool not active');\n  }\n};\nexport default function Swap() {\n  var _parsedAmounts$indepe, _parsedAmounts$indepe2, _parsedAmounts$depend, _parsedAmounts$depend2, _parsedAmounts$indepe3, _parsedAmounts$Field$;\n\n  const {\n    t\n  } = useTranslation();\n  const {\n    account\n  } = useActiveWeb3React();\n  const LP = new Token(ChainId.MOONBASE, '0x205A1AecA18DDCB130825B961BcE897302690A5d', 18, 'BAN', 'Bananaswap'); // swap state\n\n  const {\n    independentField,\n    typedValue,\n    recipient\n  } = useSwapState();\n  const {\n    v2Trade,\n    currencyBalances,\n    parsedAmount,\n    currencies,\n    inputError: swapInputError\n  } = useDerivedSwapInfo();\n  const {\n    wrapType,\n    execute: onWrap,\n    inputError: wrapInputError\n  } = useWrapCallback(currencies[Field.INPUT], currencies[Field.OUTPUT], typedValue);\n  console.log(currencies);\n  const showWrap = wrapType !== WrapType.NOT_APPLICABLE;\n  const {\n    address: recipientAddress\n  } = useENSAddress(recipient);\n  const toggledVersion = useToggledVersion();\n  const trade = showWrap ? undefined : {\n    [Version.v2]: v2Trade\n  }[toggledVersion];\n  const parsedAmounts = showWrap ? {\n    [Field.INPUT]: parsedAmount,\n    [Field.OUTPUT]: parsedAmount\n  } : {\n    [Field.INPUT]: independentField === Field.INPUT ? parsedAmount : trade === null || trade === void 0 ? void 0 : trade.inputAmount,\n    [Field.OUTPUT]: independentField === Field.OUTPUT ? parsedAmount : trade === null || trade === void 0 ? void 0 : trade.outputAmount\n  };\n  const {\n    onSwitchTokens,\n    onCurrencySelection,\n    onUserInput,\n    onChangeRecipient\n  } = useSwapActionHandlers();\n  const isValid = !swapInputError;\n  const dependentField = independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT;\n  const trackedTokenPairs = useTrackedTokenPairs();\n  const tokenPairsWithLiquidityTokens = useMemo(() => trackedTokenPairs.map(tokens => ({\n    liquidityToken: toV2LiquidityToken(tokens),\n    tokens\n  })), [trackedTokenPairs]);\n  const liquidityTokens = useMemo(() => tokenPairsWithLiquidityTokens.map(tpwlt => tpwlt.liquidityToken), [tokenPairsWithLiquidityTokens]);\n  const [v2PairsBalances, fetchingV2PairBalances] = useTokenBalancesWithLoadingIndicator(account !== null && account !== void 0 ? account : undefined, liquidityTokens);\n  console.log(liquidityTokens); // fetch the reserves for all V2 pools in which the user has a balance\n\n  const liquidityTokensWithBalances = useMemo(() => tokenPairsWithLiquidityTokens.filter(({\n    liquidityToken\n  }) => {\n    var _v2PairsBalances$liqu;\n\n    return (_v2PairsBalances$liqu = v2PairsBalances[liquidityToken.address]) === null || _v2PairsBalances$liqu === void 0 ? void 0 : _v2PairsBalances$liqu.greaterThan('0');\n  }), [tokenPairsWithLiquidityTokens, v2PairsBalances]);\n  const formattedAmounts = {\n    [independentField]: typedValue,\n    [dependentField]: showWrap ? (_parsedAmounts$indepe = (_parsedAmounts$indepe2 = parsedAmounts[independentField]) === null || _parsedAmounts$indepe2 === void 0 ? void 0 : _parsedAmounts$indepe2.toExact()) !== null && _parsedAmounts$indepe !== void 0 ? _parsedAmounts$indepe : '' : (_parsedAmounts$depend = (_parsedAmounts$depend2 = parsedAmounts[dependentField]) === null || _parsedAmounts$depend2 === void 0 ? void 0 : _parsedAmounts$depend2.toSignificant(6)) !== null && _parsedAmounts$depend !== void 0 ? _parsedAmounts$depend : ''\n  };\n  const route = trade === null || trade === void 0 ? void 0 : trade.route;\n  const userHasSpecifiedInputOutput = Boolean(currencies[Field.INPUT] && ((_parsedAmounts$indepe3 = parsedAmounts[independentField]) === null || _parsedAmounts$indepe3 === void 0 ? void 0 : _parsedAmounts$indepe3.greaterThan(JSBI.BigInt(0))));\n  const noRoute = !route;\n  const [allowedSlippage] = useUserSlippageTolerance(); // check whether the user has approved the router on the input token\n\n  const [approval, approveCallback] = useApproveCallbackFromTrade(trade, allowedSlippage); // check if user has gone through approval process, used to show two step buttons, reset on token change\n\n  const [approvalSubmitted, setApprovalSubmitted] = useState(false); // mark when a user has submitted an approval, reset onTokenSelection for input field\n\n  useEffect(() => {\n    if (approval === ApprovalState.PENDING) {\n      setApprovalSubmitted(true);\n    }\n  }, [approval, approvalSubmitted]);\n  const handleInputSelect = useCallback(inputCurrency => {\n    setApprovalSubmitted(false); // reset 2 step UI for approvals\n\n    onCurrencySelection(Field.INPUT, inputCurrency);\n  }, [onCurrencySelection]);\n  const handleTypeInput = useCallback(value => {\n    onUserInput(Field.INPUT, value);\n  }, [onUserInput]);\n  const handleTypeOutput = useCallback(value => {\n    onUserInput(Field.OUTPUT, value);\n  }, [onUserInput]);\n  const maxAmountInput = maxAmountSpend(currencyBalances[Field.INPUT]);\n  console.log('max', maxAmountSpend(currencyBalances[LP]));\n  const atMaxAmountInput = Boolean(maxAmountInput && ((_parsedAmounts$Field$ = parsedAmounts[Field.INPUT]) === null || _parsedAmounts$Field$ === void 0 ? void 0 : _parsedAmounts$Field$.equalTo(maxAmountInput)));\n  const handleMaxInput = useCallback(() => {\n    alert('o');\n  }, [maxAmountInput, onUserInput]);\n  console.log(Field.INPUT);\n\n  async function go() {\n    let tokenAmount = await window.document.getElementsByClassName('token-amount-input');\n    console.log(tokenAmount[0].value);\n  }\n\n  async function replace() {\n    let imgLp = await window.document.querySelector('#swap-currency-input2 > div > div.sc-cqCuEk.bFUFXO > button > span');\n\n    if (imgLp) {\n      imgLp.innerHTML = `<img src=\"http://localhost:3000/bananascoin.png\" width='34px;'></img><span style=\"padding-left: 0.3rem;\">BAN</span>`;\n    }\n  }\n\n  replace();\n  BigNumber.config({\n    EXPONENTIAL_AT: 1000,\n    DECIMAL_PLACES: 80\n  });\n  const GAS_LIMIT = {\n    STAKING: {\n      DEFAULT: 200000,\n      SNX: 850000\n    }\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AppBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(StakeTabs, {\n    active: 'earn',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 1\n    }\n  }), /*#__PURE__*/React.createElement(AutoColumn, {\n    width: \"500px\",\n    gap: \"lg\",\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 394,\n      columnNumber: 1\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"http://localhost:3000/bananascoin.png\",\n    width: \"150px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 3\n    }\n  }), /*#__PURE__*/React.createElement(Text, {\n    textAlign: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 1\n    }\n  }, \"Stake your LP tokens to get extra $BANANAS rewards\"), /*#__PURE__*/React.createElement(CurrencyInputPanel, {\n    label: independentField === Field.OUTPUT && !showWrap && trade ? 'From (estimated)' : 'From',\n    value: formattedAmounts[Field.INPUT],\n    currency: LP,\n    onUserInput: handleTypeInput,\n    onCurrencySelect: handleInputSelect,\n    disableCurrencySelect: true\n    /*\r\n    otherCurrency={currencies[Field.OUTPUT]}\r\n    */\n    ,\n    id: \"swap-currency-input2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 1\n    }\n  }), /*#__PURE__*/React.createElement(ButtonPrimary, {\n    id: \"join-pool-button\",\n    as: Link,\n    style: {\n      padding: 16\n    },\n    onClick: go,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 421,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    fontWeight: 500,\n    fontSize: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 7\n    }\n  }, t('stakeLp'))))));\n} //465: {betterTradeLinkVersion && <BetterTradeLink version={betterTradeLinkVersion} />}","map":{"version":3,"sources":["C:/Users/marin/Documents/Dev/bananaswap/moonbeam-uniswap/uniswap-interface-moonbeam/src/pages/Earn/index.tsx"],"names":["JSBI","Token","ChainId","React","useCallback","useEffect","useMemo","useState","Text","useTranslation","Link","ButtonPrimary","AutoColumn","CurrencyInputPanel","StakeTabs","useActiveWeb3React","ApprovalState","useApproveCallbackFromTrade","useENSAddress","useToggledVersion","Version","useWrapCallback","WrapType","Field","useDerivedSwapInfo","useSwapActionHandlers","useSwapState","useUserSlippageTolerance","maxAmountSpend","AppBody","toV2LiquidityToken","useTrackedTokenPairs","useTokenBalancesWithLoadingIndicator","ethers","BigNumber","getFarmAddress","farm","farmAddress","getERC20Address","erc20Address","getWethContract","contracts","weth","getFarmContract","getERC20Contract","erc20","getFarms","pools","map","id","pid","version","name","symbol","icon","tokenAddress","tokenSymbol","tokenContract","lpAddress","lpContract","pool","lpToken","lpTokenAddress","earnToken","earnTokenAddress","options","address","getPoolWeight","farmContract","allocPoint","methods","poolInfo","call","totalAllocPoint","div","getEarned","account","pending","getTotalLPWethValue","wethContract","tokenAmountWholeLP","balanceOf","tokenDecimals","decimals","balance","totalSupply","lpContractWeth","portionLp","lpWethWorth","totalLpWethValue","times","tokenAmount","pow","wethAmount","totalWethValue","tokenPriceInWeth","poolWeight","approve","constants","MaxUint256","send","from","getFarmSupply","getPoolStartTime","starttime","stake","amount","deposit","toString","on","tx","console","log","transactionHash","unstake","withdraw","harvest","getStaked","userInfo","redeem","now","Date","getTime","exit","alert","Swap","t","LP","MOONBASE","independentField","typedValue","recipient","v2Trade","currencyBalances","parsedAmount","currencies","inputError","swapInputError","wrapType","execute","onWrap","wrapInputError","INPUT","OUTPUT","showWrap","NOT_APPLICABLE","recipientAddress","toggledVersion","trade","undefined","v2","parsedAmounts","inputAmount","outputAmount","onSwitchTokens","onCurrencySelection","onUserInput","onChangeRecipient","isValid","dependentField","trackedTokenPairs","tokenPairsWithLiquidityTokens","tokens","liquidityToken","liquidityTokens","tpwlt","v2PairsBalances","fetchingV2PairBalances","liquidityTokensWithBalances","filter","greaterThan","formattedAmounts","toExact","toSignificant","route","userHasSpecifiedInputOutput","Boolean","BigInt","noRoute","allowedSlippage","approval","approveCallback","approvalSubmitted","setApprovalSubmitted","PENDING","handleInputSelect","inputCurrency","handleTypeInput","value","handleTypeOutput","maxAmountInput","atMaxAmountInput","equalTo","handleMaxInput","go","window","document","getElementsByClassName","replace","imgLp","querySelector","innerHTML","config","EXPONENTIAL_AT","DECIMAL_PLACES","GAS_LIMIT","STAKING","DEFAULT","SNX","padding"],"mappings":"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","sourcesContent":["import { CurrencyAmount, JSBI, Token, Trade, ChainId } from 'moonbeamswap'\r\nimport React, { useCallback, useContext, useEffect, useMemo, useState } from 'react'\r\nimport { ArrowDown } from 'react-feather'\r\nimport ReactGA from 'react-ga'\r\nimport { Text } from 'rebass'\r\nimport { useTranslation } from 'react-i18next'\r\nimport { Link } from 'react-router-dom'\r\nimport { ThemeContext } from 'styled-components'\r\nimport AddressInputPanel from '../../components/AddressInputPanel'\r\nimport { ButtonError, ButtonLight, ButtonPrimary, ButtonConfirmed } from '../../components/Button'\r\nimport Card, { GreyCard } from '../../components/Card'\r\nimport { AutoColumn } from '../../components/Column'\r\nimport ConfirmSwapModal from '../../components/swap/ConfirmSwapModal'\r\nimport CurrencyInputPanel from '../../components/CurrencyInputPanel'\r\nimport { StakeTabs } from '../../components/NavigationTabs'\r\nimport { AutoRow, RowBetween } from '../../components/Row'\r\nimport AdvancedSwapDetailsDropdown from '../../components/swap/AdvancedSwapDetailsDropdown'\r\nimport confirmPriceImpactWithoutFee from '../../components/swap/confirmPriceImpactWithoutFee'\r\nimport { ArrowWrapper, BottomGrouping, SwapCallbackError, Wrapper } from '../../components/swap/styleds'\r\nimport TradePrice from '../../components/swap/TradePrice'\r\nimport TokenWarningModal from '../../components/TokenWarningModal'\r\nimport ProgressSteps from '../../components/ProgressSteps'\r\n\r\nimport { INITIAL_ALLOWED_SLIPPAGE } from '../../constants'\r\nimport { useActiveWeb3React } from '../../hooks'\r\nimport { useCurrency } from '../../hooks/Tokens'\r\nimport { ApprovalState, useApproveCallbackFromTrade } from '../../hooks/useApproveCallback'\r\nimport useENSAddress from '../../hooks/useENSAddress'\r\nimport { useSwapCallback } from '../../hooks/useSwapCallback'\r\nimport useToggledVersion, { Version } from '../../hooks/useToggledVersion'\r\nimport useWrapCallback, { WrapType } from '../../hooks/useWrapCallback'\r\nimport { useToggleSettingsMenu, useWalletModalToggle } from '../../state/application/hooks'\r\nimport { Field } from '../../state/swap/actions'\r\nimport {\r\n  useDefaultsFromURLSearch,\r\n  useDerivedSwapInfo,\r\n  useSwapActionHandlers,\r\n  useSwapState\r\n} from '../../state/swap/hooks'\r\nimport { useExpertModeManager, useUserDeadline, useUserSlippageTolerance } from '../../state/user/hooks'\r\nimport { LinkStyledButton, TYPE } from '../../theme'\r\nimport { maxAmountSpend } from '../../utils/maxAmountSpend'\r\nimport { computeTradePriceBreakdown, warningSeverity } from '../../utils/prices'\r\nimport AppBody from '../AppBody'\r\nimport { ClickableText } from '../Pool/styleds'\r\nimport Loader from '../../components/Loader'\r\nimport { toV2LiquidityToken, useTrackedTokenPairs } from '../../state/user/hooks'\r\nimport { usePairs } from '../../data/Reserves'\r\nimport { useTokenBalancesWithLoadingIndicator } from '../../state/wallet/hooks'\r\nimport { Pair } from 'moonbeamswap'\r\nimport '.././style.css'\r\nimport { Contracts } from './contracts.js'\r\nimport { ethers } from 'ethers'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport ERC20Abi from './erc20.json'\r\nimport Stake from './components/Stake'\r\n\r\nimport BigNumber from 'bignumber.js'\r\n\r\nexport const getFarmAddress = (farm) => {\r\n  return farm && farm.farmAddress\r\n}\r\nexport const getERC20Address = (farm) => {\r\n  return farm && farm.erc20Address\r\n}\r\nexport const getWethContract = (farm) => {\r\n  return farm && farm.contracts && farm.contracts.weth\r\n}\r\n\r\nexport const getFarmContract = (farm) => {\r\n  return farm && farm.contracts && farm.contracts.farm\r\n}\r\nexport const getERC20Contract = (farm) => {\r\n  return farm && farm.contracts && farm.contracts.erc20\r\n}\r\n\r\nexport const getFarms = (farm) => {\r\n  return farm\r\n    ? farm.contracts.pools.map(\r\n        ({\r\n          id,\r\n          pid,\r\n          version,\r\n          name,\r\n          symbol,\r\n          icon,\r\n          tokenAddress,\r\n          tokenSymbol,\r\n          tokenContract,\r\n          lpAddress,\r\n          lpContract,\r\n          pool,\r\n        }) => ({\r\n          id,\r\n          pid,\r\n          version,\r\n          name,\r\n          lpToken: symbol,\r\n          lpTokenAddress: lpAddress,\r\n          lpContract,\r\n          tokenAddress,\r\n          tokenSymbol,\r\n          tokenContract,\r\n          earnToken: 'lto',\r\n          earnTokenAddress: farm.contracts.erc20.options.address,\r\n          icon,\r\n          pool,\r\n        }),\r\n      )\r\n    : []\r\n}\r\n\r\nexport const getPoolWeight = async (farmContract, pid) => {\r\n  try {\r\n    const { allocPoint } = await farmContract.methods.poolInfo(pid).call()\r\n    const totalAllocPoint = await farmContract.methods.totalAllocPoint().call()\r\n    return new BigNumber(allocPoint).div(new BigNumber(totalAllocPoint))\r\n  } catch {\r\n    return new BigNumber(0)\r\n  }\r\n}\r\n\r\nexport const getEarned = async (farmContract, pid, account) => {\r\n  return farmContract.methods.pending(pid, account).call()\r\n}\r\n\r\nexport const getTotalLPWethValue = async (\r\n  farmContract,\r\n  wethContract,\r\n  lpContract,\r\n  tokenContract,\r\n  pid,\r\n) => {\r\n  // Get balance of the token address\r\n  const tokenAmountWholeLP = await tokenContract.methods\r\n    .balanceOf(lpContract.options.address)\r\n    .call()\r\n  const tokenDecimals = await tokenContract.methods.decimals().call()\r\n  // Get the share of lpContract that farmContract owns\r\n  const balance = await lpContract.methods\r\n    .balanceOf(farmContract.options.address)\r\n    .call()\r\n  // Convert that into the portion of total lpContract = p1\r\n  const totalSupply = await lpContract.methods.totalSupply().call()\r\n  // Get total weth value for the lpContract = w1\r\n  const lpContractWeth = await wethContract.methods\r\n    .balanceOf(lpContract.options.address)\r\n    .call()\r\n  // Return p1 * w1 * 2\r\n  const portionLp = new BigNumber(balance).div(new BigNumber(totalSupply))\r\n  const lpWethWorth = new BigNumber(lpContractWeth)\r\n  const totalLpWethValue = portionLp.times(lpWethWorth).times(new BigNumber(2))\r\n  // Calculate\r\n  const tokenAmount = new BigNumber(tokenAmountWholeLP)\r\n    .times(portionLp)\r\n    .div(new BigNumber(10).pow(tokenDecimals))\r\n\r\n  const wethAmount = new BigNumber(lpContractWeth)\r\n    .times(portionLp)\r\n    .div(new BigNumber(10).pow(18))\r\n  return {\r\n    tokenAmount,\r\n    wethAmount,\r\n    totalWethValue: totalLpWethValue.div(new BigNumber(10).pow(18)),\r\n    tokenPriceInWeth: wethAmount.div(tokenAmount),\r\n    poolWeight: await getPoolWeight(farmContract, pid),\r\n  }\r\n}\r\n\r\nexport const approve = async (lpContract, farmContract, account) => {\r\n  return lpContract.methods\r\n    .approve(farmContract.options.address, ethers.constants.MaxUint256)\r\n    .send({ from: account })\r\n}\r\n\r\nexport const getFarmSupply = async (farm) => {\r\n  return new BigNumber(await farm.contracts.erc20.methods.totalSupply().call())\r\n}\r\n\r\n//\r\n\r\nexport const getPoolStartTime = async (farmContract) => {\r\n  return await farmContract.methods.starttime().call()\r\n}\r\n\r\nexport const stake = async (farmContract, pid, amount, account) => {\r\n  return farmContract.methods\r\n    .deposit(\r\n      pid,\r\n      new BigNumber(amount).times(new BigNumber(10).pow(18)).toString(),\r\n    )\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      console.log(tx)\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const unstake = async (farmContract, pid, amount, account) => {\r\n  return farmContract.methods\r\n    .withdraw(\r\n      pid,\r\n      new BigNumber(amount).times(new BigNumber(10).pow(18)).toString(),\r\n    )\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      console.log(tx)\r\n      return tx.transactionHash\r\n    })\r\n}\r\nexport const harvest = async (farmContract, pid, account) => {\r\n  return farmContract.methods\r\n    .deposit(pid, '0')\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      console.log(tx)\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const getStaked = async (farmContract, pid, account) => {\r\n  try {\r\n    const { amount } = await farmContract.methods.userInfo(pid, account).call()\r\n    return new BigNumber(amount)\r\n  } catch {\r\n    return new BigNumber(0)\r\n  }\r\n}\r\n\r\nexport const redeem = async (farmContract, account) => {\r\n  let now = new Date().getTime() / 1000\r\n  if (now >= 1597172400) {\r\n    return farmContract.methods\r\n      .exit()\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        console.log(tx)\r\n        return tx.transactionHash\r\n      })\r\n  } else {\r\n    alert('pool not active')\r\n  }\r\n}\r\nexport default function Swap() {\r\n  const { t } = useTranslation()\r\n  const { account } = useActiveWeb3React()\r\n\r\n const LP = new Token(ChainId.MOONBASE, '0x205A1AecA18DDCB130825B961BcE897302690A5d', 18, 'BAN', 'Bananaswap')\r\n\r\n    // swap state\r\n    const { independentField, typedValue, recipient } = useSwapState()\r\n    const { v2Trade, currencyBalances, parsedAmount, currencies, inputError: swapInputError } = useDerivedSwapInfo()\r\n    const { wrapType, execute: onWrap, inputError: wrapInputError } = useWrapCallback(\r\n      currencies[Field.INPUT],\r\n      currencies[Field.OUTPUT],\r\n      typedValue\r\n    )\r\n    console.log(currencies)\r\n    const showWrap: boolean = wrapType !== WrapType.NOT_APPLICABLE\r\n    const { address: recipientAddress } = useENSAddress(recipient)\r\n    const toggledVersion = useToggledVersion()\r\n    const trade = showWrap\r\n      ? undefined\r\n      : {\r\n          [Version.v2]: v2Trade\r\n        }[toggledVersion]\r\n  \r\n    const parsedAmounts = showWrap\r\n      ? {\r\n          [Field.INPUT]: parsedAmount,\r\n          [Field.OUTPUT]: parsedAmount\r\n        }\r\n      : {\r\n          [Field.INPUT]: independentField === Field.INPUT ? parsedAmount : trade?.inputAmount,\r\n          [Field.OUTPUT]: independentField === Field.OUTPUT ? parsedAmount : trade?.outputAmount\r\n        }\r\n  \r\n    const { onSwitchTokens, onCurrencySelection, onUserInput, onChangeRecipient } = useSwapActionHandlers()\r\n    const isValid = !swapInputError\r\n    const dependentField: Field = independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT\r\n\r\n  const trackedTokenPairs = useTrackedTokenPairs()\r\n  const tokenPairsWithLiquidityTokens = useMemo(\r\n    () => trackedTokenPairs.map(tokens => ({ liquidityToken: toV2LiquidityToken(tokens), tokens })),\r\n    [trackedTokenPairs]\r\n  )\r\n  const liquidityTokens = useMemo(() => tokenPairsWithLiquidityTokens.map(tpwlt => tpwlt.liquidityToken), [\r\n    tokenPairsWithLiquidityTokens\r\n  ])\r\n  const [v2PairsBalances, fetchingV2PairBalances] = useTokenBalancesWithLoadingIndicator(\r\n    account ?? undefined,\r\n    liquidityTokens\r\n  )\r\n\r\n  console.log(liquidityTokens)\r\n\r\n  // fetch the reserves for all V2 pools in which the user has a balance\r\n  const liquidityTokensWithBalances = useMemo(\r\n    () =>\r\n      tokenPairsWithLiquidityTokens.filter(({ liquidityToken }) =>\r\n        v2PairsBalances[liquidityToken.address]?.greaterThan('0')\r\n      ),\r\n    [tokenPairsWithLiquidityTokens, v2PairsBalances]\r\n  )\r\n\r\n  const formattedAmounts = {\r\n    [independentField]: typedValue,\r\n    [dependentField]: showWrap\r\n      ? parsedAmounts[independentField]?.toExact() ?? ''\r\n      : parsedAmounts[dependentField]?.toSignificant(6) ?? ''\r\n  }\r\n\r\n  const route = trade?.route\r\n  const userHasSpecifiedInputOutput = Boolean(\r\n    currencies[Field.INPUT] && parsedAmounts[independentField]?.greaterThan(JSBI.BigInt(0))\r\n  )\r\n  const noRoute = !route\r\n  const [allowedSlippage] = useUserSlippageTolerance()\r\n  // check whether the user has approved the router on the input token\r\n  const [approval, approveCallback] = useApproveCallbackFromTrade(trade, allowedSlippage)\r\n\r\n  // check if user has gone through approval process, used to show two step buttons, reset on token change\r\n  const [approvalSubmitted, setApprovalSubmitted] = useState<boolean>(false)\r\n\r\n  // mark when a user has submitted an approval, reset onTokenSelection for input field\r\n  useEffect(() => {\r\n    if (approval === ApprovalState.PENDING) {\r\n      setApprovalSubmitted(true)\r\n    }\r\n  }, [approval, approvalSubmitted])\r\n\r\n\r\n\r\n\r\n  const handleInputSelect = useCallback(\r\n    inputCurrency => {\r\n      setApprovalSubmitted(false) // reset 2 step UI for approvals\r\n      onCurrencySelection(Field.INPUT, inputCurrency)\r\n    },\r\n    [onCurrencySelection]\r\n  )\r\n\r\n  const handleTypeInput = useCallback(\r\n    (value: string) => {\r\n      onUserInput(Field.INPUT, value)\r\n    },\r\n    [onUserInput]\r\n  )\r\n  const handleTypeOutput = useCallback(\r\n    (value: string) => {\r\n      onUserInput(Field.OUTPUT, value)\r\n    },\r\n    [onUserInput]\r\n  )\r\n  const maxAmountInput: CurrencyAmount | undefined = maxAmountSpend(currencyBalances[Field.INPUT])\r\n  console.log('max', maxAmountSpend(currencyBalances[LP]))\r\n  const atMaxAmountInput = Boolean(maxAmountInput && parsedAmounts[Field.INPUT]?.equalTo(maxAmountInput))\r\n  const handleMaxInput = useCallback(() => {\r\n    alert('o')\r\n  }, [maxAmountInput, onUserInput])\r\n\r\n  console.log(Field.INPUT)\r\n  async function go() {\r\nlet tokenAmount = await window.document.getElementsByClassName('token-amount-input')\r\nconsole.log(tokenAmount[0].value)\r\n  }\r\n  async function replace() {\r\n  let imgLp =   await window.document.querySelector('#swap-currency-input2 > div > div.sc-cqCuEk.bFUFXO > button > span')\r\nif (imgLp) {\r\n imgLp.innerHTML = `<img src=\"http://localhost:3000/bananascoin.png\" width='34px;'></img><span style=\"padding-left: 0.3rem;\">BAN</span>`\r\n}\r\n  }\r\n  replace();\r\n\r\n  BigNumber.config({\r\n    EXPONENTIAL_AT: 1000,\r\n    DECIMAL_PLACES: 80,\r\n  })\r\n  \r\n  const GAS_LIMIT = {\r\n    STAKING: {\r\n      DEFAULT: 200000,\r\n      SNX: 850000,\r\n    },\r\n  }\r\n  \r\n  \r\n  \r\n\r\n  return (\r\n    <>\r\n     <AppBody>\r\n<StakeTabs active={'earn'} />\r\n<AutoColumn width=\"500px\" gap=\"lg\" justify=\"center\">\r\n  <img src=\"http://localhost:3000/bananascoin.png\" width='150px'></img>\r\n<Text textAlign=\"center\">Stake your LP tokens to get extra $BANANAS rewards</Text>\r\n<CurrencyInputPanel \r\n\r\n\r\n              label={independentField === Field.OUTPUT && !showWrap && trade ? 'From (estimated)' : 'From'}\r\n           \r\n             value={formattedAmounts[Field.INPUT]}\r\n                \r\n              currency={LP}\r\n            \r\n              onUserInput={handleTypeInput}\r\n          \r\n        \r\n              \r\n              onCurrencySelect={handleInputSelect}\r\n              disableCurrencySelect={true}\r\n\r\n             \r\n                    /*\r\n              otherCurrency={currencies[Field.OUTPUT]}\r\n              \r\n*/  \r\n\r\n              id=\"swap-currency-input2\"\r\n            />\r\n    <ButtonPrimary id=\"join-pool-button\" as={Link} style={{ padding: 16 }} onClick={go}>\r\n      <Text fontWeight={500} fontSize={20}>\r\n        {t('stakeLp')}\r\n      </Text>\r\n    </ButtonPrimary>\r\n    </AutoColumn>\r\n</AppBody>\r\n    </>\r\n  )\r\n}\r\n\r\n//465: {betterTradeLinkVersion && <BetterTradeLink version={betterTradeLinkVersion} />}\r\n"]},"metadata":{},"sourceType":"module"}