{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marin\\\\Desktop\\\\bananaswap\\\\src\\\\components\\\\Settings\\\\index.tsx\";\nimport React, { useRef, useContext, useState } from 'react';\nimport { Settings, X } from 'react-feather';\nimport styled from 'styled-components';\nimport { useOnClickOutside } from '../../hooks/useOnClickOutside';\nimport { useUserSlippageTolerance, useExpertModeManager, useUserDeadline } from '../../state/user/hooks'; //useDarkModeManager\n\nimport TransactionSettings from '../TransactionSettings';\nimport { RowFixed, RowBetween } from '../Row';\nimport { TYPE } from '../../theme';\nimport QuestionHelper from '../QuestionHelper';\nimport Toggle from '../Toggle';\nimport { ThemeContext } from 'styled-components';\nimport { AutoColumn } from '../Column';\nimport { ButtonError } from '../Button';\nimport { useSettingsMenuOpen, useToggleSettingsMenu } from '../../state/application/hooks';\nimport { Text } from 'rebass';\nimport Modal from '../Modal';\nimport { useTranslation } from 'react-i18next';\nconst StyledMenuIcon = styled(Settings)`\n  height: 20px;\n  width: 20px;\n\n  > * {\n    stroke: ${({\n  theme\n}) => theme.text1};\n  }\n`;\nconst StyledCloseIcon = styled(X)`\n  height: 20px;\n  width: 20px;\n  :hover {\n    cursor: pointer;\n  }\n\n  > * {\n    stroke: ${({\n  theme\n}) => theme.text1};\n  }\n`;\nconst StyledMenuButton = styled.button`\n  position: relative;\n  width: 100%;\n  height: 100%;\n  border: none;\n  background-color: transparent;\n  margin: 0;\n  padding: 0;\n  height: 35px;\n  background-color: ${({\n  theme\n}) => theme.bg3};\n\n  padding: 0.15rem 0.5rem;\n  border-radius: 0.5rem;\n\n  :hover,\n  :focus {\n    cursor: pointer;\n    outline: none;\n    background-color: ${({\n  theme\n}) => theme.bg4};\n  }\n\n  svg {\n    margin-top: 2px;\n  }\n`;\nconst EmojiWrapper = styled.div`\n  position: absolute;\n  bottom: -6px;\n  right: 0px;\n  font-size: 14px;\n`;\nconst StyledMenu = styled.div`\n  margin-left: 0.5rem;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n  border: none;\n  text-align: left;\n`;\nconst MenuFlyout = styled.span`\n  min-width: 20.125rem;\n  background-color: ${({\n  theme\n}) => theme.bg1};\n  box-shadow: 0px 0px 1px rgba(0, 0, 0, 0.01), 0px 4px 8px rgba(0, 0, 0, 0.04), 0px 16px 24px rgba(0, 0, 0, 0.04),\n    0px 24px 32px rgba(0, 0, 0, 0.01);\n\n  border: 1px solid ${({\n  theme\n}) => theme.bg3};\n\n  border-radius: 0.5rem;\n  display: flex;\n  flex-direction: column;\n  font-size: 1rem;\n  position: absolute;\n  top: 3rem;\n  right: 0rem;\n  z-index: 100;\n\n  ${({\n  theme\n}) => theme.mediaWidth.upToExtraSmall`\n    min-width: 18.125rem;\n    right: -46px;\n  `};\n`;\nconst Break = styled.div`\n  width: 100%;\n  height: 1px;\n  background-color: ${({\n  theme\n}) => theme.bg3};\n`;\nconst ModalContentWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 2rem 0;\n  background-color: ${({\n  theme\n}) => theme.bg2};\n  border-radius: 20px;\n`;\nexport default function SettingsTab() {\n  const node = useRef();\n  const open = useSettingsMenuOpen();\n  const toggle = useToggleSettingsMenu();\n  const {\n    t\n  } = useTranslation();\n  const theme = useContext(ThemeContext);\n  const [userSlippageTolerance, setUserslippageTolerance] = useUserSlippageTolerance();\n  const [deadline, setDeadline] = useUserDeadline();\n  const [expertMode, toggleExpertMode] = useExpertModeManager(); //const [darkMode, toggleDarkMode] = useDarkModeManager()\n  // show confirmation view before turning on\n\n  const [showConfirmation, setShowConfirmation] = useState(false);\n  useOnClickOutside(node, open ? toggle : undefined);\n  return (\n    /*#__PURE__*/\n    // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/30451\n    React.createElement(StyledMenu, {\n      ref: node,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Modal, {\n      isOpen: showConfirmation,\n      onDismiss: () => setShowConfirmation(false),\n      maxHeight: 100,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ModalContentWrapper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(AutoColumn, {\n      gap: \"lg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(RowBetween, {\n      style: {\n        padding: '0 2rem'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(Text, {\n      fontWeight: 500,\n      fontSize: 20,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 15\n      }\n    }, t('areYouSure')), /*#__PURE__*/React.createElement(StyledCloseIcon, {\n      onClick: () => setShowConfirmation(false),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(Break, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(AutoColumn, {\n      gap: \"lg\",\n      style: {\n        padding: '0 2rem'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Text, {\n      fontWeight: 500,\n      fontSize: 20,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 15\n      }\n    }, t('expertModeTips1')), /*#__PURE__*/React.createElement(Text, {\n      fontWeight: 600,\n      fontSize: 20,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 15\n      }\n    }, t('expertModeTips2')), /*#__PURE__*/React.createElement(ButtonError, {\n      error: true,\n      padding: '12px',\n      onClick: () => {\n        if (window.prompt(`Please type the word \"confirm\" to enable expert mode.`) === 'confirm') {\n          toggleExpertMode();\n          setShowConfirmation(false);\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Text, {\n      fontSize: 20,\n      fontWeight: 500,\n      id: \"confirm-expert-mode\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 17\n      }\n    }, t('turnOnExpertMode'))))))), /*#__PURE__*/React.createElement(StyledMenuButton, {\n      onClick: toggle,\n      id: \"open-settings-dialog-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(StyledMenuIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }\n    }), expertMode && /*#__PURE__*/React.createElement(EmojiWrapper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      role: \"img\",\n      \"aria-label\": \"wizard-icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 13\n      }\n    }, \"\\uD83E\\uDDD9\"))), open && /*#__PURE__*/React.createElement(MenuFlyout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(AutoColumn, {\n      gap: \"md\",\n      style: {\n        padding: '1rem'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Text, {\n      fontWeight: 600,\n      fontSize: 14,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 13\n      }\n    }, t('transactionSettings')), /*#__PURE__*/React.createElement(TransactionSettings, {\n      rawSlippage: userSlippageTolerance,\n      setRawSlippage: setUserslippageTolerance,\n      deadline: deadline,\n      setDeadline: setDeadline,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Text, {\n      fontWeight: 600,\n      fontSize: 14,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 13\n      }\n    }, t('interfaceSettings')), /*#__PURE__*/React.createElement(RowBetween, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(RowFixed, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(TYPE.black, {\n      fontWeight: 400,\n      fontSize: 14,\n      color: theme.text2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 17\n      }\n    }, t('toggleExpertMode')), /*#__PURE__*/React.createElement(QuestionHelper, {\n      text: \"Bypasses confirmation modals and allows high slippage trades. Use at your own risk.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(Toggle, {\n      id: \"toggle-expert-mode-button\",\n      isActive: expertMode,\n      toggle: expertMode ? () => {\n        toggleExpertMode();\n        setShowConfirmation(false);\n      } : () => {\n        toggle();\n        setShowConfirmation(true);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 15\n      }\n    })))))\n  );\n}\n/*\r\n<RowBetween>\r\n              <RowFixed>\r\n                <TYPE.black fontWeight={400} fontSize={14} color={theme.text2}>\r\n                  {t('toggleDarkMode')}\r\n                </TYPE.black>\r\n              </RowFixed>\r\n              <Toggle isActive={darkMode} toggle={toggleDarkMode} />\r\n            </RowBetween>\r\n  */","map":{"version":3,"sources":["C:/Users/marin/Desktop/bananaswap/src/components/Settings/index.tsx"],"names":["React","useRef","useContext","useState","Settings","X","styled","useOnClickOutside","useUserSlippageTolerance","useExpertModeManager","useUserDeadline","TransactionSettings","RowFixed","RowBetween","TYPE","QuestionHelper","Toggle","ThemeContext","AutoColumn","ButtonError","useSettingsMenuOpen","useToggleSettingsMenu","Text","Modal","useTranslation","StyledMenuIcon","theme","text1","StyledCloseIcon","StyledMenuButton","button","bg3","bg4","EmojiWrapper","div","StyledMenu","MenuFlyout","span","bg1","mediaWidth","upToExtraSmall","Break","ModalContentWrapper","bg2","SettingsTab","node","open","toggle","t","userSlippageTolerance","setUserslippageTolerance","deadline","setDeadline","expertMode","toggleExpertMode","showConfirmation","setShowConfirmation","undefined","padding","window","prompt","text2"],"mappings":"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","sourcesContent":["import React, { useRef, useContext, useState } from 'react'\r\nimport { Settings, X } from 'react-feather'\r\nimport styled from 'styled-components'\r\nimport { useOnClickOutside } from '../../hooks/useOnClickOutside'\r\nimport {\r\n  useUserSlippageTolerance,\r\n  useExpertModeManager,\r\n  useUserDeadline,\r\n} from '../../state/user/hooks'\r\n//useDarkModeManager\r\nimport TransactionSettings from '../TransactionSettings'\r\nimport { RowFixed, RowBetween } from '../Row'\r\nimport { TYPE } from '../../theme'\r\nimport QuestionHelper from '../QuestionHelper'\r\nimport Toggle from '../Toggle'\r\nimport { ThemeContext } from 'styled-components'\r\nimport { AutoColumn } from '../Column'\r\nimport { ButtonError } from '../Button'\r\nimport { useSettingsMenuOpen, useToggleSettingsMenu } from '../../state/application/hooks'\r\nimport { Text } from 'rebass'\r\nimport Modal from '../Modal'\r\nimport { useTranslation } from 'react-i18next'\r\n\r\nconst StyledMenuIcon = styled(Settings)`\r\n  height: 20px;\r\n  width: 20px;\r\n\r\n  > * {\r\n    stroke: ${({ theme }) => theme.text1};\r\n  }\r\n`\r\n\r\nconst StyledCloseIcon = styled(X)`\r\n  height: 20px;\r\n  width: 20px;\r\n  :hover {\r\n    cursor: pointer;\r\n  }\r\n\r\n  > * {\r\n    stroke: ${({ theme }) => theme.text1};\r\n  }\r\n`\r\n\r\nconst StyledMenuButton = styled.button`\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100%;\r\n  border: none;\r\n  background-color: transparent;\r\n  margin: 0;\r\n  padding: 0;\r\n  height: 35px;\r\n  background-color: ${({ theme }) => theme.bg3};\r\n\r\n  padding: 0.15rem 0.5rem;\r\n  border-radius: 0.5rem;\r\n\r\n  :hover,\r\n  :focus {\r\n    cursor: pointer;\r\n    outline: none;\r\n    background-color: ${({ theme }) => theme.bg4};\r\n  }\r\n\r\n  svg {\r\n    margin-top: 2px;\r\n  }\r\n`\r\nconst EmojiWrapper = styled.div`\r\n  position: absolute;\r\n  bottom: -6px;\r\n  right: 0px;\r\n  font-size: 14px;\r\n`\r\n\r\nconst StyledMenu = styled.div`\r\n  margin-left: 0.5rem;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  position: relative;\r\n  border: none;\r\n  text-align: left;\r\n`\r\n\r\nconst MenuFlyout = styled.span`\r\n  min-width: 20.125rem;\r\n  background-color: ${({ theme }) => theme.bg1};\r\n  box-shadow: 0px 0px 1px rgba(0, 0, 0, 0.01), 0px 4px 8px rgba(0, 0, 0, 0.04), 0px 16px 24px rgba(0, 0, 0, 0.04),\r\n    0px 24px 32px rgba(0, 0, 0, 0.01);\r\n\r\n  border: 1px solid ${({ theme }) => theme.bg3};\r\n\r\n  border-radius: 0.5rem;\r\n  display: flex;\r\n  flex-direction: column;\r\n  font-size: 1rem;\r\n  position: absolute;\r\n  top: 3rem;\r\n  right: 0rem;\r\n  z-index: 100;\r\n\r\n  ${({ theme }) => theme.mediaWidth.upToExtraSmall`\r\n    min-width: 18.125rem;\r\n    right: -46px;\r\n  `};\r\n`\r\n\r\nconst Break = styled.div`\r\n  width: 100%;\r\n  height: 1px;\r\n  background-color: ${({ theme }) => theme.bg3};\r\n`\r\n\r\nconst ModalContentWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 2rem 0;\r\n  background-color: ${({ theme }) => theme.bg2};\r\n  border-radius: 20px;\r\n`\r\n\r\nexport default function SettingsTab() {\r\n  const node = useRef<HTMLDivElement>()\r\n  const open = useSettingsMenuOpen()\r\n  const toggle = useToggleSettingsMenu()\r\n  const { t } = useTranslation()\r\n\r\n  const theme = useContext(ThemeContext)\r\n  const [userSlippageTolerance, setUserslippageTolerance] = useUserSlippageTolerance()\r\n\r\n  const [deadline, setDeadline] = useUserDeadline()\r\n\r\n  const [expertMode, toggleExpertMode] = useExpertModeManager()\r\n\r\n  //const [darkMode, toggleDarkMode] = useDarkModeManager()\r\n\r\n  // show confirmation view before turning on\r\n  const [showConfirmation, setShowConfirmation] = useState(false)\r\n\r\n  useOnClickOutside(node, open ? toggle : undefined)\r\n\r\n  return (\r\n    // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/30451\r\n    <StyledMenu ref={node as any}>\r\n      <Modal isOpen={showConfirmation} onDismiss={() => setShowConfirmation(false)} maxHeight={100}>\r\n        <ModalContentWrapper>\r\n          <AutoColumn gap=\"lg\">\r\n            <RowBetween style={{ padding: '0 2rem' }}>\r\n              <div />\r\n              <Text fontWeight={500} fontSize={20}>\r\n              {t('areYouSure')}\r\n              </Text>\r\n              <StyledCloseIcon onClick={() => setShowConfirmation(false)} />\r\n            </RowBetween>\r\n            <Break />\r\n            <AutoColumn gap=\"lg\" style={{ padding: '0 2rem' }}>\r\n              <Text fontWeight={500} fontSize={20}>\r\n              {t('expertModeTips1')}\r\n              </Text>\r\n              <Text fontWeight={600} fontSize={20}>\r\n              {t('expertModeTips2')}\r\n              </Text>\r\n              <ButtonError\r\n                error={true}\r\n                padding={'12px'}\r\n                onClick={() => {\r\n                  if (window.prompt(`Please type the word \"confirm\" to enable expert mode.`) === 'confirm') {\r\n                    toggleExpertMode()\r\n                    setShowConfirmation(false)\r\n                  }\r\n                }}\r\n              >\r\n                <Text fontSize={20} fontWeight={500} id=\"confirm-expert-mode\">\r\n                {t('turnOnExpertMode')}\r\n                </Text>\r\n              </ButtonError>\r\n            </AutoColumn>\r\n          </AutoColumn>\r\n        </ModalContentWrapper>\r\n      </Modal>\r\n      <StyledMenuButton onClick={toggle} id=\"open-settings-dialog-button\">\r\n        <StyledMenuIcon />\r\n        {expertMode && (\r\n          <EmojiWrapper>\r\n            <span role=\"img\" aria-label=\"wizard-icon\">\r\n              🧙\r\n            </span>\r\n          </EmojiWrapper>\r\n        )}\r\n      </StyledMenuButton>\r\n      {open && (\r\n        <MenuFlyout>\r\n          <AutoColumn gap=\"md\" style={{ padding: '1rem' }}>\r\n            <Text fontWeight={600} fontSize={14}>\r\n              {t('transactionSettings')}\r\n            </Text>\r\n            <TransactionSettings\r\n              rawSlippage={userSlippageTolerance}\r\n              setRawSlippage={setUserslippageTolerance}\r\n              deadline={deadline}\r\n              setDeadline={setDeadline}\r\n            />\r\n            <Text fontWeight={600} fontSize={14}>\r\n            {t('interfaceSettings')}\r\n            </Text>\r\n            <RowBetween>\r\n              <RowFixed>\r\n                <TYPE.black fontWeight={400} fontSize={14} color={theme.text2}>\r\n                {t('toggleExpertMode')}\r\n                </TYPE.black>\r\n                <QuestionHelper text=\"Bypasses confirmation modals and allows high slippage trades. Use at your own risk.\" />\r\n              </RowFixed>\r\n              <Toggle\r\n                id=\"toggle-expert-mode-button\"\r\n                isActive={expertMode}\r\n                toggle={\r\n                  expertMode\r\n                    ? () => {\r\n                        toggleExpertMode()\r\n                        setShowConfirmation(false)\r\n                      }\r\n                    : () => {\r\n                        toggle()\r\n                        setShowConfirmation(true)\r\n                      }\r\n                }\r\n              />\r\n            </RowBetween>\r\n            \r\n          </AutoColumn>\r\n        </MenuFlyout>\r\n      )}\r\n    </StyledMenu>\r\n  )\r\n}\r\n\r\n/*\r\n<RowBetween>\r\n              <RowFixed>\r\n                <TYPE.black fontWeight={400} fontSize={14} color={theme.text2}>\r\n                  {t('toggleDarkMode')}\r\n                </TYPE.black>\r\n              </RowFixed>\r\n              <Toggle isActive={darkMode} toggle={toggleDarkMode} />\r\n            </RowBetween>\r\n  */\r\n"]},"metadata":{},"sourceType":"module"}