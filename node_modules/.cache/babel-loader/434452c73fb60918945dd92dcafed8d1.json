{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\marin\\\\Desktop\\\\bananaswap\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _objectSpread from\"C:\\\\Users\\\\marin\\\\Desktop\\\\bananaswap\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _toConsumableArray from\"C:\\\\Users\\\\marin\\\\Desktop\\\\bananaswap\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import _asyncToGenerator from\"C:\\\\Users\\\\marin\\\\Desktop\\\\bananaswap\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import{JSBI,Percent,Router,TradeType}from'moonbeamswap';import{useMemo}from'react';import{BIPS_BASE,DEFAULT_DEADLINE_FROM_NOW,INITIAL_ALLOWED_SLIPPAGE}from'../constants';import{useTransactionAdder}from'../state/transactions/hooks';import{calculateGasMargin,getRouterContract,isAddress,shortenAddress}from'../utils';import isZero from'../utils/isZero';import{useActiveWeb3React}from'./index';import useENS from'./useENS';export var SwapCallbackState;(function(SwapCallbackState){SwapCallbackState[SwapCallbackState[\"INVALID\"]=0]=\"INVALID\";SwapCallbackState[SwapCallbackState[\"LOADING\"]=1]=\"LOADING\";SwapCallbackState[SwapCallbackState[\"VALID\"]=2]=\"VALID\";})(SwapCallbackState||(SwapCallbackState={}));/**\r\n * Returns the swap calls that can be used to make the trade\r\n * @param trade trade to execute\r\n * @param allowedSlippage user allowed slippage\r\n * @param deadline the deadline for the trade\r\n * @param recipientAddressOrName\r\n */function useSwapCallArguments(trade){var allowedSlippage=arguments.length>1&&arguments[1]!==undefined?arguments[1]:INITIAL_ALLOWED_SLIPPAGE;var deadline=arguments.length>2&&arguments[2]!==undefined?arguments[2]:DEFAULT_DEADLINE_FROM_NOW;var// in seconds from now\nrecipientAddressOrName=arguments.length>3?arguments[3]:undefined;var _useActiveWeb3React=useActiveWeb3React(),account=_useActiveWeb3React.account,chainId=_useActiveWeb3React.chainId,library=_useActiveWeb3React.library;var _useENS=useENS(recipientAddressOrName),recipientAddress=_useENS.address;var recipient=recipientAddressOrName===null?account:recipientAddress;return useMemo(function(){if(!trade||!recipient||!library||!account||!chainId)return[];var contract=getRouterContract(chainId,library,account);if(!contract){return[];}var swapMethods=[];swapMethods.push(Router.swapCallParameters(trade,{feeOnTransfer:false,allowedSlippage:new Percent(JSBI.BigInt(allowedSlippage),BIPS_BASE),recipient:recipient,ttl:deadline}));if(trade.tradeType===TradeType.EXACT_INPUT){swapMethods.push(Router.swapCallParameters(trade,{feeOnTransfer:true,allowedSlippage:new Percent(JSBI.BigInt(allowedSlippage),BIPS_BASE),recipient:recipient,ttl:deadline}));}return swapMethods.map(function(parameters){return{parameters:parameters,contract:contract};});},[account,allowedSlippage,chainId,deadline,library,recipient,trade]);}// returns a function that will execute a swap, if the parameters are all valid\n// and the user has approved the slippage adjusted input amount for the trade\nexport function useSwapCallback(trade){var allowedSlippage=arguments.length>1&&arguments[1]!==undefined?arguments[1]:INITIAL_ALLOWED_SLIPPAGE;var deadline=arguments.length>2&&arguments[2]!==undefined?arguments[2]:DEFAULT_DEADLINE_FROM_NOW;var// in seconds from now\nrecipientAddressOrName=arguments.length>3?arguments[3]:undefined;var _useActiveWeb3React2=useActiveWeb3React(),account=_useActiveWeb3React2.account,chainId=_useActiveWeb3React2.chainId,library=_useActiveWeb3React2.library;var swapCalls=useSwapCallArguments(trade,allowedSlippage,deadline,recipientAddressOrName);var addTransaction=useTransactionAdder();var _useENS2=useENS(recipientAddressOrName),recipientAddress=_useENS2.address;var recipient=recipientAddressOrName===null?account:recipientAddress;return useMemo(function(){if(!trade||!library||!account||!chainId){return{state:SwapCallbackState.INVALID,callback:null,error:'Missing dependencies'};}if(!recipient){if(recipientAddressOrName!==null){return{state:SwapCallbackState.INVALID,callback:null,error:'Invalid recipient'};}else{return{state:SwapCallbackState.LOADING,callback:null,error:null};}}return{state:SwapCallbackState.VALID,callback:function(){var _onSwap=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var estimatedCalls,successfulEstimation,errorCalls,_successfulEstimation,contract,_successfulEstimation2,methodName,args,value,gasEstimate;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return Promise.all(swapCalls.map(function(call){var _contract$estimateGas;var _call$parameters=call.parameters,methodName=_call$parameters.methodName,args=_call$parameters.args,value=_call$parameters.value,contract=call.contract;var options=!value||isZero(value)?{}:{value:value};return(_contract$estimateGas=contract.estimateGas)[methodName].apply(_contract$estimateGas,_toConsumableArray(args).concat([options])).then(function(gasEstimate){return{call:call,gasEstimate:gasEstimate};}).catch(function(gasError){var _contract$callStatic;console.debug('Gas estimate failed, trying eth_call to extract error',call);return(_contract$callStatic=contract.callStatic)[methodName].apply(_contract$callStatic,_toConsumableArray(args).concat([options])).then(function(result){console.debug('Unexpected successful call after failed estimate gas',call,gasError,result);return{call:call,error:new Error('Unexpected issue with estimating the gas. Please try again.')};}).catch(function(callError){console.debug('Call threw error',call,callError);var errorMessage;switch(callError.reason){case'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT':case'UniswapV2Router: EXCESSIVE_INPUT_AMOUNT':errorMessage='This transaction will not succeed either due to price movement or fee on transfer. Try increasing your slippage tolerance.';break;default:errorMessage=\"The transaction cannot succeed due to error: \".concat(callError.reason,\". This is probably an issue with one of the tokens you are swapping.\");}return{call:call,error:new Error(errorMessage)};});});}));case 2:estimatedCalls=_context.sent;// a successful estimation is a bignumber gas estimate and the next call is also a bignumber gas estimate\nsuccessfulEstimation=estimatedCalls.find(function(el,ix,list){return'gasEstimate'in el&&(ix===list.length-1||'gasEstimate'in list[ix+1]);});if(successfulEstimation){_context.next=9;break;}errorCalls=estimatedCalls.filter(function(call){return'error'in call;});if(!(errorCalls.length>0)){_context.next=8;break;}throw errorCalls[errorCalls.length-1].error;case 8:throw new Error('Unexpected error. Please contact support: none of the calls threw an error');case 9:_successfulEstimation=successfulEstimation.call,contract=_successfulEstimation.contract,_successfulEstimation2=_successfulEstimation.parameters,methodName=_successfulEstimation2.methodName,args=_successfulEstimation2.args,value=_successfulEstimation2.value,gasEstimate=successfulEstimation.gasEstimate;return _context.abrupt(\"return\",contract[methodName].apply(contract,_toConsumableArray(args).concat([_objectSpread({gasLimit:calculateGasMargin(gasEstimate)},value&&!isZero(value)?{value:value,from:account}:{from:account})])).then(function(response){var inputSymbol=trade.inputAmount.currency.symbol;var outputSymbol=trade.outputAmount.currency.symbol;var inputAmount=trade.inputAmount.toSignificant(3);var outputAmount=trade.outputAmount.toSignificant(3);var base=\"Swap \".concat(inputAmount,\" \").concat(inputSymbol,\" for \").concat(outputAmount,\" \").concat(outputSymbol);var withRecipient=recipient===account?base:\"\".concat(base,\" to \").concat(recipientAddressOrName&&isAddress(recipientAddressOrName)?shortenAddress(recipientAddressOrName):recipientAddressOrName);var withVersion=withRecipient;addTransaction(response,{summary:withVersion});return response.hash;}).catch(function(error){// if the user rejected the tx, pass this along\nif((error===null||error===void 0?void 0:error.code)===4001){throw new Error('Transaction rejected.');}else{// otherwise, the error was unexpected and we need to convey that\nconsole.error(\"Swap failed\",error,methodName,args,value);throw new Error(\"Swap failed: \".concat(error.message));}}));case 11:case\"end\":return _context.stop();}}},_callee);}));function onSwap(){return _onSwap.apply(this,arguments);}return onSwap;}(),error:null};},[trade,library,account,chainId,recipient,recipientAddressOrName,swapCalls,addTransaction]);}","map":{"version":3,"sources":["C:/Users/marin/Desktop/bananaswap/src/hooks/useSwapCallback.ts"],"names":["JSBI","Percent","Router","TradeType","useMemo","BIPS_BASE","DEFAULT_DEADLINE_FROM_NOW","INITIAL_ALLOWED_SLIPPAGE","useTransactionAdder","calculateGasMargin","getRouterContract","isAddress","shortenAddress","isZero","useActiveWeb3React","useENS","SwapCallbackState","useSwapCallArguments","trade","allowedSlippage","deadline","recipientAddressOrName","account","chainId","library","recipientAddress","address","recipient","contract","swapMethods","push","swapCallParameters","feeOnTransfer","BigInt","ttl","tradeType","EXACT_INPUT","map","parameters","useSwapCallback","swapCalls","addTransaction","state","INVALID","callback","error","LOADING","VALID","Promise","all","call","methodName","args","value","options","estimateGas","then","gasEstimate","catch","gasError","console","debug","callStatic","result","Error","callError","errorMessage","reason","estimatedCalls","successfulEstimation","find","el","ix","list","length","errorCalls","filter","gasLimit","from","response","inputSymbol","inputAmount","currency","symbol","outputSymbol","outputAmount","toSignificant","base","withRecipient","withVersion","summary","hash","code","message","onSwap"],"mappings":"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","sourcesContent":["import { BigNumber } from '@ethersproject/bignumber'\r\nimport { Contract } from '@ethersproject/contracts'\r\nimport { JSBI, Percent, Router, SwapParameters, Trade, TradeType } from 'moonbeamswap'\r\nimport { useMemo } from 'react'\r\nimport { BIPS_BASE, DEFAULT_DEADLINE_FROM_NOW, INITIAL_ALLOWED_SLIPPAGE } from '../constants'\r\nimport { useTransactionAdder } from '../state/transactions/hooks'\r\nimport { calculateGasMargin, getRouterContract, isAddress, shortenAddress } from '../utils'\r\nimport isZero from '../utils/isZero'\r\nimport { useActiveWeb3React } from './index'\r\nimport useENS from './useENS'\r\n\r\nexport enum SwapCallbackState {\r\n  INVALID,\r\n  LOADING,\r\n  VALID\r\n}\r\n\r\ninterface SwapCall {\r\n  contract: Contract\r\n  parameters: SwapParameters\r\n}\r\n\r\ninterface SuccessfulCall {\r\n  call: SwapCall\r\n  gasEstimate: BigNumber\r\n}\r\n\r\ninterface FailedCall {\r\n  call: SwapCall\r\n  error: Error\r\n}\r\n\r\ntype EstimatedSwapCall = SuccessfulCall | FailedCall\r\n\r\n/**\r\n * Returns the swap calls that can be used to make the trade\r\n * @param trade trade to execute\r\n * @param allowedSlippage user allowed slippage\r\n * @param deadline the deadline for the trade\r\n * @param recipientAddressOrName\r\n */\r\nfunction useSwapCallArguments(\r\n  trade: Trade | undefined, // trade to execute, required\r\n  allowedSlippage: number = INITIAL_ALLOWED_SLIPPAGE, // in bips\r\n  deadline: number = DEFAULT_DEADLINE_FROM_NOW, // in seconds from now\r\n  recipientAddressOrName: string | null // the ENS name or address of the recipient of the trade, or null if swap should be returned to sender\r\n): SwapCall[] {\r\n  const { account, chainId, library } = useActiveWeb3React()\r\n\r\n  const { address: recipientAddress } = useENS(recipientAddressOrName)\r\n  const recipient = recipientAddressOrName === null ? account : recipientAddress\r\n\r\n  return useMemo(() => {\r\n    if (!trade || !recipient || !library || !account || !chainId) return []\r\n    const contract: Contract | null = getRouterContract(chainId, library, account)\r\n    if (!contract) {\r\n      return []\r\n    }\r\n\r\n    const swapMethods = []\r\n\r\n    swapMethods.push(\r\n      Router.swapCallParameters(trade, {\r\n        feeOnTransfer: false,\r\n        allowedSlippage: new Percent(JSBI.BigInt(allowedSlippage), BIPS_BASE),\r\n        recipient,\r\n        ttl: deadline\r\n      })\r\n    )\r\n\r\n    if (trade.tradeType === TradeType.EXACT_INPUT) {\r\n      swapMethods.push(\r\n        Router.swapCallParameters(trade, {\r\n          feeOnTransfer: true,\r\n          allowedSlippage: new Percent(JSBI.BigInt(allowedSlippage), BIPS_BASE),\r\n          recipient,\r\n          ttl: deadline\r\n        })\r\n      )\r\n    }\r\n\r\n    return swapMethods.map(parameters => ({ parameters, contract }))\r\n  }, [account, allowedSlippage, chainId, deadline, library, recipient, trade])\r\n}\r\n\r\n// returns a function that will execute a swap, if the parameters are all valid\r\n// and the user has approved the slippage adjusted input amount for the trade\r\nexport function useSwapCallback(\r\n  trade: Trade | undefined, // trade to execute, required\r\n  allowedSlippage: number = INITIAL_ALLOWED_SLIPPAGE, // in bips\r\n  deadline: number = DEFAULT_DEADLINE_FROM_NOW, // in seconds from now\r\n  recipientAddressOrName: string | null // the ENS name or address of the recipient of the trade, or null if swap should be returned to sender\r\n): { state: SwapCallbackState; callback: null | (() => Promise<string>); error: string | null } {\r\n  const { account, chainId, library } = useActiveWeb3React()\r\n\r\n  const swapCalls = useSwapCallArguments(trade, allowedSlippage, deadline, recipientAddressOrName)\r\n\r\n  const addTransaction = useTransactionAdder()\r\n\r\n  const { address: recipientAddress } = useENS(recipientAddressOrName)\r\n  const recipient = recipientAddressOrName === null ? account : recipientAddress\r\n\r\n  return useMemo(() => {\r\n    if (!trade || !library || !account || !chainId) {\r\n      return { state: SwapCallbackState.INVALID, callback: null, error: 'Missing dependencies' }\r\n    }\r\n    if (!recipient) {\r\n      if (recipientAddressOrName !== null) {\r\n        return { state: SwapCallbackState.INVALID, callback: null, error: 'Invalid recipient' }\r\n      } else {\r\n        return { state: SwapCallbackState.LOADING, callback: null, error: null }\r\n      }\r\n    }\r\n\r\n    return {\r\n      state: SwapCallbackState.VALID,\r\n      callback: async function onSwap(): Promise<string> {\r\n        const estimatedCalls: EstimatedSwapCall[] = await Promise.all(\r\n          swapCalls.map(call => {\r\n            const {\r\n              parameters: { methodName, args, value },\r\n              contract\r\n            } = call\r\n            const options = !value || isZero(value) ? {} : { value }\r\n\r\n            return contract.estimateGas[methodName](...args, options)\r\n              .then(gasEstimate => {\r\n                return {\r\n                  call,\r\n                  gasEstimate\r\n                }\r\n              })\r\n              .catch(gasError => {\r\n                console.debug('Gas estimate failed, trying eth_call to extract error', call)\r\n\r\n                return contract.callStatic[methodName](...args, options)\r\n                  .then(result => {\r\n                    console.debug('Unexpected successful call after failed estimate gas', call, gasError, result)\r\n                    return { call, error: new Error('Unexpected issue with estimating the gas. Please try again.') }\r\n                  })\r\n                  .catch(callError => {\r\n                    console.debug('Call threw error', call, callError)\r\n                    let errorMessage: string\r\n                    switch (callError.reason) {\r\n                      case 'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT':\r\n                      case 'UniswapV2Router: EXCESSIVE_INPUT_AMOUNT':\r\n                        errorMessage =\r\n                          'This transaction will not succeed either due to price movement or fee on transfer. Try increasing your slippage tolerance.'\r\n                        break\r\n                      default:\r\n                        errorMessage = `The transaction cannot succeed due to error: ${callError.reason}. This is probably an issue with one of the tokens you are swapping.`\r\n                    }\r\n                    return { call, error: new Error(errorMessage) }\r\n                  })\r\n              })\r\n          })\r\n        )\r\n\r\n        // a successful estimation is a bignumber gas estimate and the next call is also a bignumber gas estimate\r\n        const successfulEstimation = estimatedCalls.find(\r\n          (el, ix, list): el is SuccessfulCall =>\r\n            'gasEstimate' in el && (ix === list.length - 1 || 'gasEstimate' in list[ix + 1])\r\n        )\r\n\r\n        if (!successfulEstimation) {\r\n          const errorCalls = estimatedCalls.filter((call): call is FailedCall => 'error' in call)\r\n          if (errorCalls.length > 0) throw errorCalls[errorCalls.length - 1].error\r\n          throw new Error('Unexpected error. Please contact support: none of the calls threw an error')\r\n        }\r\n\r\n        const {\r\n          call: {\r\n            contract,\r\n            parameters: { methodName, args, value }\r\n          },\r\n          gasEstimate\r\n        } = successfulEstimation\r\n\r\n        return contract[methodName](...args, {\r\n          gasLimit: calculateGasMargin(gasEstimate),\r\n          ...(value && !isZero(value) ? { value, from: account } : { from: account })\r\n        })\r\n          .then((response: any) => {\r\n            const inputSymbol = trade.inputAmount.currency.symbol\r\n            const outputSymbol = trade.outputAmount.currency.symbol\r\n            const inputAmount = trade.inputAmount.toSignificant(3)\r\n            const outputAmount = trade.outputAmount.toSignificant(3)\r\n\r\n            const base = `Swap ${inputAmount} ${inputSymbol} for ${outputAmount} ${outputSymbol}`\r\n            const withRecipient =\r\n              recipient === account\r\n                ? base\r\n                : `${base} to ${\r\n                    recipientAddressOrName && isAddress(recipientAddressOrName)\r\n                      ? shortenAddress(recipientAddressOrName)\r\n                      : recipientAddressOrName\r\n                  }`\r\n\r\n            const withVersion = withRecipient\r\n\r\n            addTransaction(response, {\r\n              summary: withVersion\r\n            })\r\n\r\n            return response.hash\r\n          })\r\n          .catch((error: any) => {\r\n            // if the user rejected the tx, pass this along\r\n            if (error?.code === 4001) {\r\n              throw new Error('Transaction rejected.')\r\n            } else {\r\n              // otherwise, the error was unexpected and we need to convey that\r\n              console.error(`Swap failed`, error, methodName, args, value)\r\n              throw new Error(`Swap failed: ${error.message}`)\r\n            }\r\n          })\r\n      },\r\n      error: null\r\n    }\r\n  }, [trade, library, account, chainId, recipient, recipientAddressOrName, swapCalls, addTransaction])\r\n}\r\n"]},"metadata":{},"sourceType":"module"}