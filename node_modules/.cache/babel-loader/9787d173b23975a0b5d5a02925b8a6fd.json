{"ast":null,"code":"import _toConsumableArray from\"C:\\\\Users\\\\marin\\\\Desktop\\\\bananaswap\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"C:\\\\Users\\\\marin\\\\Desktop\\\\bananaswap\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _defineProperty from\"C:\\\\Users\\\\marin\\\\Desktop\\\\bananaswap\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";var _ROUTER_ADDRESS,_WDEV_ONLY;import{ChainId,JSBI,Percent,Token,WDEV}from'moonbeamswap';import{routerv2}from'../moonbase_address.json';import{injected,walletconnect}from'../connectors';//fortmatic, portis, walletconnect, walletlink, lattice\nexport var ROUTER_ADDRESS=(_ROUTER_ADDRESS={},_defineProperty(_ROUTER_ADDRESS,ChainId.STANDALONE,'0x42e2EE7Ba8975c473157634Ac2AF4098190fc741'),_defineProperty(_ROUTER_ADDRESS,ChainId.MOONROCK,routerv2),_defineProperty(_ROUTER_ADDRESS,ChainId.MOONBASE,routerv2),_defineProperty(_ROUTER_ADDRESS,ChainId.MOONSHADOW,routerv2),_ROUTER_ADDRESS);// a list of tokens by chain\nexport var DAI=new Token(ChainId.MAINNET,'0x6B175474E89094C44Da98b954EedeAC495271d0F',18,'DAI','Dai Stablecoin');export var USDC=new Token(ChainId.MAINNET,'0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',6,'USDC','USD//C');export var USDT=new Token(ChainId.MAINNET,'0xdAC17F958D2ee523a2206206994597C13D831ec7',6,'USDT','Tether USD');export var COMP=new Token(ChainId.MAINNET,'0xc00e94Cb662C3520282E6f5717214004A7f26888',18,'COMP','Compound');export var MKR=new Token(ChainId.MAINNET,'0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2',18,'MKR','Maker');export var AMPL=new Token(ChainId.MAINNET,'0xD46bA6D942050d489DBd938a2C909A5d5039A161',9,'AMPL','Ampleforth');export var WBTC=new Token(ChainId.MAINNET,'0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599',18,'WBTC','Wrapped BTC');export var SUSHI=new Token(ChainId.MAINNET,'0x6B3595068778DD592e39A122f4f5a5cF09C90fE2',18,'SUSHI','SushiToken');export var YAM=new Token(ChainId.MAINNET,'0x0e2298E3B3390e3b945a5456fBf59eCc3f55DA16',18,'YAM','YAM');export var RUNE=new Token(ChainId.MAINNET,'0x3155BA85D5F96b2d030a4966AF206230e46849cb',18,'RUNE','RUNE.ETH');export var YFI=new Token(ChainId.MAINNET,'0x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e',18,'YFI','Yearn');export var CREAM=new Token(ChainId.MAINNET,'0x2ba592F78dB6436527729929AAf6c908497cB200',18,'CREAM','Cream');export var BAC=new Token(ChainId.MAINNET,'0x3449FC1Cd036255BA1EB19d65fF4BA2b8903A69a',18,'BAC','Basis Cash');export var FXS=new Token(ChainId.MAINNET,'0x3432B6A60D23Ca0dFCa7761B7ab56459D9C964D0',18,'FXS','Frax Share');export var CRV=new Token(ChainId.MAINNET,'0xD533a949740bb3306d119CC777fa900bA034cd52',18,'CRV','Curve Dao Token');export var ALPHA=new Token(ChainId.MAINNET,'0xa1faa113cbE53436Df28FF0aEe54275c13B40975',18,'ALPHA','AlphaToken');var WDEV_ONLY=(_WDEV_ONLY={},_defineProperty(_WDEV_ONLY,ChainId.MAINNET,[WDEV[ChainId.MAINNET]]),_defineProperty(_WDEV_ONLY,ChainId.STANDALONE,[WDEV[ChainId.STANDALONE]]),_defineProperty(_WDEV_ONLY,ChainId.MOONROCK,[WDEV[ChainId.MOONROCK]]),_defineProperty(_WDEV_ONLY,ChainId.MOONBASE,[WDEV[ChainId.MOONBASE]]),_defineProperty(_WDEV_ONLY,ChainId.MOONSHADOW,[WDEV[ChainId.MOONSHADOW]]),_WDEV_ONLY);// used to construct intermediary pairs for trading\nexport var BASES_TO_CHECK_TRADES_AGAINST=_objectSpread(_objectSpread({},WDEV_ONLY),{},_defineProperty({},ChainId.MAINNET,[].concat(_toConsumableArray(WDEV_ONLY[ChainId.MAINNET]),[DAI,USDC,USDT,SUSHI,YAM,WBTC,RUNE,CREAM,BAC,FXS,CRV,ALPHA])));/**\r\n * Some tokens can only be swapped via certain pairs, so we override the list of bases that are considered for these\r\n * tokens.\r\n */export var CUSTOM_BASES=_defineProperty({},ChainId.MAINNET,_defineProperty({},AMPL.address,[DAI,WDEV[ChainId.MAINNET]]));// used for display in the default list when adding liquidity\nexport var SUGGESTED_BASES=_objectSpread(_objectSpread({},WDEV_ONLY),{},_defineProperty({},ChainId.MAINNET,[].concat(_toConsumableArray(WDEV_ONLY[ChainId.MAINNET]),[DAI,USDC,USDT])));// used to construct the list of all pairs we consider by default in the frontend\nexport var BASES_TO_TRACK_LIQUIDITY_FOR=_objectSpread(_objectSpread({},WDEV_ONLY),{},_defineProperty({},ChainId.MAINNET,[].concat(_toConsumableArray(WDEV_ONLY[ChainId.MAINNET]),[DAI,USDC,USDT])));export var PINNED_PAIRS=_defineProperty({},ChainId.MAINNET,[[new Token(ChainId.MAINNET,'0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643',8,'cDAI','Compound Dai'),new Token(ChainId.MAINNET,'0x39AA39c021dfbaE8faC545936693aC917d5E7563',8,'cUSDC','Compound USD Coin')],[USDC,USDT],[DAI,USDT]]);export var SUPPORTED_WALLETS={/* INJECTED: {\r\n    connector: injected,\r\n    name: 'Injected',\r\n    iconName: 'arrow-right.svg',\r\n    description: 'Injected web3 provider.',\r\n    href: null,\r\n    color: '#010101',\r\n    primary: true\r\n  },*/METAMASK:{connector:injected,name:'MetaMask',iconName:'metamask.png',description:'Easy-to-use browser extension.',href:null,color:'#E8831D'},WALLET_CONNECT:{connector:walletconnect,name:'WalletConnect',iconName:'walletConnectIcon.svg',description:'Connect to Trust Wallet, Rainbow Wallet and more...',href:null,color:'#4196FC',mobile:true}/*\r\n  LATTICE: {\r\n    connector: lattice,\r\n    name: 'Lattice',\r\n    iconName: 'gridPlusWallet.png',\r\n    description: 'Connect to GridPlus Wallet.',\r\n    href: null,\r\n    color: '#40a9ff',\r\n    mobile: true\r\n  },\r\n  WALLET_LINK: {\r\n    connector: walletlink,\r\n    name: 'Coinbase Wallet',\r\n    iconName: 'coinbaseWalletIcon.svg',\r\n    description: 'Use Coinbase Wallet app on mobile device',\r\n    href: null,\r\n    color: '#315CF5'\r\n  },\r\n  COINBASE_LINK: {\r\n    name: 'Open in Coinbase Wallet',\r\n    iconName: 'coinbaseWalletIcon.svg',\r\n    description: 'Open in Coinbase Wallet app.',\r\n    href: 'https://go.cb-w.com/mtUDhEZPy1',\r\n    color: '#315CF5',\r\n    mobile: true,\r\n    mobileOnly: true\r\n  },\r\n  FORTMATIC: {\r\n    connector: fortmatic,\r\n    name: 'Fortmatic',\r\n    iconName: 'fortmaticIcon.png',\r\n    description: 'Login using Fortmatic hosted wallet',\r\n    href: null,\r\n    color: '#6748FF',\r\n    mobile: true\r\n  },\r\n  Portis: {\r\n    connector: portis,\r\n    name: 'Portis',\r\n    iconName: 'portisIcon.png',\r\n    description: 'Login using Portis hosted wallet',\r\n    href: null,\r\n    color: '#4A6C9B',\r\n    mobile: true\r\n  }*/};export var NetworkContextName='NETWORK';// default allowed slippage, in bips\nexport var INITIAL_ALLOWED_SLIPPAGE=50;// 20 minutes, denominated in seconds\nexport var DEFAULT_DEADLINE_FROM_NOW=60*20;// one basis point\nexport var ONE_BIPS=new Percent(JSBI.BigInt(1),JSBI.BigInt(10000));export var BIPS_BASE=JSBI.BigInt(10000);// used for warning states\nexport var ALLOWED_PRICE_IMPACT_LOW=new Percent(JSBI.BigInt(100),BIPS_BASE);// 1%\nexport var ALLOWED_PRICE_IMPACT_MEDIUM=new Percent(JSBI.BigInt(300),BIPS_BASE);// 3%\nexport var ALLOWED_PRICE_IMPACT_HIGH=new Percent(JSBI.BigInt(500),BIPS_BASE);// 5%\n// if the price slippage exceeds this number, force the user to type 'confirm' to execute\nexport var PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN=new Percent(JSBI.BigInt(1000),BIPS_BASE);// 10%\n// for non expert mode disable swaps above this\nexport var BLOCKED_PRICE_IMPACT_NON_EXPERT=new Percent(JSBI.BigInt(1500),BIPS_BASE);// 15%\n// used to ensure the user doesn't send so much DEV so they end up with <.01\nexport var MIN_ETH=JSBI.exponentiate(JSBI.BigInt(10),JSBI.BigInt(16));// .01 DEV\nexport var BETTER_TRADE_LINK_THRESHOLD=new Percent(JSBI.BigInt(75),JSBI.BigInt(10000));","map":{"version":3,"sources":["C:/Users/marin/Desktop/bananaswap/src/constants/index.ts"],"names":["ChainId","JSBI","Percent","Token","WDEV","routerv2","injected","walletconnect","ROUTER_ADDRESS","STANDALONE","MOONROCK","MOONBASE","MOONSHADOW","DAI","MAINNET","USDC","USDT","COMP","MKR","AMPL","WBTC","SUSHI","YAM","RUNE","YFI","CREAM","BAC","FXS","CRV","ALPHA","WDEV_ONLY","BASES_TO_CHECK_TRADES_AGAINST","CUSTOM_BASES","address","SUGGESTED_BASES","BASES_TO_TRACK_LIQUIDITY_FOR","PINNED_PAIRS","SUPPORTED_WALLETS","METAMASK","connector","name","iconName","description","href","color","WALLET_CONNECT","mobile","NetworkContextName","INITIAL_ALLOWED_SLIPPAGE","DEFAULT_DEADLINE_FROM_NOW","ONE_BIPS","BigInt","BIPS_BASE","ALLOWED_PRICE_IMPACT_LOW","ALLOWED_PRICE_IMPACT_MEDIUM","ALLOWED_PRICE_IMPACT_HIGH","PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN","BLOCKED_PRICE_IMPACT_NON_EXPERT","MIN_ETH","exponentiate","BETTER_TRADE_LINK_THRESHOLD"],"mappings":"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","sourcesContent":["import { ChainId, JSBI, Percent, Token, WDEV } from 'moonbeamswap'\r\nimport { AbstractConnector } from '@web3-react/abstract-connector'\r\nimport { routerv2 } from '../moonbase_address.json'\r\n\r\nimport { injected, walletconnect } from '../connectors'\r\n//fortmatic, portis, walletconnect, walletlink, lattice\r\nexport const ROUTER_ADDRESS: { [key: string]: string } = {\r\n  [ChainId.STANDALONE]: '0x42e2EE7Ba8975c473157634Ac2AF4098190fc741',\r\n  [ChainId.MOONROCK]: routerv2,\r\n  [ChainId.MOONBASE]: routerv2,\r\n  [ChainId.MOONSHADOW]: routerv2,\r\n}\r\n\r\n// a list of tokens by chain\r\ntype ChainTokenList = {\r\n  readonly [chainId in ChainId]: Token[]\r\n}\r\n\r\nexport const DAI = new Token(ChainId.MAINNET, '0x6B175474E89094C44Da98b954EedeAC495271d0F', 18, 'DAI', 'Dai Stablecoin')\r\nexport const USDC = new Token(ChainId.MAINNET, '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48', 6, 'USDC', 'USD//C')\r\nexport const USDT = new Token(ChainId.MAINNET, '0xdAC17F958D2ee523a2206206994597C13D831ec7', 6, 'USDT', 'Tether USD')\r\nexport const COMP = new Token(ChainId.MAINNET, '0xc00e94Cb662C3520282E6f5717214004A7f26888', 18, 'COMP', 'Compound')\r\nexport const MKR = new Token(ChainId.MAINNET, '0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2', 18, 'MKR', 'Maker')\r\nexport const AMPL = new Token(ChainId.MAINNET, '0xD46bA6D942050d489DBd938a2C909A5d5039A161', 9, 'AMPL', 'Ampleforth')\r\nexport const WBTC = new Token(ChainId.MAINNET, '0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599', 18, 'WBTC', 'Wrapped BTC')\r\nexport const SUSHI = new Token(ChainId.MAINNET, '0x6B3595068778DD592e39A122f4f5a5cF09C90fE2', 18, 'SUSHI', 'SushiToken')\r\nexport const YAM = new Token(ChainId.MAINNET, '0x0e2298E3B3390e3b945a5456fBf59eCc3f55DA16', 18, 'YAM', 'YAM')\r\nexport const RUNE = new Token(ChainId.MAINNET, '0x3155BA85D5F96b2d030a4966AF206230e46849cb', 18, 'RUNE', 'RUNE.ETH')\r\nexport const YFI = new Token(ChainId.MAINNET, '0x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e', 18, 'YFI', 'Yearn')\r\nexport const CREAM = new Token(ChainId.MAINNET, '0x2ba592F78dB6436527729929AAf6c908497cB200', 18, 'CREAM', 'Cream')\r\nexport const BAC = new Token(ChainId.MAINNET, '0x3449FC1Cd036255BA1EB19d65fF4BA2b8903A69a', 18, 'BAC', 'Basis Cash')\r\nexport const FXS = new Token(ChainId.MAINNET, '0x3432B6A60D23Ca0dFCa7761B7ab56459D9C964D0', 18, 'FXS', 'Frax Share')\r\nexport const CRV = new Token(\r\n  ChainId.MAINNET,\r\n  '0xD533a949740bb3306d119CC777fa900bA034cd52',\r\n  18,\r\n  'CRV',\r\n  'Curve Dao Token'\r\n)\r\nexport const ALPHA = new Token(ChainId.MAINNET, '0xa1faa113cbE53436Df28FF0aEe54275c13B40975', 18, 'ALPHA', 'AlphaToken')\r\n\r\nconst WDEV_ONLY: ChainTokenList = {\r\n  [ChainId.MAINNET]: [WDEV[ChainId.MAINNET]],\r\n  [ChainId.STANDALONE]: [WDEV[ChainId.STANDALONE]],\r\n  [ChainId.MOONROCK]: [WDEV[ChainId.MOONROCK]],\r\n  [ChainId.MOONBASE]: [WDEV[ChainId.MOONBASE]],\r\n  [ChainId.MOONSHADOW]: [WDEV[ChainId.MOONSHADOW]],\r\n}\r\n\r\n// used to construct intermediary pairs for trading\r\nexport const BASES_TO_CHECK_TRADES_AGAINST: ChainTokenList = {\r\n  ...WDEV_ONLY,\r\n  [ChainId.MAINNET]: [\r\n    ...WDEV_ONLY[ChainId.MAINNET],\r\n    DAI,\r\n    USDC,\r\n    USDT,\r\n    SUSHI,\r\n    YAM,\r\n    WBTC,\r\n    RUNE,\r\n    CREAM,\r\n    BAC,\r\n    FXS,\r\n    CRV,\r\n    ALPHA,\r\n  ],\r\n}\r\n\r\n/**\r\n * Some tokens can only be swapped via certain pairs, so we override the list of bases that are considered for these\r\n * tokens.\r\n */\r\nexport const CUSTOM_BASES: { [chainId in ChainId]?: { [tokenAddress: string]: Token[] } } = {\r\n  [ChainId.MAINNET]: {\r\n    [AMPL.address]: [DAI, WDEV[ChainId.MAINNET]],\r\n  },\r\n}\r\n\r\n// used for display in the default list when adding liquidity\r\nexport const SUGGESTED_BASES: ChainTokenList = {\r\n  ...WDEV_ONLY,\r\n  [ChainId.MAINNET]: [...WDEV_ONLY[ChainId.MAINNET], DAI, USDC, USDT],\r\n}\r\n\r\n// used to construct the list of all pairs we consider by default in the frontend\r\nexport const BASES_TO_TRACK_LIQUIDITY_FOR: ChainTokenList = {\r\n  ...WDEV_ONLY,\r\n  [ChainId.MAINNET]: [...WDEV_ONLY[ChainId.MAINNET], DAI, USDC, USDT],\r\n}\r\n\r\nexport const PINNED_PAIRS: { readonly [chainId in ChainId]?: [Token, Token][] } = {\r\n  [ChainId.MAINNET]: [\r\n    [\r\n      new Token(ChainId.MAINNET, '0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643', 8, 'cDAI', 'Compound Dai'),\r\n      new Token(ChainId.MAINNET, '0x39AA39c021dfbaE8faC545936693aC917d5E7563', 8, 'cUSDC', 'Compound USD Coin'),\r\n    ],\r\n    [USDC, USDT],\r\n    [DAI, USDT],\r\n  ],\r\n}\r\n\r\nexport interface WalletInfo {\r\n  connector?: AbstractConnector\r\n  name: string\r\n  iconName: string\r\n  description: string\r\n  href: string | null\r\n  color: string\r\n  primary?: true\r\n  mobile?: true\r\n  mobileOnly?: true\r\n}\r\n\r\nexport const SUPPORTED_WALLETS: { [key: string]: WalletInfo } = {\r\n  /* INJECTED: {\r\n    connector: injected,\r\n    name: 'Injected',\r\n    iconName: 'arrow-right.svg',\r\n    description: 'Injected web3 provider.',\r\n    href: null,\r\n    color: '#010101',\r\n    primary: true\r\n  },*/\r\n  METAMASK: {\r\n    connector: injected,\r\n    name: 'MetaMask',\r\n    iconName: 'metamask.png',\r\n    description: 'Easy-to-use browser extension.',\r\n    href: null,\r\n    color: '#E8831D',\r\n  },\r\n  WALLET_CONNECT: {\r\n    connector: walletconnect,\r\n    name: 'WalletConnect',\r\n    iconName: 'walletConnectIcon.svg',\r\n    description: 'Connect to Trust Wallet, Rainbow Wallet and more...',\r\n    href: null,\r\n    color: '#4196FC',\r\n    mobile: true,\r\n  } /*\r\n  LATTICE: {\r\n    connector: lattice,\r\n    name: 'Lattice',\r\n    iconName: 'gridPlusWallet.png',\r\n    description: 'Connect to GridPlus Wallet.',\r\n    href: null,\r\n    color: '#40a9ff',\r\n    mobile: true\r\n  },\r\n  WALLET_LINK: {\r\n    connector: walletlink,\r\n    name: 'Coinbase Wallet',\r\n    iconName: 'coinbaseWalletIcon.svg',\r\n    description: 'Use Coinbase Wallet app on mobile device',\r\n    href: null,\r\n    color: '#315CF5'\r\n  },\r\n  COINBASE_LINK: {\r\n    name: 'Open in Coinbase Wallet',\r\n    iconName: 'coinbaseWalletIcon.svg',\r\n    description: 'Open in Coinbase Wallet app.',\r\n    href: 'https://go.cb-w.com/mtUDhEZPy1',\r\n    color: '#315CF5',\r\n    mobile: true,\r\n    mobileOnly: true\r\n  },\r\n  FORTMATIC: {\r\n    connector: fortmatic,\r\n    name: 'Fortmatic',\r\n    iconName: 'fortmaticIcon.png',\r\n    description: 'Login using Fortmatic hosted wallet',\r\n    href: null,\r\n    color: '#6748FF',\r\n    mobile: true\r\n  },\r\n  Portis: {\r\n    connector: portis,\r\n    name: 'Portis',\r\n    iconName: 'portisIcon.png',\r\n    description: 'Login using Portis hosted wallet',\r\n    href: null,\r\n    color: '#4A6C9B',\r\n    mobile: true\r\n  }*/,\r\n}\r\n\r\nexport const NetworkContextName = 'NETWORK'\r\n\r\n// default allowed slippage, in bips\r\nexport const INITIAL_ALLOWED_SLIPPAGE = 50\r\n// 20 minutes, denominated in seconds\r\nexport const DEFAULT_DEADLINE_FROM_NOW = 60 * 20\r\n\r\n// one basis point\r\nexport const ONE_BIPS = new Percent(JSBI.BigInt(1), JSBI.BigInt(10000))\r\nexport const BIPS_BASE = JSBI.BigInt(10000)\r\n// used for warning states\r\nexport const ALLOWED_PRICE_IMPACT_LOW: Percent = new Percent(JSBI.BigInt(100), BIPS_BASE) // 1%\r\nexport const ALLOWED_PRICE_IMPACT_MEDIUM: Percent = new Percent(JSBI.BigInt(300), BIPS_BASE) // 3%\r\nexport const ALLOWED_PRICE_IMPACT_HIGH: Percent = new Percent(JSBI.BigInt(500), BIPS_BASE) // 5%\r\n// if the price slippage exceeds this number, force the user to type 'confirm' to execute\r\nexport const PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN: Percent = new Percent(JSBI.BigInt(1000), BIPS_BASE) // 10%\r\n// for non expert mode disable swaps above this\r\nexport const BLOCKED_PRICE_IMPACT_NON_EXPERT: Percent = new Percent(JSBI.BigInt(1500), BIPS_BASE) // 15%\r\n\r\n// used to ensure the user doesn't send so much DEV so they end up with <.01\r\nexport const MIN_ETH: JSBI = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(16)) // .01 DEV\r\nexport const BETTER_TRADE_LINK_THRESHOLD = new Percent(JSBI.BigInt(75), JSBI.BigInt(10000))\r\n"]},"metadata":{},"sourceType":"module"}