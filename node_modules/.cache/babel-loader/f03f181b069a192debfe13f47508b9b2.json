{"ast":null,"code":"import _slicedToArray from\"C:\\\\Users\\\\marin\\\\Desktop\\\\bananaswap\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import{useCallback,useEffect,useRef,useState}from'react';/**\r\n * Easy way to debounce the handling of a rapidly changing value, e.g. a changing slider input\r\n * @param value value that is rapidly changing\r\n * @param onChange change handler that should receive the debounced updates to the value\r\n * @param debouncedMs how long we should wait for changes to be applied\r\n */export default function useDebouncedChangeHandler(value,onChange){var debouncedMs=arguments.length>2&&arguments[2]!==undefined?arguments[2]:100;var _useState=useState(function(){return value;}),_useState2=_slicedToArray(_useState,2),inner=_useState2[0],setInner=_useState2[1];var timer=useRef();var onChangeInner=useCallback(function(newValue){setInner(newValue);if(timer.current){clearTimeout(timer.current);}timer.current=setTimeout(function(){onChange(newValue);timer.current=undefined;},debouncedMs);},[debouncedMs,onChange]);useEffect(function(){if(timer.current){clearTimeout(timer.current);timer.current=undefined;}setInner(value);},[value]);return[inner,onChangeInner];}","map":{"version":3,"sources":["C:/Users/marin/Desktop/bananaswap/src/utils/useDebouncedChangeHandler.tsx"],"names":["useCallback","useEffect","useRef","useState","useDebouncedChangeHandler","value","onChange","debouncedMs","inner","setInner","timer","onChangeInner","newValue","current","clearTimeout","setTimeout","undefined"],"mappings":"iKAAA,OAASA,WAAT,CAAsBC,SAAtB,CAAiCC,MAAjC,CAAyCC,QAAzC,KAAyD,OAAzD,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,cAAe,SAASC,CAAAA,yBAAT,CACbC,KADa,CAEbC,QAFa,CAIY,IADzBC,CAAAA,WACyB,2DADX,GACW,CACzB,cAA0BJ,QAAQ,CAAI,iBAAME,CAAAA,KAAN,EAAJ,CAAlC,wCAAOG,KAAP,eAAcC,QAAd,eACA,GAAMC,CAAAA,KAAK,CAAGR,MAAM,EAApB,CAEA,GAAMS,CAAAA,aAAa,CAAGX,WAAW,CAC/B,SAACY,QAAD,CAAiB,CACfH,QAAQ,CAACG,QAAD,CAAR,CACA,GAAIF,KAAK,CAACG,OAAV,CAAmB,CACjBC,YAAY,CAACJ,KAAK,CAACG,OAAP,CAAZ,CACD,CACDH,KAAK,CAACG,OAAN,CAAgBE,UAAU,CAAC,UAAM,CAC/BT,QAAQ,CAACM,QAAD,CAAR,CACAF,KAAK,CAACG,OAAN,CAAgBG,SAAhB,CACD,CAHyB,CAGvBT,WAHuB,CAA1B,CAID,CAV8B,CAW/B,CAACA,WAAD,CAAcD,QAAd,CAX+B,CAAjC,CAcAL,SAAS,CAAC,UAAM,CACd,GAAIS,KAAK,CAACG,OAAV,CAAmB,CACjBC,YAAY,CAACJ,KAAK,CAACG,OAAP,CAAZ,CACAH,KAAK,CAACG,OAAN,CAAgBG,SAAhB,CACD,CACDP,QAAQ,CAACJ,KAAD,CAAR,CACD,CANQ,CAMN,CAACA,KAAD,CANM,CAAT,CAQA,MAAO,CAACG,KAAD,CAAQG,aAAR,CAAP,CACD","sourcesContent":["import { useCallback, useEffect, useRef, useState } from 'react'\r\n\r\n/**\r\n * Easy way to debounce the handling of a rapidly changing value, e.g. a changing slider input\r\n * @param value value that is rapidly changing\r\n * @param onChange change handler that should receive the debounced updates to the value\r\n * @param debouncedMs how long we should wait for changes to be applied\r\n */\r\nexport default function useDebouncedChangeHandler<T>(\r\n  value: T,\r\n  onChange: (newValue: T) => void,\r\n  debouncedMs = 100\r\n): [T, (value: T) => void] {\r\n  const [inner, setInner] = useState<T>(() => value)\r\n  const timer = useRef<ReturnType<typeof setTimeout>>()\r\n\r\n  const onChangeInner = useCallback(\r\n    (newValue: T) => {\r\n      setInner(newValue)\r\n      if (timer.current) {\r\n        clearTimeout(timer.current)\r\n      }\r\n      timer.current = setTimeout(() => {\r\n        onChange(newValue)\r\n        timer.current = undefined\r\n      }, debouncedMs)\r\n    },\r\n    [debouncedMs, onChange]\r\n  )\r\n\r\n  useEffect(() => {\r\n    if (timer.current) {\r\n      clearTimeout(timer.current)\r\n      timer.current = undefined\r\n    }\r\n    setInner(value)\r\n  }, [value])\r\n\r\n  return [inner, onChangeInner]\r\n}\r\n"]},"metadata":{},"sourceType":"module"}