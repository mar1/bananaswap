{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marin\\\\Desktop\\\\bananaswap\\\\src\\\\components\\\\Web3ReactManager\\\\index.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport styled from 'styled-components';\nimport { useTranslation } from 'react-i18next';\nimport { network } from '../../connectors';\nimport { useEagerConnect, useInactiveListener } from '../../hooks';\nimport { NetworkContextName } from '../../constants';\nimport Loader from '../Loader';\nconst MessageWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 20rem;\n`;\nconst Message = styled.h2`\n  color: ${({\n  theme\n}) => theme.secondary1};\n`;\nexport default function Web3ReactManager({\n  children\n}) {\n  const {\n    t\n  } = useTranslation();\n  const {\n    active\n  } = useWeb3React();\n  const {\n    active: networkActive,\n    error: networkError,\n    activate: activateNetwork\n  } = useWeb3React(NetworkContextName); // try to eagerly connect to an injected provider, if it exists and has granted access already\n\n  const triedEager = useEagerConnect(); // after eagerly trying injected, if the network connect ever isn't active or in an error state, activate itd\n\n  useEffect(() => {\n    if (triedEager && !networkActive && !networkError && !active) {\n      activateNetwork(network);\n    }\n  }, [triedEager, networkActive, networkError, activateNetwork, active]); // when there's no account connected, react to logins (broadly speaking) on the injected provider, if it exists\n\n  useInactiveListener(!triedEager); // handle delayed loader state\n\n  const [showLoader, setShowLoader] = useState(false);\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setShowLoader(true);\n    }, 600);\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, []); // on page load, do nothing until we've tried to connect to the injected connector\n\n  if (!triedEager) {\n    return null;\n  } // if the account context isn't active, and there's an error on the network context, it's an irrecoverable error\n\n\n  if (!active && networkError) {\n    return /*#__PURE__*/React.createElement(MessageWrapper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Message, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }\n    }, t('unknownError')));\n  } // if neither context is active, spin\n\n\n  if (!active && !networkActive) {\n    return showLoader ? /*#__PURE__*/React.createElement(MessageWrapper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Loader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }\n    })) : null;\n  }\n\n  return children;\n}","map":{"version":3,"sources":["C:/Users/marin/Desktop/bananaswap/src/components/Web3ReactManager/index.tsx"],"names":["React","useState","useEffect","useWeb3React","styled","useTranslation","network","useEagerConnect","useInactiveListener","NetworkContextName","Loader","MessageWrapper","div","Message","h2","theme","secondary1","Web3ReactManager","children","t","active","networkActive","error","networkError","activate","activateNetwork","triedEager","showLoader","setShowLoader","timeout","setTimeout","clearTimeout"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,cAAT,QAA+B,eAA/B;AAEA,SAASC,OAAT,QAAwB,kBAAxB;AACA,SAASC,eAAT,EAA0BC,mBAA1B,QAAqD,aAArD;AACA,SAASC,kBAAT,QAAmC,iBAAnC;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAEA,MAAMC,cAAc,GAAGP,MAAM,CAACQ,GAAI;AAClC;AACA;AACA;AACA;AACA,CALA;AAOA,MAAMC,OAAO,GAAGT,MAAM,CAACU,EAAG;AAC1B,WAAW,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAeA,KAAK,CAACC,UAAW;AAC3C,CAFA;AAIA,eAAe,SAASC,gBAAT,CAA0B;AAAEC,EAAAA;AAAF,CAA1B,EAAmE;AAChF,QAAM;AAAEC,IAAAA;AAAF,MAAQd,cAAc,EAA5B;AACA,QAAM;AAAEe,IAAAA;AAAF,MAAajB,YAAY,EAA/B;AACA,QAAM;AAAEiB,IAAAA,MAAM,EAAEC,aAAV;AAAyBC,IAAAA,KAAK,EAAEC,YAAhC;AAA8CC,IAAAA,QAAQ,EAAEC;AAAxD,MAA4EtB,YAAY,CAACM,kBAAD,CAA9F,CAHgF,CAKhF;;AACA,QAAMiB,UAAU,GAAGnB,eAAe,EAAlC,CANgF,CAQhF;;AACAL,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIwB,UAAU,IAAI,CAACL,aAAf,IAAgC,CAACE,YAAjC,IAAiD,CAACH,MAAtD,EAA8D;AAC5DK,MAAAA,eAAe,CAACnB,OAAD,CAAf;AACD;AACF,GAJQ,EAIN,CAACoB,UAAD,EAAaL,aAAb,EAA4BE,YAA5B,EAA0CE,eAA1C,EAA2DL,MAA3D,CAJM,CAAT,CATgF,CAehF;;AACAZ,EAAAA,mBAAmB,CAAC,CAACkB,UAAF,CAAnB,CAhBgF,CAkBhF;;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8B3B,QAAQ,CAAC,KAAD,CAA5C;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM2B,OAAO,GAAGC,UAAU,CAAC,MAAM;AAC/BF,MAAAA,aAAa,CAAC,IAAD,CAAb;AACD,KAFyB,EAEvB,GAFuB,CAA1B;AAIA,WAAO,MAAM;AACXG,MAAAA,YAAY,CAACF,OAAD,CAAZ;AACD,KAFD;AAGD,GARQ,EAQN,EARM,CAAT,CApBgF,CA8BhF;;AACA,MAAI,CAACH,UAAL,EAAiB;AACf,WAAO,IAAP;AACD,GAjC+E,CAmChF;;;AACA,MAAI,CAACN,MAAD,IAAWG,YAAf,EAA6B;AAC3B,wBACE,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAUJ,CAAC,CAAC,cAAD,CAAX,CADF,CADF;AAKD,GA1C+E,CA4ChF;;;AACA,MAAI,CAACC,MAAD,IAAW,CAACC,aAAhB,EAA+B;AAC7B,WAAOM,UAAU,gBACf,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADe,GAIb,IAJJ;AAKD;;AAED,SAAOT,QAAP;AACD","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport styled from 'styled-components'\r\nimport { useTranslation } from 'react-i18next'\r\n\r\nimport { network } from '../../connectors'\r\nimport { useEagerConnect, useInactiveListener } from '../../hooks'\r\nimport { NetworkContextName } from '../../constants'\r\nimport Loader from '../Loader'\r\n\r\nconst MessageWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 20rem;\r\n`\r\n\r\nconst Message = styled.h2`\r\n  color: ${({ theme }) => theme.secondary1};\r\n`\r\n\r\nexport default function Web3ReactManager({ children }: { children: JSX.Element }) {\r\n  const { t } = useTranslation()\r\n  const { active } = useWeb3React()\r\n  const { active: networkActive, error: networkError, activate: activateNetwork } = useWeb3React(NetworkContextName)\r\n\r\n  // try to eagerly connect to an injected provider, if it exists and has granted access already\r\n  const triedEager = useEagerConnect()\r\n\r\n  // after eagerly trying injected, if the network connect ever isn't active or in an error state, activate itd\r\n  useEffect(() => {\r\n    if (triedEager && !networkActive && !networkError && !active) {\r\n      activateNetwork(network)\r\n    }\r\n  }, [triedEager, networkActive, networkError, activateNetwork, active])\r\n\r\n  // when there's no account connected, react to logins (broadly speaking) on the injected provider, if it exists\r\n  useInactiveListener(!triedEager)\r\n\r\n  // handle delayed loader state\r\n  const [showLoader, setShowLoader] = useState(false)\r\n  useEffect(() => {\r\n    const timeout = setTimeout(() => {\r\n      setShowLoader(true)\r\n    }, 600)\r\n\r\n    return () => {\r\n      clearTimeout(timeout)\r\n    }\r\n  }, [])\r\n\r\n  // on page load, do nothing until we've tried to connect to the injected connector\r\n  if (!triedEager) {\r\n    return null\r\n  }\r\n\r\n  // if the account context isn't active, and there's an error on the network context, it's an irrecoverable error\r\n  if (!active && networkError) {\r\n    return (\r\n      <MessageWrapper>\r\n        <Message>{t('unknownError')}</Message>\r\n      </MessageWrapper>\r\n    )\r\n  }\r\n\r\n  // if neither context is active, spin\r\n  if (!active && !networkActive) {\r\n    return showLoader ? (\r\n      <MessageWrapper>\r\n        <Loader />\r\n      </MessageWrapper>\r\n    ) : null\r\n  }\r\n\r\n  return children\r\n}\r\n"]},"metadata":{},"sourceType":"module"}