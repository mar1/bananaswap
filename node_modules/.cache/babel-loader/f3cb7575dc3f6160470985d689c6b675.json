{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marin\\\\Documents\\\\Dev\\\\bananaswap\\\\moonbeam-uniswap\\\\uniswap-interface-moonbeam\\\\src\\\\pages\\\\Rewards\\\\index.tsx\";\nimport { JSBI, Token } from 'moonbeamswap';\nimport React, { useCallback, useContext, useEffect, useMemo, useState } from 'react';\nimport { ArrowDown } from 'react-feather';\nimport ReactGA from 'react-ga';\nimport { Text } from 'rebass';\nimport { useTranslation } from 'react-i18next';\nimport { ThemeContext } from 'styled-components';\nimport AddressInputPanel from '../../components/AddressInputPanel';\nimport { ButtonError, ButtonLight, ButtonPrimary, ButtonConfirmed } from '../../components/Button';\nimport Card, { GreyCard } from '../../components/Card';\nimport { AutoColumn } from '../../components/Column';\nimport ConfirmSwapModal from '../../components/swap/ConfirmSwapModal';\nimport CurrencyInputPanel from '../../components/CurrencyInputPanel';\nimport { SwapPoolTabs } from '../../components/NavigationTabs';\nimport { AutoRow, RowBetween } from '../../components/Row';\nimport AdvancedSwapDetailsDropdown from '../../components/swap/AdvancedSwapDetailsDropdown';\nimport confirmPriceImpactWithoutFee from '../../components/swap/confirmPriceImpactWithoutFee';\nimport { ArrowWrapper, BottomGrouping, SwapCallbackError, Wrapper } from '../../components/swap/styleds';\nimport TradePrice from '../../components/swap/TradePrice';\nimport TokenWarningModal from '../../components/TokenWarningModal';\nimport ProgressSteps from '../../components/ProgressSteps';\nimport { INITIAL_ALLOWED_SLIPPAGE } from '../../constants';\nimport { useActiveWeb3React } from '../../hooks';\nimport { useCurrency } from '../../hooks/Tokens';\nimport { ApprovalState, useApproveCallbackFromTrade } from '../../hooks/useApproveCallback';\nimport useENSAddress from '../../hooks/useENSAddress';\nimport { useSwapCallback } from '../../hooks/useSwapCallback';\nimport useToggledVersion, { Version } from '../../hooks/useToggledVersion';\nimport useWrapCallback, { WrapType } from '../../hooks/useWrapCallback';\nimport { useToggleSettingsMenu, useWalletModalToggle } from '../../state/application/hooks';\nimport { Field } from '../../state/swap/actions';\nimport { useDefaultsFromURLSearch, useDerivedSwapInfo, useSwapActionHandlers, useSwapState } from '../../state/swap/hooks';\nimport { useExpertModeManager, useUserDeadline, useUserSlippageTolerance } from '../../state/user/hooks';\nimport { LinkStyledButton, TYPE } from '../../theme';\nimport { maxAmountSpend } from '../../utils/maxAmountSpend';\nimport { computeTradePriceBreakdown, warningSeverity } from '../../utils/prices';\nimport AppBody from '../AppBody';\nimport { ClickableText } from '../Pool/styleds';\nimport Loader from '../../components/Loader';\nexport default function Swap() {\n  var _parsedAmounts$indepe, _parsedAmounts$indepe2, _parsedAmounts$depend, _parsedAmounts$depend2, _parsedAmounts$indepe3, _parsedAmounts$Field$, _currencies$Field$INP;\n\n  const {\n    t\n  } = useTranslation();\n  const loadedUrlParams = useDefaultsFromURLSearch(); // token warning stuff\n\n  const [loadedInputCurrency, loadedOutputCurrency] = [useCurrency(loadedUrlParams === null || loadedUrlParams === void 0 ? void 0 : loadedUrlParams.inputCurrencyId), useCurrency(loadedUrlParams === null || loadedUrlParams === void 0 ? void 0 : loadedUrlParams.outputCurrencyId)];\n  const [dismissTokenWarning, setDismissTokenWarning] = useState(false);\n  const urlLoadedTokens = useMemo(() => {\n    var _filter, _ref;\n\n    return (_filter = (_ref = [loadedInputCurrency, loadedOutputCurrency]) === null || _ref === void 0 ? void 0 : _ref.filter(c => c instanceof Token)) !== null && _filter !== void 0 ? _filter : [];\n  }, [loadedInputCurrency, loadedOutputCurrency]);\n  const handleConfirmTokenWarning = useCallback(() => {\n    setDismissTokenWarning(true);\n  }, []);\n  const {\n    account\n  } = useActiveWeb3React();\n  const theme = useContext(ThemeContext); // toggle wallet when disconnected\n\n  const toggleWalletModal = useWalletModalToggle(); // for expert mode\n\n  const toggleSettings = useToggleSettingsMenu();\n  const [isExpertMode] = useExpertModeManager(); // get custom setting values for user\n\n  const [deadline] = useUserDeadline();\n  const [allowedSlippage] = useUserSlippageTolerance(); // swap state\n\n  const {\n    independentField,\n    typedValue,\n    recipient\n  } = useSwapState();\n  const {\n    v2Trade,\n    currencyBalances,\n    parsedAmount,\n    currencies,\n    inputError: swapInputError\n  } = useDerivedSwapInfo();\n  const {\n    wrapType,\n    execute: onWrap,\n    inputError: wrapInputError\n  } = useWrapCallback(currencies[Field.INPUT], currencies[Field.OUTPUT], typedValue);\n  const showWrap = wrapType !== WrapType.NOT_APPLICABLE;\n  const {\n    address: recipientAddress\n  } = useENSAddress(recipient);\n  const toggledVersion = useToggledVersion();\n  const trade = showWrap ? undefined : {\n    [Version.v2]: v2Trade\n  }[toggledVersion];\n  const parsedAmounts = showWrap ? {\n    [Field.INPUT]: parsedAmount,\n    [Field.OUTPUT]: parsedAmount\n  } : {\n    [Field.INPUT]: independentField === Field.INPUT ? parsedAmount : trade === null || trade === void 0 ? void 0 : trade.inputAmount,\n    [Field.OUTPUT]: independentField === Field.OUTPUT ? parsedAmount : trade === null || trade === void 0 ? void 0 : trade.outputAmount\n  };\n  const {\n    onSwitchTokens,\n    onCurrencySelection,\n    onUserInput,\n    onChangeRecipient\n  } = useSwapActionHandlers();\n  const isValid = !swapInputError;\n  const dependentField = independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT;\n  const handleTypeInput = useCallback(value => {\n    onUserInput(Field.INPUT, value);\n  }, [onUserInput]);\n  const handleTypeOutput = useCallback(value => {\n    onUserInput(Field.OUTPUT, value);\n  }, [onUserInput]); // modal and loading\n\n  const [{\n    showConfirm,\n    tradeToConfirm,\n    swapErrorMessage,\n    attemptingTxn,\n    txHash\n  }, setSwapState] = useState({\n    showConfirm: false,\n    tradeToConfirm: undefined,\n    attemptingTxn: false,\n    swapErrorMessage: undefined,\n    txHash: undefined\n  });\n  const formattedAmounts = {\n    [independentField]: typedValue,\n    [dependentField]: showWrap ? (_parsedAmounts$indepe = (_parsedAmounts$indepe2 = parsedAmounts[independentField]) === null || _parsedAmounts$indepe2 === void 0 ? void 0 : _parsedAmounts$indepe2.toExact()) !== null && _parsedAmounts$indepe !== void 0 ? _parsedAmounts$indepe : '' : (_parsedAmounts$depend = (_parsedAmounts$depend2 = parsedAmounts[dependentField]) === null || _parsedAmounts$depend2 === void 0 ? void 0 : _parsedAmounts$depend2.toSignificant(6)) !== null && _parsedAmounts$depend !== void 0 ? _parsedAmounts$depend : ''\n  };\n  const route = trade === null || trade === void 0 ? void 0 : trade.route;\n  const userHasSpecifiedInputOutput = Boolean(currencies[Field.INPUT] && currencies[Field.OUTPUT] && ((_parsedAmounts$indepe3 = parsedAmounts[independentField]) === null || _parsedAmounts$indepe3 === void 0 ? void 0 : _parsedAmounts$indepe3.greaterThan(JSBI.BigInt(0))));\n  const noRoute = !route; // check whether the user has approved the router on the input token\n\n  const [approval, approveCallback] = useApproveCallbackFromTrade(trade, allowedSlippage); // check if user has gone through approval process, used to show two step buttons, reset on token change\n\n  const [approvalSubmitted, setApprovalSubmitted] = useState(false); // mark when a user has submitted an approval, reset onTokenSelection for input field\n\n  useEffect(() => {\n    if (approval === ApprovalState.PENDING) {\n      setApprovalSubmitted(true);\n    }\n  }, [approval, approvalSubmitted]);\n  const maxAmountInput = maxAmountSpend(currencyBalances[Field.INPUT]);\n  const atMaxAmountInput = Boolean(maxAmountInput && ((_parsedAmounts$Field$ = parsedAmounts[Field.INPUT]) === null || _parsedAmounts$Field$ === void 0 ? void 0 : _parsedAmounts$Field$.equalTo(maxAmountInput))); // the callback to execute the swap\n\n  const {\n    callback: swapCallback,\n    error: swapCallbackError\n  } = useSwapCallback(trade, allowedSlippage, deadline, recipient);\n  const {\n    priceImpactWithoutFee\n  } = computeTradePriceBreakdown(trade);\n  const handleSwap = useCallback(() => {\n    if (priceImpactWithoutFee && !confirmPriceImpactWithoutFee(priceImpactWithoutFee)) {\n      return;\n    }\n\n    if (!swapCallback) {\n      return;\n    }\n\n    setSwapState({\n      attemptingTxn: true,\n      tradeToConfirm,\n      showConfirm,\n      swapErrorMessage: undefined,\n      txHash: undefined\n    });\n    swapCallback().then(hash => {\n      var _trade$inputAmount, _trade$inputAmount$cu, _trade$outputAmount, _trade$outputAmount$c;\n\n      setSwapState({\n        attemptingTxn: false,\n        tradeToConfirm,\n        showConfirm,\n        swapErrorMessage: undefined,\n        txHash: hash\n      });\n      ReactGA.event({\n        category: 'Swap',\n        action: recipient === null ? 'Swap w/o Send' : (recipientAddress !== null && recipientAddress !== void 0 ? recipientAddress : recipient) === account ? 'Swap w/o Send + recipient' : 'Swap w/ Send',\n        label: [trade === null || trade === void 0 ? void 0 : (_trade$inputAmount = trade.inputAmount) === null || _trade$inputAmount === void 0 ? void 0 : (_trade$inputAmount$cu = _trade$inputAmount.currency) === null || _trade$inputAmount$cu === void 0 ? void 0 : _trade$inputAmount$cu.symbol, trade === null || trade === void 0 ? void 0 : (_trade$outputAmount = trade.outputAmount) === null || _trade$outputAmount === void 0 ? void 0 : (_trade$outputAmount$c = _trade$outputAmount.currency) === null || _trade$outputAmount$c === void 0 ? void 0 : _trade$outputAmount$c.symbol].join('/')\n      });\n    }).catch(error => {\n      setSwapState({\n        attemptingTxn: false,\n        tradeToConfirm,\n        showConfirm,\n        swapErrorMessage: error.message,\n        txHash: undefined\n      });\n    });\n  }, [tradeToConfirm, account, priceImpactWithoutFee, recipient, recipientAddress, showConfirm, swapCallback, trade]); // errors\n\n  const [showInverted, setShowInverted] = useState(false); // warnings on slippage\n\n  const priceImpactSeverity = warningSeverity(priceImpactWithoutFee); // show approve flow when: no error on inputs, not approved or pending, or approved in current session\n  // never show if price impact is above threshold in non expert mode\n\n  const showApproveFlow = !swapInputError && (approval === ApprovalState.NOT_APPROVED || approval === ApprovalState.PENDING || approvalSubmitted && approval === ApprovalState.APPROVED) && !(priceImpactSeverity > 3 && !isExpertMode);\n  const handleConfirmDismiss = useCallback(() => {\n    setSwapState({\n      showConfirm: false,\n      tradeToConfirm,\n      attemptingTxn,\n      swapErrorMessage,\n      txHash\n    }); // if there was a tx hash, we want to clear the input\n\n    if (txHash) {\n      onUserInput(Field.INPUT, '');\n    }\n  }, [attemptingTxn, onUserInput, swapErrorMessage, tradeToConfirm, txHash]);\n  const handleAcceptChanges = useCallback(() => {\n    setSwapState({\n      tradeToConfirm: trade,\n      swapErrorMessage,\n      txHash,\n      attemptingTxn,\n      showConfirm\n    });\n  }, [attemptingTxn, showConfirm, swapErrorMessage, trade, txHash]);\n  const handleInputSelect = useCallback(inputCurrency => {\n    setApprovalSubmitted(false); // reset 2 step UI for approvals\n\n    onCurrencySelection(Field.INPUT, inputCurrency);\n  }, [onCurrencySelection]);\n  const handleMaxInput = useCallback(() => {\n    maxAmountInput && onUserInput(Field.INPUT, maxAmountInput.toExact());\n  }, [maxAmountInput, onUserInput]);\n  const handleOutputSelect = useCallback(outputCurrency => onCurrencySelection(Field.OUTPUT, outputCurrency), [onCurrencySelection]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TokenWarningModal, {\n    isOpen: urlLoadedTokens.length > 0 && !dismissTokenWarning,\n    tokens: urlLoadedTokens,\n    onConfirm: handleConfirmTokenWarning,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(AppBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(SwapPoolTabs, {\n    active: 'swap*',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Wrapper, {\n    id: \"swap-page\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ConfirmSwapModal, {\n    isOpen: showConfirm,\n    trade: trade,\n    originalTrade: tradeToConfirm,\n    onAcceptChanges: handleAcceptChanges,\n    attemptingTxn: attemptingTxn,\n    txHash: txHash,\n    recipient: recipient,\n    allowedSlippage: allowedSlippage,\n    onConfirm: handleSwap,\n    swapErrorMessage: swapErrorMessage,\n    onDismiss: handleConfirmDismiss,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(AutoColumn, {\n    gap: 'md',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(CurrencyInputPanel, {\n    label: independentField === Field.OUTPUT && !showWrap && trade ? 'From (estimated)' : 'From',\n    value: formattedAmounts[Field.INPUT],\n    showMaxButton: !atMaxAmountInput,\n    currency: currencies[Field.INPUT],\n    onUserInput: handleTypeInput,\n    onMax: handleMaxInput,\n    onCurrencySelect: handleInputSelect,\n    otherCurrency: currencies[Field.OUTPUT],\n    id: \"swap-currency-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(AutoColumn, {\n    justify: \"space-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(AutoRow, {\n    justify: isExpertMode ? 'space-between' : 'center',\n    style: {\n      padding: '0 1rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(ArrowWrapper, {\n    clickable: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ArrowDown, {\n    size: \"16\",\n    onClick: () => {\n      setApprovalSubmitted(false); // reset 2 step UI for approvals\n\n      onSwitchTokens();\n    },\n    color: currencies[Field.INPUT] && currencies[Field.OUTPUT] ? theme.primary1 : theme.text2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 19\n    }\n  })), recipient === null && !showWrap && isExpertMode ? /*#__PURE__*/React.createElement(LinkStyledButton, {\n    id: \"add-recipient-button\",\n    onClick: () => onChangeRecipient(''),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 19\n    }\n  }, \"+ Add a send (optional)\") : null)), /*#__PURE__*/React.createElement(CurrencyInputPanel, {\n    value: formattedAmounts[Field.OUTPUT],\n    onUserInput: handleTypeOutput,\n    label: independentField === Field.INPUT && !showWrap && trade ? 'To (estimated)' : 'To',\n    showMaxButton: false,\n    currency: currencies[Field.OUTPUT],\n    onCurrencySelect: handleOutputSelect,\n    otherCurrency: currencies[Field.INPUT],\n    id: \"swap-currency-output\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 13\n    }\n  }), recipient !== null && !showWrap ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AutoRow, {\n    justify: \"space-between\",\n    style: {\n      padding: '0 1rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ArrowWrapper, {\n    clickable: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(ArrowDown, {\n    size: \"16\",\n    color: theme.text2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(LinkStyledButton, {\n    id: \"remove-recipient-button\",\n    onClick: () => onChangeRecipient(null),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 19\n    }\n  }, \"- Remove send\")), /*#__PURE__*/React.createElement(AddressInputPanel, {\n    id: \"recipient\",\n    value: recipient,\n    onChange: onChangeRecipient,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 17\n    }\n  })) : null, showWrap ? null : /*#__PURE__*/React.createElement(Card, {\n    padding: '.25rem .75rem 0 .75rem',\n    borderRadius: '20px',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(AutoColumn, {\n    gap: \"4px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 17\n    }\n  }, Boolean(trade) && /*#__PURE__*/React.createElement(RowBetween, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    fontWeight: 500,\n    fontSize: 14,\n    color: theme.text2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 23\n    }\n  }, t('price')), /*#__PURE__*/React.createElement(TradePrice, {\n    price: trade === null || trade === void 0 ? void 0 : trade.executionPrice,\n    showInverted: showInverted,\n    setShowInverted: setShowInverted,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 23\n    }\n  })), allowedSlippage !== INITIAL_ALLOWED_SLIPPAGE && /*#__PURE__*/React.createElement(RowBetween, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(ClickableText, {\n    fontWeight: 500,\n    fontSize: 14,\n    color: theme.text2,\n    onClick: toggleSettings,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 23\n    }\n  }, \"Slippage Tolerance\"), /*#__PURE__*/React.createElement(ClickableText, {\n    fontWeight: 500,\n    fontSize: 14,\n    color: theme.text2,\n    onClick: toggleSettings,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 23\n    }\n  }, allowedSlippage / 100, \"%\"))))), /*#__PURE__*/React.createElement(BottomGrouping, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 11\n    }\n  }, !account ? /*#__PURE__*/React.createElement(ButtonLight, {\n    onClick: toggleWalletModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 15\n    }\n  }, \"Connect Wallet\") : showWrap ? /*#__PURE__*/React.createElement(ButtonPrimary, {\n    disabled: Boolean(wrapInputError),\n    onClick: onWrap,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 15\n    }\n  }, wrapInputError !== null && wrapInputError !== void 0 ? wrapInputError : wrapType === WrapType.WRAP ? 'Wrap' : wrapType === WrapType.UNWRAP ? 'Unwrap' : null) : noRoute && userHasSpecifiedInputOutput ? /*#__PURE__*/React.createElement(GreyCard, {\n    style: {\n      textAlign: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.main, {\n    mb: \"4px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 17\n    }\n  }, t('insufficientLiquidityForThisTrade'))) : showApproveFlow ? /*#__PURE__*/React.createElement(RowBetween, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(ButtonConfirmed, {\n    onClick: approveCallback,\n    disabled: approval !== ApprovalState.NOT_APPROVED || approvalSubmitted,\n    width: \"48%\",\n    altDisabledStyle: approval === ApprovalState.PENDING // show solid button while waiting\n    ,\n    confirmed: approval === ApprovalState.APPROVED,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 17\n    }\n  }, approval === ApprovalState.PENDING ? /*#__PURE__*/React.createElement(AutoRow, {\n    gap: \"6px\",\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 21\n    }\n  }, \"Approving \", /*#__PURE__*/React.createElement(Loader, {\n    stroke: \"white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 33\n    }\n  })) : approvalSubmitted && approval === ApprovalState.APPROVED ? 'Approved' : 'Approve ' + ((_currencies$Field$INP = currencies[Field.INPUT]) === null || _currencies$Field$INP === void 0 ? void 0 : _currencies$Field$INP.symbol)), /*#__PURE__*/React.createElement(ButtonError, {\n    onClick: () => {\n      if (isExpertMode) {\n        handleSwap();\n      } else {\n        setSwapState({\n          tradeToConfirm: trade,\n          attemptingTxn: false,\n          swapErrorMessage: undefined,\n          showConfirm: true,\n          txHash: undefined\n        });\n      }\n    },\n    width: \"48%\",\n    id: \"swap-button\",\n    disabled: !isValid || approval !== ApprovalState.APPROVED || priceImpactSeverity > 3 && !isExpertMode,\n    error: isValid && priceImpactSeverity > 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 394,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    fontSize: 16,\n    fontWeight: 500,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 415,\n      columnNumber: 19\n    }\n  }, priceImpactSeverity > 3 && !isExpertMode ? `Price Impact High` : `Swap${priceImpactSeverity > 2 ? ' Anyway' : ''}`))) : /*#__PURE__*/React.createElement(ButtonError, {\n    onClick: () => {\n      if (isExpertMode) {\n        handleSwap();\n      } else {\n        setSwapState({\n          tradeToConfirm: trade,\n          attemptingTxn: false,\n          swapErrorMessage: undefined,\n          showConfirm: true,\n          txHash: undefined\n        });\n      }\n    },\n    id: \"swap-button\",\n    disabled: !isValid || priceImpactSeverity > 3 && !isExpertMode || !!swapCallbackError,\n    error: isValid && priceImpactSeverity > 2 && !swapCallbackError,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    fontSize: 20,\n    fontWeight: 500,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 441,\n      columnNumber: 17\n    }\n  }, swapInputError ? swapInputError : priceImpactSeverity > 3 && !isExpertMode ? `Price Impact Too High` : `Swap${priceImpactSeverity > 2 ? ' Anyway' : ''}`)), showApproveFlow && /*#__PURE__*/React.createElement(ProgressSteps, {\n    steps: [approval === ApprovalState.APPROVED],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 450,\n      columnNumber: 33\n    }\n  }), isExpertMode && swapErrorMessage ? /*#__PURE__*/React.createElement(SwapCallbackError, {\n    error: swapErrorMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 451,\n      columnNumber: 49\n    }\n  }) : null))), /*#__PURE__*/React.createElement(AdvancedSwapDetailsDropdown, {\n    trade: trade,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 455,\n      columnNumber: 7\n    }\n  }));\n} //465: {betterTradeLinkVersion && <BetterTradeLink version={betterTradeLinkVersion} />}","map":{"version":3,"sources":["C:/Users/marin/Documents/Dev/bananaswap/moonbeam-uniswap/uniswap-interface-moonbeam/src/pages/Rewards/index.tsx"],"names":["JSBI","Token","React","useCallback","useContext","useEffect","useMemo","useState","ArrowDown","ReactGA","Text","useTranslation","ThemeContext","AddressInputPanel","ButtonError","ButtonLight","ButtonPrimary","ButtonConfirmed","Card","GreyCard","AutoColumn","ConfirmSwapModal","CurrencyInputPanel","SwapPoolTabs","AutoRow","RowBetween","AdvancedSwapDetailsDropdown","confirmPriceImpactWithoutFee","ArrowWrapper","BottomGrouping","SwapCallbackError","Wrapper","TradePrice","TokenWarningModal","ProgressSteps","INITIAL_ALLOWED_SLIPPAGE","useActiveWeb3React","useCurrency","ApprovalState","useApproveCallbackFromTrade","useENSAddress","useSwapCallback","useToggledVersion","Version","useWrapCallback","WrapType","useToggleSettingsMenu","useWalletModalToggle","Field","useDefaultsFromURLSearch","useDerivedSwapInfo","useSwapActionHandlers","useSwapState","useExpertModeManager","useUserDeadline","useUserSlippageTolerance","LinkStyledButton","TYPE","maxAmountSpend","computeTradePriceBreakdown","warningSeverity","AppBody","ClickableText","Loader","Swap","t","loadedUrlParams","loadedInputCurrency","loadedOutputCurrency","inputCurrencyId","outputCurrencyId","dismissTokenWarning","setDismissTokenWarning","urlLoadedTokens","filter","c","handleConfirmTokenWarning","account","theme","toggleWalletModal","toggleSettings","isExpertMode","deadline","allowedSlippage","independentField","typedValue","recipient","v2Trade","currencyBalances","parsedAmount","currencies","inputError","swapInputError","wrapType","execute","onWrap","wrapInputError","INPUT","OUTPUT","showWrap","NOT_APPLICABLE","address","recipientAddress","toggledVersion","trade","undefined","v2","parsedAmounts","inputAmount","outputAmount","onSwitchTokens","onCurrencySelection","onUserInput","onChangeRecipient","isValid","dependentField","handleTypeInput","value","handleTypeOutput","showConfirm","tradeToConfirm","swapErrorMessage","attemptingTxn","txHash","setSwapState","formattedAmounts","toExact","toSignificant","route","userHasSpecifiedInputOutput","Boolean","greaterThan","BigInt","noRoute","approval","approveCallback","approvalSubmitted","setApprovalSubmitted","PENDING","maxAmountInput","atMaxAmountInput","equalTo","callback","swapCallback","error","swapCallbackError","priceImpactWithoutFee","handleSwap","then","hash","event","category","action","label","currency","symbol","join","catch","message","showInverted","setShowInverted","priceImpactSeverity","showApproveFlow","NOT_APPROVED","APPROVED","handleConfirmDismiss","handleAcceptChanges","handleInputSelect","inputCurrency","handleMaxInput","handleOutputSelect","outputCurrency","length","padding","primary1","text2","executionPrice","WRAP","UNWRAP","textAlign"],"mappings":"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","sourcesContent":["import { CurrencyAmount, JSBI, Token, Trade } from 'moonbeamswap'\r\nimport React, { useCallback, useContext, useEffect, useMemo, useState } from 'react'\r\nimport { ArrowDown } from 'react-feather'\r\nimport ReactGA from 'react-ga'\r\nimport { Text } from 'rebass'\r\nimport { useTranslation } from 'react-i18next'\r\nimport { ThemeContext } from 'styled-components'\r\nimport AddressInputPanel from '../../components/AddressInputPanel'\r\nimport { ButtonError, ButtonLight, ButtonPrimary, ButtonConfirmed } from '../../components/Button'\r\nimport Card, { GreyCard } from '../../components/Card'\r\nimport { AutoColumn } from '../../components/Column'\r\nimport ConfirmSwapModal from '../../components/swap/ConfirmSwapModal'\r\nimport CurrencyInputPanel from '../../components/CurrencyInputPanel'\r\nimport { SwapPoolTabs } from '../../components/NavigationTabs'\r\nimport { AutoRow, RowBetween } from '../../components/Row'\r\nimport AdvancedSwapDetailsDropdown from '../../components/swap/AdvancedSwapDetailsDropdown'\r\nimport confirmPriceImpactWithoutFee from '../../components/swap/confirmPriceImpactWithoutFee'\r\nimport { ArrowWrapper, BottomGrouping, SwapCallbackError, Wrapper } from '../../components/swap/styleds'\r\nimport TradePrice from '../../components/swap/TradePrice'\r\nimport TokenWarningModal from '../../components/TokenWarningModal'\r\nimport ProgressSteps from '../../components/ProgressSteps'\r\n\r\nimport { INITIAL_ALLOWED_SLIPPAGE } from '../../constants'\r\nimport { useActiveWeb3React } from '../../hooks'\r\nimport { useCurrency } from '../../hooks/Tokens'\r\nimport { ApprovalState, useApproveCallbackFromTrade } from '../../hooks/useApproveCallback'\r\nimport useENSAddress from '../../hooks/useENSAddress'\r\nimport { useSwapCallback } from '../../hooks/useSwapCallback'\r\nimport useToggledVersion, { Version } from '../../hooks/useToggledVersion'\r\nimport useWrapCallback, { WrapType } from '../../hooks/useWrapCallback'\r\nimport { useToggleSettingsMenu, useWalletModalToggle } from '../../state/application/hooks'\r\nimport { Field } from '../../state/swap/actions'\r\nimport {\r\n  useDefaultsFromURLSearch,\r\n  useDerivedSwapInfo,\r\n  useSwapActionHandlers,\r\n  useSwapState\r\n} from '../../state/swap/hooks'\r\nimport { useExpertModeManager, useUserDeadline, useUserSlippageTolerance } from '../../state/user/hooks'\r\nimport { LinkStyledButton, TYPE } from '../../theme'\r\nimport { maxAmountSpend } from '../../utils/maxAmountSpend'\r\nimport { computeTradePriceBreakdown, warningSeverity } from '../../utils/prices'\r\nimport AppBody from '../AppBody'\r\nimport { ClickableText } from '../Pool/styleds'\r\nimport Loader from '../../components/Loader'\r\n\r\nexport default function Swap() {\r\n  const { t } = useTranslation()\r\n  const loadedUrlParams = useDefaultsFromURLSearch()\r\n\r\n  // token warning stuff\r\n  const [loadedInputCurrency, loadedOutputCurrency] = [\r\n    useCurrency(loadedUrlParams?.inputCurrencyId),\r\n    useCurrency(loadedUrlParams?.outputCurrencyId)\r\n  ]\r\n  const [dismissTokenWarning, setDismissTokenWarning] = useState<boolean>(false)\r\n  const urlLoadedTokens: Token[] = useMemo(\r\n    () => [loadedInputCurrency, loadedOutputCurrency]?.filter((c): c is Token => c instanceof Token) ?? [],\r\n    [loadedInputCurrency, loadedOutputCurrency]\r\n  )\r\n  const handleConfirmTokenWarning = useCallback(() => {\r\n    setDismissTokenWarning(true)\r\n  }, [])\r\n\r\n  const { account } = useActiveWeb3React()\r\n  const theme = useContext(ThemeContext)\r\n\r\n  // toggle wallet when disconnected\r\n  const toggleWalletModal = useWalletModalToggle()\r\n\r\n  // for expert mode\r\n  const toggleSettings = useToggleSettingsMenu()\r\n  const [isExpertMode] = useExpertModeManager()\r\n\r\n  // get custom setting values for user\r\n  const [deadline] = useUserDeadline()\r\n  const [allowedSlippage] = useUserSlippageTolerance()\r\n\r\n  // swap state\r\n  const { independentField, typedValue, recipient } = useSwapState()\r\n  const { v2Trade, currencyBalances, parsedAmount, currencies, inputError: swapInputError } = useDerivedSwapInfo()\r\n  const { wrapType, execute: onWrap, inputError: wrapInputError } = useWrapCallback(\r\n    currencies[Field.INPUT],\r\n    currencies[Field.OUTPUT],\r\n    typedValue\r\n  )\r\n  const showWrap: boolean = wrapType !== WrapType.NOT_APPLICABLE\r\n  const { address: recipientAddress } = useENSAddress(recipient)\r\n  const toggledVersion = useToggledVersion()\r\n  const trade = showWrap\r\n    ? undefined\r\n    : {\r\n        [Version.v2]: v2Trade\r\n      }[toggledVersion]\r\n\r\n  const parsedAmounts = showWrap\r\n    ? {\r\n        [Field.INPUT]: parsedAmount,\r\n        [Field.OUTPUT]: parsedAmount\r\n      }\r\n    : {\r\n        [Field.INPUT]: independentField === Field.INPUT ? parsedAmount : trade?.inputAmount,\r\n        [Field.OUTPUT]: independentField === Field.OUTPUT ? parsedAmount : trade?.outputAmount\r\n      }\r\n\r\n  const { onSwitchTokens, onCurrencySelection, onUserInput, onChangeRecipient } = useSwapActionHandlers()\r\n  const isValid = !swapInputError\r\n  const dependentField: Field = independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT\r\n\r\n  const handleTypeInput = useCallback(\r\n    (value: string) => {\r\n      onUserInput(Field.INPUT, value)\r\n    },\r\n    [onUserInput]\r\n  )\r\n  const handleTypeOutput = useCallback(\r\n    (value: string) => {\r\n      onUserInput(Field.OUTPUT, value)\r\n    },\r\n    [onUserInput]\r\n  )\r\n\r\n  // modal and loading\r\n  const [{ showConfirm, tradeToConfirm, swapErrorMessage, attemptingTxn, txHash }, setSwapState] = useState<{\r\n    showConfirm: boolean\r\n    tradeToConfirm: Trade | undefined\r\n    attemptingTxn: boolean\r\n    swapErrorMessage: string | undefined\r\n    txHash: string | undefined\r\n  }>({\r\n    showConfirm: false,\r\n    tradeToConfirm: undefined,\r\n    attemptingTxn: false,\r\n    swapErrorMessage: undefined,\r\n    txHash: undefined\r\n  })\r\n\r\n  const formattedAmounts = {\r\n    [independentField]: typedValue,\r\n    [dependentField]: showWrap\r\n      ? parsedAmounts[independentField]?.toExact() ?? ''\r\n      : parsedAmounts[dependentField]?.toSignificant(6) ?? ''\r\n  }\r\n\r\n  const route = trade?.route\r\n  const userHasSpecifiedInputOutput = Boolean(\r\n    currencies[Field.INPUT] && currencies[Field.OUTPUT] && parsedAmounts[independentField]?.greaterThan(JSBI.BigInt(0))\r\n  )\r\n  const noRoute = !route\r\n\r\n  // check whether the user has approved the router on the input token\r\n  const [approval, approveCallback] = useApproveCallbackFromTrade(trade, allowedSlippage)\r\n\r\n  // check if user has gone through approval process, used to show two step buttons, reset on token change\r\n  const [approvalSubmitted, setApprovalSubmitted] = useState<boolean>(false)\r\n\r\n  // mark when a user has submitted an approval, reset onTokenSelection for input field\r\n  useEffect(() => {\r\n    if (approval === ApprovalState.PENDING) {\r\n      setApprovalSubmitted(true)\r\n    }\r\n  }, [approval, approvalSubmitted])\r\n\r\n  const maxAmountInput: CurrencyAmount | undefined = maxAmountSpend(currencyBalances[Field.INPUT])\r\n  const atMaxAmountInput = Boolean(maxAmountInput && parsedAmounts[Field.INPUT]?.equalTo(maxAmountInput))\r\n\r\n  // the callback to execute the swap\r\n  const { callback: swapCallback, error: swapCallbackError } = useSwapCallback(\r\n    trade,\r\n    allowedSlippage,\r\n    deadline,\r\n    recipient\r\n  )\r\n\r\n  const { priceImpactWithoutFee } = computeTradePriceBreakdown(trade)\r\n\r\n  const handleSwap = useCallback(() => {\r\n    if (priceImpactWithoutFee && !confirmPriceImpactWithoutFee(priceImpactWithoutFee)) {\r\n      return\r\n    }\r\n    if (!swapCallback) {\r\n      return\r\n    }\r\n    setSwapState({ attemptingTxn: true, tradeToConfirm, showConfirm, swapErrorMessage: undefined, txHash: undefined })\r\n    swapCallback()\r\n      .then(hash => {\r\n        setSwapState({ attemptingTxn: false, tradeToConfirm, showConfirm, swapErrorMessage: undefined, txHash: hash })\r\n\r\n        ReactGA.event({\r\n          category: 'Swap',\r\n          action:\r\n            recipient === null\r\n              ? 'Swap w/o Send'\r\n              : (recipientAddress ?? recipient) === account\r\n              ? 'Swap w/o Send + recipient'\r\n              : 'Swap w/ Send',\r\n          label: [trade?.inputAmount?.currency?.symbol, trade?.outputAmount?.currency?.symbol].join('/')\r\n        })\r\n      })\r\n      .catch(error => {\r\n        setSwapState({\r\n          attemptingTxn: false,\r\n          tradeToConfirm,\r\n          showConfirm,\r\n          swapErrorMessage: error.message,\r\n          txHash: undefined\r\n        })\r\n      })\r\n  }, [tradeToConfirm, account, priceImpactWithoutFee, recipient, recipientAddress, showConfirm, swapCallback, trade])\r\n\r\n  // errors\r\n  const [showInverted, setShowInverted] = useState<boolean>(false)\r\n\r\n  // warnings on slippage\r\n  const priceImpactSeverity = warningSeverity(priceImpactWithoutFee)\r\n\r\n  // show approve flow when: no error on inputs, not approved or pending, or approved in current session\r\n  // never show if price impact is above threshold in non expert mode\r\n  const showApproveFlow =\r\n    !swapInputError &&\r\n    (approval === ApprovalState.NOT_APPROVED ||\r\n      approval === ApprovalState.PENDING ||\r\n      (approvalSubmitted && approval === ApprovalState.APPROVED)) &&\r\n    !(priceImpactSeverity > 3 && !isExpertMode)\r\n\r\n  const handleConfirmDismiss = useCallback(() => {\r\n    setSwapState({ showConfirm: false, tradeToConfirm, attemptingTxn, swapErrorMessage, txHash })\r\n    // if there was a tx hash, we want to clear the input\r\n    if (txHash) {\r\n      onUserInput(Field.INPUT, '')\r\n    }\r\n  }, [attemptingTxn, onUserInput, swapErrorMessage, tradeToConfirm, txHash])\r\n\r\n  const handleAcceptChanges = useCallback(() => {\r\n    setSwapState({ tradeToConfirm: trade, swapErrorMessage, txHash, attemptingTxn, showConfirm })\r\n  }, [attemptingTxn, showConfirm, swapErrorMessage, trade, txHash])\r\n\r\n  const handleInputSelect = useCallback(\r\n    inputCurrency => {\r\n      setApprovalSubmitted(false) // reset 2 step UI for approvals\r\n      onCurrencySelection(Field.INPUT, inputCurrency)\r\n    },\r\n    [onCurrencySelection]\r\n  )\r\n\r\n  const handleMaxInput = useCallback(() => {\r\n    maxAmountInput && onUserInput(Field.INPUT, maxAmountInput.toExact())\r\n  }, [maxAmountInput, onUserInput])\r\n\r\n  const handleOutputSelect = useCallback(outputCurrency => onCurrencySelection(Field.OUTPUT, outputCurrency), [\r\n    onCurrencySelection\r\n  ])\r\n\r\n  return (\r\n    <>\r\n      <TokenWarningModal\r\n        isOpen={urlLoadedTokens.length > 0 && !dismissTokenWarning}\r\n        tokens={urlLoadedTokens}\r\n        onConfirm={handleConfirmTokenWarning}\r\n      />\r\n      <AppBody>\r\n        <SwapPoolTabs active={'swap*'} />\r\n        <Wrapper id=\"swap-page\">\r\n          <ConfirmSwapModal\r\n            isOpen={showConfirm}\r\n            trade={trade}\r\n            originalTrade={tradeToConfirm}\r\n            onAcceptChanges={handleAcceptChanges}\r\n            attemptingTxn={attemptingTxn}\r\n            txHash={txHash}\r\n            recipient={recipient}\r\n            allowedSlippage={allowedSlippage}\r\n            onConfirm={handleSwap}\r\n            swapErrorMessage={swapErrorMessage}\r\n            onDismiss={handleConfirmDismiss}\r\n          />\r\n\r\n          <AutoColumn gap={'md'}>\r\n            <CurrencyInputPanel\r\n              label={independentField === Field.OUTPUT && !showWrap && trade ? 'From (estimated)' : 'From'}\r\n              value={formattedAmounts[Field.INPUT]}\r\n              showMaxButton={!atMaxAmountInput}\r\n              currency={currencies[Field.INPUT]}\r\n              onUserInput={handleTypeInput}\r\n              onMax={handleMaxInput}\r\n              onCurrencySelect={handleInputSelect}\r\n              otherCurrency={currencies[Field.OUTPUT]}\r\n              id=\"swap-currency-input\"\r\n            />\r\n            <AutoColumn justify=\"space-between\">\r\n              <AutoRow justify={isExpertMode ? 'space-between' : 'center'} style={{ padding: '0 1rem' }}>\r\n                <ArrowWrapper clickable>\r\n                  <ArrowDown\r\n                    size=\"16\"\r\n                    onClick={() => {\r\n                      setApprovalSubmitted(false) // reset 2 step UI for approvals\r\n                      onSwitchTokens()\r\n                    }}\r\n                    color={currencies[Field.INPUT] && currencies[Field.OUTPUT] ? theme.primary1 : theme.text2}\r\n                  />\r\n                </ArrowWrapper>\r\n                {recipient === null && !showWrap && isExpertMode ? (\r\n                  <LinkStyledButton id=\"add-recipient-button\" onClick={() => onChangeRecipient('')}>\r\n                    + Add a send (optional)\r\n                  </LinkStyledButton>\r\n                ) : null}\r\n              </AutoRow>\r\n            </AutoColumn>\r\n            <CurrencyInputPanel\r\n              value={formattedAmounts[Field.OUTPUT]}\r\n              onUserInput={handleTypeOutput}\r\n              label={independentField === Field.INPUT && !showWrap && trade ? 'To (estimated)' : 'To'}\r\n              showMaxButton={false}\r\n              currency={currencies[Field.OUTPUT]}\r\n              onCurrencySelect={handleOutputSelect}\r\n              otherCurrency={currencies[Field.INPUT]}\r\n              id=\"swap-currency-output\"\r\n            />\r\n\r\n            {recipient !== null && !showWrap ? (\r\n              <>\r\n                <AutoRow justify=\"space-between\" style={{ padding: '0 1rem' }}>\r\n                  <ArrowWrapper clickable={false}>\r\n                    <ArrowDown size=\"16\" color={theme.text2} />\r\n                  </ArrowWrapper>\r\n                  <LinkStyledButton id=\"remove-recipient-button\" onClick={() => onChangeRecipient(null)}>\r\n                    - Remove send\r\n                  </LinkStyledButton>\r\n                </AutoRow>\r\n                <AddressInputPanel id=\"recipient\" value={recipient} onChange={onChangeRecipient} />\r\n              </>\r\n            ) : null}\r\n\r\n            {showWrap ? null : (\r\n              <Card padding={'.25rem .75rem 0 .75rem'} borderRadius={'20px'}>\r\n                <AutoColumn gap=\"4px\">\r\n                  {Boolean(trade) && (\r\n                    <RowBetween align=\"center\">\r\n                      <Text fontWeight={500} fontSize={14} color={theme.text2}>\r\n                        {t('price')}\r\n                      </Text>\r\n                      <TradePrice\r\n                        price={trade?.executionPrice}\r\n                        showInverted={showInverted}\r\n                        setShowInverted={setShowInverted}\r\n                      />\r\n                    </RowBetween>\r\n                  )}\r\n                  {allowedSlippage !== INITIAL_ALLOWED_SLIPPAGE && (\r\n                    <RowBetween align=\"center\">\r\n                      <ClickableText fontWeight={500} fontSize={14} color={theme.text2} onClick={toggleSettings}>\r\n                        Slippage Tolerance\r\n                      </ClickableText>\r\n                      <ClickableText fontWeight={500} fontSize={14} color={theme.text2} onClick={toggleSettings}>\r\n                        {allowedSlippage / 100}%\r\n                      </ClickableText>\r\n                    </RowBetween>\r\n                  )}\r\n                </AutoColumn>\r\n              </Card>\r\n            )}\r\n          </AutoColumn>\r\n          <BottomGrouping>\r\n            {!account ? (\r\n              <ButtonLight onClick={toggleWalletModal}>Connect Wallet</ButtonLight>\r\n            ) : showWrap ? (\r\n              <ButtonPrimary disabled={Boolean(wrapInputError)} onClick={onWrap}>\r\n                {wrapInputError ??\r\n                  (wrapType === WrapType.WRAP ? 'Wrap' : wrapType === WrapType.UNWRAP ? 'Unwrap' : null)}\r\n              </ButtonPrimary>\r\n            ) : noRoute && userHasSpecifiedInputOutput ? (\r\n              <GreyCard style={{ textAlign: 'center' }}>\r\n                <TYPE.main mb=\"4px\">{t('insufficientLiquidityForThisTrade')}</TYPE.main>\r\n              </GreyCard>\r\n            ) : showApproveFlow ? (\r\n              <RowBetween>\r\n                <ButtonConfirmed\r\n                  onClick={approveCallback}\r\n                  disabled={approval !== ApprovalState.NOT_APPROVED || approvalSubmitted}\r\n                  width=\"48%\"\r\n                  altDisabledStyle={approval === ApprovalState.PENDING} // show solid button while waiting\r\n                  confirmed={approval === ApprovalState.APPROVED}\r\n                >\r\n                  {approval === ApprovalState.PENDING ? (\r\n                    <AutoRow gap=\"6px\" justify=\"center\">\r\n                      Approving <Loader stroke=\"white\" />\r\n                    </AutoRow>\r\n                  ) : approvalSubmitted && approval === ApprovalState.APPROVED ? (\r\n                    'Approved'\r\n                  ) : (\r\n                    'Approve ' + currencies[Field.INPUT]?.symbol\r\n                  )}\r\n                </ButtonConfirmed>\r\n                <ButtonError\r\n                  onClick={() => {\r\n                    if (isExpertMode) {\r\n                      handleSwap()\r\n                    } else {\r\n                      setSwapState({\r\n                        tradeToConfirm: trade,\r\n                        attemptingTxn: false,\r\n                        swapErrorMessage: undefined,\r\n                        showConfirm: true,\r\n                        txHash: undefined\r\n                      })\r\n                    }\r\n                  }}\r\n                  width=\"48%\"\r\n                  id=\"swap-button\"\r\n                  disabled={\r\n                    !isValid || approval !== ApprovalState.APPROVED || (priceImpactSeverity > 3 && !isExpertMode)\r\n                  }\r\n                  error={isValid && priceImpactSeverity > 2}\r\n                >\r\n                  <Text fontSize={16} fontWeight={500}>\r\n                    {priceImpactSeverity > 3 && !isExpertMode\r\n                      ? `Price Impact High`\r\n                      : `Swap${priceImpactSeverity > 2 ? ' Anyway' : ''}`}\r\n                  </Text>\r\n                </ButtonError>\r\n              </RowBetween>\r\n            ) : (\r\n              <ButtonError\r\n                onClick={() => {\r\n                  if (isExpertMode) {\r\n                    handleSwap()\r\n                  } else {\r\n                    setSwapState({\r\n                      tradeToConfirm: trade,\r\n                      attemptingTxn: false,\r\n                      swapErrorMessage: undefined,\r\n                      showConfirm: true,\r\n                      txHash: undefined\r\n                    })\r\n                  }\r\n                }}\r\n                id=\"swap-button\"\r\n                disabled={!isValid || (priceImpactSeverity > 3 && !isExpertMode) || !!swapCallbackError}\r\n                error={isValid && priceImpactSeverity > 2 && !swapCallbackError}\r\n              >\r\n                <Text fontSize={20} fontWeight={500}>\r\n                  {swapInputError\r\n                    ? swapInputError\r\n                    : priceImpactSeverity > 3 && !isExpertMode\r\n                    ? `Price Impact Too High`\r\n                    : `Swap${priceImpactSeverity > 2 ? ' Anyway' : ''}`}\r\n                </Text>\r\n              </ButtonError>\r\n            )}\r\n            {showApproveFlow && <ProgressSteps steps={[approval === ApprovalState.APPROVED]} />}\r\n            {isExpertMode && swapErrorMessage ? <SwapCallbackError error={swapErrorMessage} /> : null}\r\n          </BottomGrouping>\r\n        </Wrapper>\r\n      </AppBody>\r\n      <AdvancedSwapDetailsDropdown trade={trade} />\r\n    </>\r\n  )\r\n}\r\n\r\n//465: {betterTradeLinkVersion && <BetterTradeLink version={betterTradeLinkVersion} />}\r\n"]},"metadata":{},"sourceType":"module"}