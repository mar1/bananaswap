{"ast":null,"code":"import _slicedToArray from\"C:\\\\Users\\\\marin\\\\Desktop\\\\bananaswap\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import{useEffect,useState}from'react';// modified from https://usehooks.com/useDebounce/\nexport default function useDebounce(value,delay){var _useState=useState(value),_useState2=_slicedToArray(_useState,2),debouncedValue=_useState2[0],setDebouncedValue=_useState2[1];useEffect(function(){// Update debounced value after delay\nvar handler=setTimeout(function(){setDebouncedValue(value);},delay);// Cancel the timeout if value changes (also on delay change or unmount)\n// This is how we prevent debounced value from updating if value is changed ...\n// .. within the delay period. Timeout gets cleared and restarted.\nreturn function(){clearTimeout(handler);};},[value,delay]);return debouncedValue;}","map":{"version":3,"sources":["C:/Users/marin/Desktop/bananaswap/src/hooks/useDebounce.ts"],"names":["useEffect","useState","useDebounce","value","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout"],"mappings":"iKAAA,OAASA,SAAT,CAAoBC,QAApB,KAAoC,OAApC,CAEA;AACA,cAAe,SAASC,CAAAA,WAAT,CAAwBC,KAAxB,CAAkCC,KAAlC,CAAoD,CACjE,cAA4CH,QAAQ,CAAIE,KAAJ,CAApD,wCAAOE,cAAP,eAAuBC,iBAAvB,eAEAN,SAAS,CAAC,UAAM,CACd;AACA,GAAMO,CAAAA,OAAO,CAAGC,UAAU,CAAC,UAAM,CAC/BF,iBAAiB,CAACH,KAAD,CAAjB,CACD,CAFyB,CAEvBC,KAFuB,CAA1B,CAIA;AACA;AACA;AACA,MAAO,WAAM,CACXK,YAAY,CAACF,OAAD,CAAZ,CACD,CAFD,CAGD,CAZQ,CAYN,CAACJ,KAAD,CAAQC,KAAR,CAZM,CAAT,CAcA,MAAOC,CAAAA,cAAP,CACD","sourcesContent":["import { useEffect, useState } from 'react'\r\n\r\n// modified from https://usehooks.com/useDebounce/\r\nexport default function useDebounce<T>(value: T, delay: number): T {\r\n  const [debouncedValue, setDebouncedValue] = useState<T>(value)\r\n\r\n  useEffect(() => {\r\n    // Update debounced value after delay\r\n    const handler = setTimeout(() => {\r\n      setDebouncedValue(value)\r\n    }, delay)\r\n\r\n    // Cancel the timeout if value changes (also on delay change or unmount)\r\n    // This is how we prevent debounced value from updating if value is changed ...\r\n    // .. within the delay period. Timeout gets cleared and restarted.\r\n    return () => {\r\n      clearTimeout(handler)\r\n    }\r\n  }, [value, delay])\r\n\r\n  return debouncedValue\r\n}\r\n"]},"metadata":{},"sourceType":"module"}