{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marin\\\\Documents\\\\Dev\\\\bananaswap\\\\moonbeam-uniswap\\\\uniswap-interface-moonbeam\\\\src\\\\pages\\\\Earn\\\\index.tsx\";\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { Text } from 'rebass';\nimport { useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport { ButtonPrimary } from '../../components/Button';\nimport { AutoColumn } from '../../components/Column';\nimport CurrencyInputPanel from '../../components/CurrencyInputPanel';\nimport { StakeTabs } from '../../components/NavigationTabs';\nimport { useActiveWeb3React } from '../../hooks';\nimport { useApproveCallbackFromTrade } from '../../hooks/useApproveCallback';\nimport useENSAddress from '../../hooks/useENSAddress';\nimport useToggledVersion, { Version } from '../../hooks/useToggledVersion';\nimport useWrapCallback, { WrapType } from '../../hooks/useWrapCallback';\nimport { Field } from '../../state/swap/actions';\nimport { useDerivedSwapInfo, useSwapActionHandlers, useSwapState } from '../../state/swap/hooks';\nimport { useUserSlippageTolerance } from '../../state/user/hooks';\nimport { maxAmountSpend } from '../../utils/maxAmountSpend';\nimport AppBody from '../AppBody';\nimport { toV2LiquidityToken, useTrackedTokenPairs } from '../../state/user/hooks';\nimport { useTokenBalancesWithLoadingIndicator } from '../../state/wallet/hooks';\nexport default function Swap() {\n  var _parsedAmounts$indepe, _parsedAmounts$indepe2, _parsedAmounts$depend, _parsedAmounts$depend2, _parsedAmounts$Field$;\n\n  const {\n    t\n  } = useTranslation();\n  const {\n    account\n  } = useActiveWeb3React(); // swap state\n\n  const {\n    independentField,\n    typedValue,\n    recipient\n  } = useSwapState();\n  const {\n    v2Trade,\n    currencyBalances,\n    parsedAmount,\n    currencies,\n    inputError: swapInputError\n  } = useDerivedSwapInfo();\n  const {\n    wrapType,\n    execute: onWrap,\n    inputError: wrapInputError\n  } = useWrapCallback(currencies[Field.INPUT], currencies[Field.OUTPUT], typedValue);\n  const showWrap = wrapType !== WrapType.NOT_APPLICABLE;\n  const {\n    address: recipientAddress\n  } = useENSAddress(recipient);\n  const toggledVersion = useToggledVersion();\n  const trade = showWrap ? undefined : {\n    [Version.v2]: v2Trade\n  }[toggledVersion];\n  const parsedAmounts = showWrap ? {\n    [Field.INPUT]: parsedAmount,\n    [Field.OUTPUT]: parsedAmount\n  } : {\n    [Field.INPUT]: independentField === Field.INPUT ? parsedAmount : trade === null || trade === void 0 ? void 0 : trade.inputAmount,\n    [Field.OUTPUT]: independentField === Field.OUTPUT ? parsedAmount : trade === null || trade === void 0 ? void 0 : trade.outputAmount\n  };\n  const {\n    onSwitchTokens,\n    onCurrencySelection,\n    onUserInput,\n    onChangeRecipient\n  } = useSwapActionHandlers();\n  const isValid = !swapInputError;\n  const dependentField = independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT;\n  const trackedTokenPairs = useTrackedTokenPairs();\n  const tokenPairsWithLiquidityTokens = useMemo(() => trackedTokenPairs.map(tokens => ({\n    liquidityToken: toV2LiquidityToken(tokens),\n    tokens\n  })), [trackedTokenPairs]);\n  const liquidityTokens = useMemo(() => tokenPairsWithLiquidityTokens.map(tpwlt => tpwlt.liquidityToken), [tokenPairsWithLiquidityTokens]);\n  const [v2PairsBalances, fetchingV2PairBalances] = useTokenBalancesWithLoadingIndicator(account !== null && account !== void 0 ? account : undefined, liquidityTokens); // fetch the reserves for all V2 pools in which the user has a balance\n\n  const liquidityTokensWithBalances = useMemo(() => tokenPairsWithLiquidityTokens.filter(({\n    liquidityToken\n  }) => {\n    var _v2PairsBalances$liqu;\n\n    return (_v2PairsBalances$liqu = v2PairsBalances[liquidityToken.address]) === null || _v2PairsBalances$liqu === void 0 ? void 0 : _v2PairsBalances$liqu.greaterThan('0');\n  }), [tokenPairsWithLiquidityTokens, v2PairsBalances]);\n  const formattedAmounts = {\n    [independentField]: typedValue,\n    [dependentField]: showWrap ? (_parsedAmounts$indepe = (_parsedAmounts$indepe2 = parsedAmounts[independentField]) === null || _parsedAmounts$indepe2 === void 0 ? void 0 : _parsedAmounts$indepe2.toExact()) !== null && _parsedAmounts$indepe !== void 0 ? _parsedAmounts$indepe : '' : (_parsedAmounts$depend = (_parsedAmounts$depend2 = parsedAmounts[dependentField]) === null || _parsedAmounts$depend2 === void 0 ? void 0 : _parsedAmounts$depend2.toSignificant(6)) !== null && _parsedAmounts$depend !== void 0 ? _parsedAmounts$depend : ''\n  };\n  const [allowedSlippage] = useUserSlippageTolerance(); // check whether the user has approved the router on the input token\n\n  const [approval, approveCallback] = useApproveCallbackFromTrade(trade, allowedSlippage); // check if user has gone through approval process, used to show two step buttons, reset on token change\n\n  const [approvalSubmitted, setApprovalSubmitted] = useState(false);\n  const handleInputSelect = useCallback(inputCurrency => {\n    setApprovalSubmitted(false); // reset 2 step UI for approvals\n\n    onCurrencySelection(Field.INPUT, inputCurrency);\n  }, [onCurrencySelection]);\n  const handleTypeInput = useCallback(value => {\n    onUserInput(Field.INPUT, value);\n  }, [onUserInput]);\n  const handleTypeOutput = useCallback(value => {\n    onUserInput(Field.OUTPUT, value);\n  }, [onUserInput]);\n  const maxAmountInput = maxAmountSpend(currencyBalances[Field.INPUT]);\n  const atMaxAmountInput = Boolean(maxAmountInput && ((_parsedAmounts$Field$ = parsedAmounts[Field.INPUT]) === null || _parsedAmounts$Field$ === void 0 ? void 0 : _parsedAmounts$Field$.equalTo(maxAmountInput)));\n  const handleMaxInput = useCallback(() => {\n    maxAmountInput && onUserInput(Field.INPUT, maxAmountInput.toExact());\n  }, [maxAmountInput, onUserInput]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AppBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(StakeTabs, {\n    active: 'earn',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 1\n    }\n  }), /*#__PURE__*/React.createElement(AutoColumn, {\n    gap: \"lg\",\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 1\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"http://localhost:3000/bananascoin.png\",\n    width: \"150px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 3\n    }\n  }), /*#__PURE__*/React.createElement(Text, {\n    textAlign: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 1\n    }\n  }, \"Stake your LP tokens to get extra $BANANAS rewards\"), /*#__PURE__*/React.createElement(CurrencyInputPanel, {\n    label: independentField === Field.OUTPUT && !showWrap && trade ? 'From (estimated)' : 'From',\n    value: formattedAmounts[Field.INPUT],\n    currency: currencies[Field.INPUT],\n    onUserInput: handleTypeInput,\n    onMax: handleMaxInput,\n    onCurrencySelect: handleInputSelect\n    /*\r\n    otherCurrency={currencies[Field.OUTPUT]}\r\n    showMaxButton={!atMaxAmountInput}\r\n    */\n    ,\n    id: \"swap-currency-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 1\n    }\n  }), /*#__PURE__*/React.createElement(ButtonPrimary, {\n    id: \"join-pool-button\",\n    as: Link,\n    style: {\n      padding: 16\n    },\n    to: \"/add/ETH\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    fontWeight: 500,\n    fontSize: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }\n  }, t('addLiquidity'))))));\n} //465: {betterTradeLinkVersion && <BetterTradeLink version={betterTradeLinkVersion} />}","map":{"version":3,"sources":["C:/Users/marin/Documents/Dev/bananaswap/moonbeam-uniswap/uniswap-interface-moonbeam/src/pages/Earn/index.tsx"],"names":["React","useCallback","useMemo","useState","Text","useTranslation","Link","ButtonPrimary","AutoColumn","CurrencyInputPanel","StakeTabs","useActiveWeb3React","useApproveCallbackFromTrade","useENSAddress","useToggledVersion","Version","useWrapCallback","WrapType","Field","useDerivedSwapInfo","useSwapActionHandlers","useSwapState","useUserSlippageTolerance","maxAmountSpend","AppBody","toV2LiquidityToken","useTrackedTokenPairs","useTokenBalancesWithLoadingIndicator","Swap","t","account","independentField","typedValue","recipient","v2Trade","currencyBalances","parsedAmount","currencies","inputError","swapInputError","wrapType","execute","onWrap","wrapInputError","INPUT","OUTPUT","showWrap","NOT_APPLICABLE","address","recipientAddress","toggledVersion","trade","undefined","v2","parsedAmounts","inputAmount","outputAmount","onSwitchTokens","onCurrencySelection","onUserInput","onChangeRecipient","isValid","dependentField","trackedTokenPairs","tokenPairsWithLiquidityTokens","map","tokens","liquidityToken","liquidityTokens","tpwlt","v2PairsBalances","fetchingV2PairBalances","liquidityTokensWithBalances","filter","greaterThan","formattedAmounts","toExact","toSignificant","allowedSlippage","approval","approveCallback","approvalSubmitted","setApprovalSubmitted","handleInputSelect","inputCurrency","handleTypeInput","value","handleTypeOutput","maxAmountInput","atMaxAmountInput","Boolean","equalTo","handleMaxInput","padding"],"mappings":"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","sourcesContent":["import { CurrencyAmount, JSBI, Token, Trade } from 'moonbeamswap'\r\nimport React, { useCallback, useContext, useEffect, useMemo, useState } from 'react'\r\nimport { ArrowDown } from 'react-feather'\r\nimport ReactGA from 'react-ga'\r\nimport { Text } from 'rebass'\r\nimport { useTranslation } from 'react-i18next'\r\nimport { Link } from 'react-router-dom'\r\nimport { ThemeContext } from 'styled-components'\r\nimport AddressInputPanel from '../../components/AddressInputPanel'\r\nimport { ButtonError, ButtonLight, ButtonPrimary, ButtonConfirmed } from '../../components/Button'\r\nimport Card, { GreyCard } from '../../components/Card'\r\nimport { AutoColumn } from '../../components/Column'\r\nimport ConfirmSwapModal from '../../components/swap/ConfirmSwapModal'\r\nimport CurrencyInputPanel from '../../components/CurrencyInputPanel'\r\nimport { StakeTabs } from '../../components/NavigationTabs'\r\nimport { AutoRow, RowBetween } from '../../components/Row'\r\nimport AdvancedSwapDetailsDropdown from '../../components/swap/AdvancedSwapDetailsDropdown'\r\nimport confirmPriceImpactWithoutFee from '../../components/swap/confirmPriceImpactWithoutFee'\r\nimport { ArrowWrapper, BottomGrouping, SwapCallbackError, Wrapper } from '../../components/swap/styleds'\r\nimport TradePrice from '../../components/swap/TradePrice'\r\nimport TokenWarningModal from '../../components/TokenWarningModal'\r\nimport ProgressSteps from '../../components/ProgressSteps'\r\n\r\nimport { INITIAL_ALLOWED_SLIPPAGE } from '../../constants'\r\nimport { useActiveWeb3React } from '../../hooks'\r\nimport { useCurrency } from '../../hooks/Tokens'\r\nimport { ApprovalState, useApproveCallbackFromTrade } from '../../hooks/useApproveCallback'\r\nimport useENSAddress from '../../hooks/useENSAddress'\r\nimport { useSwapCallback } from '../../hooks/useSwapCallback'\r\nimport useToggledVersion, { Version } from '../../hooks/useToggledVersion'\r\nimport useWrapCallback, { WrapType } from '../../hooks/useWrapCallback'\r\nimport { useToggleSettingsMenu, useWalletModalToggle } from '../../state/application/hooks'\r\nimport { Field } from '../../state/swap/actions'\r\nimport {\r\n  useDefaultsFromURLSearch,\r\n  useDerivedSwapInfo,\r\n  useSwapActionHandlers,\r\n  useSwapState\r\n} from '../../state/swap/hooks'\r\nimport { useExpertModeManager, useUserDeadline, useUserSlippageTolerance } from '../../state/user/hooks'\r\nimport { LinkStyledButton, TYPE } from '../../theme'\r\nimport { maxAmountSpend } from '../../utils/maxAmountSpend'\r\nimport { computeTradePriceBreakdown, warningSeverity } from '../../utils/prices'\r\nimport AppBody from '../AppBody'\r\nimport { ClickableText } from '../Pool/styleds'\r\nimport Loader from '../../components/Loader'\r\nimport { toV2LiquidityToken, useTrackedTokenPairs } from '../../state/user/hooks'\r\nimport { usePairs } from '../../data/Reserves'\r\nimport { useTokenBalancesWithLoadingIndicator } from '../../state/wallet/hooks'\r\nimport { Pair } from 'moonbeamswap'\r\n\r\nexport default function Swap() {\r\n  const { t } = useTranslation()\r\n  const { account } = useActiveWeb3React()\r\n\r\n    // swap state\r\n    const { independentField, typedValue, recipient } = useSwapState()\r\n    const { v2Trade, currencyBalances, parsedAmount, currencies, inputError: swapInputError } = useDerivedSwapInfo()\r\n    const { wrapType, execute: onWrap, inputError: wrapInputError } = useWrapCallback(\r\n      currencies[Field.INPUT],\r\n      currencies[Field.OUTPUT],\r\n      typedValue\r\n    )\r\n    const showWrap: boolean = wrapType !== WrapType.NOT_APPLICABLE\r\n    const { address: recipientAddress } = useENSAddress(recipient)\r\n    const toggledVersion = useToggledVersion()\r\n    const trade = showWrap\r\n      ? undefined\r\n      : {\r\n          [Version.v2]: v2Trade\r\n        }[toggledVersion]\r\n  \r\n    const parsedAmounts = showWrap\r\n      ? {\r\n          [Field.INPUT]: parsedAmount,\r\n          [Field.OUTPUT]: parsedAmount\r\n        }\r\n      : {\r\n          [Field.INPUT]: independentField === Field.INPUT ? parsedAmount : trade?.inputAmount,\r\n          [Field.OUTPUT]: independentField === Field.OUTPUT ? parsedAmount : trade?.outputAmount\r\n        }\r\n  \r\n    const { onSwitchTokens, onCurrencySelection, onUserInput, onChangeRecipient } = useSwapActionHandlers()\r\n    const isValid = !swapInputError\r\n    const dependentField: Field = independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT\r\n\r\n  const trackedTokenPairs = useTrackedTokenPairs()\r\n  const tokenPairsWithLiquidityTokens = useMemo(\r\n    () => trackedTokenPairs.map(tokens => ({ liquidityToken: toV2LiquidityToken(tokens), tokens })),\r\n    [trackedTokenPairs]\r\n  )\r\n  const liquidityTokens = useMemo(() => tokenPairsWithLiquidityTokens.map(tpwlt => tpwlt.liquidityToken), [\r\n    tokenPairsWithLiquidityTokens\r\n  ])\r\n  const [v2PairsBalances, fetchingV2PairBalances] = useTokenBalancesWithLoadingIndicator(\r\n    account ?? undefined,\r\n    liquidityTokens\r\n  )\r\n\r\n  // fetch the reserves for all V2 pools in which the user has a balance\r\n  const liquidityTokensWithBalances = useMemo(\r\n    () =>\r\n      tokenPairsWithLiquidityTokens.filter(({ liquidityToken }) =>\r\n        v2PairsBalances[liquidityToken.address]?.greaterThan('0')\r\n      ),\r\n    [tokenPairsWithLiquidityTokens, v2PairsBalances]\r\n  )\r\n\r\n  const formattedAmounts = {\r\n    [independentField]: typedValue,\r\n    [dependentField]: showWrap\r\n      ? parsedAmounts[independentField]?.toExact() ?? ''\r\n      : parsedAmounts[dependentField]?.toSignificant(6) ?? ''\r\n  }\r\n  const [allowedSlippage] = useUserSlippageTolerance()\r\n    // check whether the user has approved the router on the input token\r\n    const [approval, approveCallback] = useApproveCallbackFromTrade(trade, allowedSlippage)\r\n\r\n    // check if user has gone through approval process, used to show two step buttons, reset on token change\r\n    const [approvalSubmitted, setApprovalSubmitted] = useState<boolean>(false)\r\n\r\n  const handleInputSelect = useCallback(\r\n    inputCurrency => {\r\n      setApprovalSubmitted(false) // reset 2 step UI for approvals\r\n      onCurrencySelection(Field.INPUT, inputCurrency)\r\n    },\r\n    [onCurrencySelection]\r\n  )\r\n\r\n  const handleTypeInput = useCallback(\r\n    (value: string) => {\r\n      onUserInput(Field.INPUT, value)\r\n    },\r\n    [onUserInput]\r\n  )\r\n  const handleTypeOutput = useCallback(\r\n    (value: string) => {\r\n      onUserInput(Field.OUTPUT, value)\r\n    },\r\n    [onUserInput]\r\n  )\r\n  const maxAmountInput: CurrencyAmount | undefined = maxAmountSpend(currencyBalances[Field.INPUT])\r\n  const atMaxAmountInput = Boolean(maxAmountInput && parsedAmounts[Field.INPUT]?.equalTo(maxAmountInput))\r\n  const handleMaxInput = useCallback(() => {\r\n    maxAmountInput && onUserInput(Field.INPUT, maxAmountInput.toExact())\r\n  }, [maxAmountInput, onUserInput])\r\n\r\n\r\n  return (\r\n    <>\r\n     <AppBody>\r\n<StakeTabs active={'earn'} />\r\n<AutoColumn gap=\"lg\" justify=\"center\">\r\n  <img src=\"http://localhost:3000/bananascoin.png\" width='150px'></img>\r\n<Text textAlign=\"center\">Stake your LP tokens to get extra $BANANAS rewards</Text>\r\n<CurrencyInputPanel\r\n\r\n              label={independentField === Field.OUTPUT && !showWrap && trade ? 'From (estimated)' : 'From'}\r\n           \r\n             value={formattedAmounts[Field.INPUT]}\r\n                \r\n              currency={currencies[Field.INPUT]}\r\n            \r\n              onUserInput={handleTypeInput}\r\n          \r\n              onMax={handleMaxInput}\r\n              \r\n              onCurrencySelect={handleInputSelect}\r\n                    /*\r\n              otherCurrency={currencies[Field.OUTPUT]}\r\n              showMaxButton={!atMaxAmountInput}\r\n*/\r\n\r\n              id=\"swap-currency-input\"\r\n            />\r\n    <ButtonPrimary id=\"join-pool-button\" as={Link} style={{ padding: 16 }} to=\"/add/ETH\">\r\n      <Text fontWeight={500} fontSize={20}>\r\n        {t('addLiquidity')}\r\n      </Text>\r\n    </ButtonPrimary>\r\n    </AutoColumn>\r\n</AppBody>\r\n    </>\r\n  )\r\n}\r\n\r\n//465: {betterTradeLinkVersion && <BetterTradeLink version={betterTradeLinkVersion} />}\r\n"]},"metadata":{},"sourceType":"module"}