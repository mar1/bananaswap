{"ast":null,"code":"import{useEffect,useRef}from'react';export function useOnClickOutside(node,handler){var handlerRef=useRef(handler);useEffect(function(){handlerRef.current=handler;},[handler]);useEffect(function(){var handleClickOutside=function handleClickOutside(e){var _node$current$contain,_node$current;if((_node$current$contain=(_node$current=node.current)===null||_node$current===void 0?void 0:_node$current.contains(e.target))!==null&&_node$current$contain!==void 0?_node$current$contain:false){return;}if(handlerRef.current)handlerRef.current();};document.addEventListener('mousedown',handleClickOutside);return function(){document.removeEventListener('mousedown',handleClickOutside);};},[node]);}","map":{"version":3,"sources":["C:/Users/marin/Desktop/bananaswap/src/hooks/useOnClickOutside.tsx"],"names":["useEffect","useRef","useOnClickOutside","node","handler","handlerRef","current","handleClickOutside","e","contains","target","document","addEventListener","removeEventListener"],"mappings":"AAAA,OAAoBA,SAApB,CAA+BC,MAA/B,KAA6C,OAA7C,CAEA,MAAO,SAASC,CAAAA,iBAAT,CACLC,IADK,CAELC,OAFK,CAGL,CACA,GAAMC,CAAAA,UAAU,CAAGJ,MAAM,CAA2BG,OAA3B,CAAzB,CACAJ,SAAS,CAAC,UAAM,CACdK,UAAU,CAACC,OAAX,CAAqBF,OAArB,CACD,CAFQ,CAEN,CAACA,OAAD,CAFM,CAAT,CAIAJ,SAAS,CAAC,UAAM,CACd,GAAMO,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACC,CAAD,CAAmB,yCAC5C,yCAAIL,IAAI,CAACG,OAAT,wCAAI,cAAcG,QAAd,CAAuBD,CAAC,CAACE,MAAzB,CAAJ,+DAAgD,KAAhD,CAAuD,CACrD,OACD,CACD,GAAIL,UAAU,CAACC,OAAf,CAAwBD,UAAU,CAACC,OAAX,GACzB,CALD,CAOAK,QAAQ,CAACC,gBAAT,CAA0B,WAA1B,CAAuCL,kBAAvC,EAEA,MAAO,WAAM,CACXI,QAAQ,CAACE,mBAAT,CAA6B,WAA7B,CAA0CN,kBAA1C,EACD,CAFD,CAGD,CAbQ,CAaN,CAACJ,IAAD,CAbM,CAAT,CAcD","sourcesContent":["import { RefObject, useEffect, useRef } from 'react'\r\n\r\nexport function useOnClickOutside<T extends HTMLElement>(\r\n  node: RefObject<T | undefined>,\r\n  handler: undefined | (() => void)\r\n) {\r\n  const handlerRef = useRef<undefined | (() => void)>(handler)\r\n  useEffect(() => {\r\n    handlerRef.current = handler\r\n  }, [handler])\r\n\r\n  useEffect(() => {\r\n    const handleClickOutside = (e: MouseEvent) => {\r\n      if (node.current?.contains(e.target as Node) ?? false) {\r\n        return\r\n      }\r\n      if (handlerRef.current) handlerRef.current()\r\n    }\r\n\r\n    document.addEventListener('mousedown', handleClickOutside)\r\n\r\n    return () => {\r\n      document.removeEventListener('mousedown', handleClickOutside)\r\n    }\r\n  }, [node])\r\n}\r\n"]},"metadata":{},"sourceType":"module"}