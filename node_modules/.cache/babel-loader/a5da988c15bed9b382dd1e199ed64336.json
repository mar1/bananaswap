{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marin\\\\Documents\\\\Dev\\\\bananaswap\\\\moonbeam-uniswap\\\\uniswap-interface-moonbeam\\\\src\\\\components\\\\swap\\\\ConfirmSwapModal.tsx\";\nimport { currencyEquals } from 'moonbeamswap';\nimport React, { useCallback, useMemo } from 'react';\nimport TransactionConfirmationModal, { ConfirmationModalContent, TransactionErrorContent } from '../TransactionConfirmationModal';\nimport SwapModalFooter from './SwapModalFooter';\nimport SwapModalHeader from './SwapModalHeader';\n/**\r\n * Returns true if the trade requires a confirmation of details before we can submit it\r\n * @param tradeA trade A\r\n * @param tradeB trade B\r\n */\n\nfunction tradeMeaningfullyDiffers(tradeA, tradeB) {\n  return tradeA.tradeType !== tradeB.tradeType || !currencyEquals(tradeA.inputAmount.currency, tradeB.inputAmount.currency) || !tradeA.inputAmount.equalTo(tradeB.inputAmount) || !currencyEquals(tradeA.outputAmount.currency, tradeB.outputAmount.currency) || !tradeA.outputAmount.equalTo(tradeB.outputAmount);\n}\n\nexport default function ConfirmSwapModal({\n  trade,\n  originalTrade,\n  onAcceptChanges,\n  allowedSlippage,\n  onConfirm,\n  onDismiss,\n  recipient,\n  swapErrorMessage,\n  isOpen,\n  attemptingTxn,\n  txHash\n}) {\n  var _trade$inputAmount, _trade$inputAmount2, _trade$inputAmount2$c, _trade$outputAmount, _trade$outputAmount2, _trade$outputAmount2$;\n\n  const showAcceptChanges = useMemo(() => Boolean(trade && originalTrade && tradeMeaningfullyDiffers(trade, originalTrade)), [originalTrade, trade]);\n  const modalHeader = useCallback(() => {\n    return trade ? /*#__PURE__*/React.createElement(SwapModalHeader, {\n      trade: trade,\n      allowedSlippage: allowedSlippage,\n      recipient: recipient,\n      showAcceptChanges: showAcceptChanges,\n      onAcceptChanges: onAcceptChanges,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 7\n      }\n    }) : null;\n  }, [allowedSlippage, onAcceptChanges, recipient, showAcceptChanges, trade]);\n  const modalBottom = useCallback(() => {\n    return trade ? /*#__PURE__*/React.createElement(SwapModalFooter, {\n      onConfirm: onConfirm,\n      trade: trade,\n      disabledConfirm: showAcceptChanges,\n      swapErrorMessage: swapErrorMessage,\n      allowedSlippage: allowedSlippage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }\n    }) : null;\n  }, [allowedSlippage, onConfirm, showAcceptChanges, swapErrorMessage, trade]); // text to show while loading\n\n  const pendingText = `Swapping ${trade === null || trade === void 0 ? void 0 : (_trade$inputAmount = trade.inputAmount) === null || _trade$inputAmount === void 0 ? void 0 : _trade$inputAmount.toSignificant(6)} ${trade === null || trade === void 0 ? void 0 : (_trade$inputAmount2 = trade.inputAmount) === null || _trade$inputAmount2 === void 0 ? void 0 : (_trade$inputAmount2$c = _trade$inputAmount2.currency) === null || _trade$inputAmount2$c === void 0 ? void 0 : _trade$inputAmount2$c.symbol} for ${trade === null || trade === void 0 ? void 0 : (_trade$outputAmount = trade.outputAmount) === null || _trade$outputAmount === void 0 ? void 0 : _trade$outputAmount.toSignificant(6)} ${trade === null || trade === void 0 ? void 0 : (_trade$outputAmount2 = trade.outputAmount) === null || _trade$outputAmount2 === void 0 ? void 0 : (_trade$outputAmount2$ = _trade$outputAmount2.currency) === null || _trade$outputAmount2$ === void 0 ? void 0 : _trade$outputAmount2$.symbol}`;\n  const confirmationContent = useCallback(() => swapErrorMessage ? /*#__PURE__*/React.createElement(TransactionErrorContent, {\n    onDismiss: onDismiss,\n    message: swapErrorMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(ConfirmationModalContent, {\n    title: \"Confirm Swap\",\n    onDismiss: onDismiss,\n    topContent: modalHeader,\n    bottomContent: modalBottom,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }), [onDismiss, modalBottom, modalHeader, swapErrorMessage]);\n  return /*#__PURE__*/React.createElement(TransactionConfirmationModal, {\n    isOpen: isOpen,\n    onDismiss: onDismiss,\n    attemptingTxn: attemptingTxn,\n    hash: txHash,\n    content: confirmationContent,\n    pendingText: pendingText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 5\n    }\n  });\n}","map":{"version":3,"sources":["C:/Users/marin/Documents/Dev/bananaswap/moonbeam-uniswap/uniswap-interface-moonbeam/src/components/swap/ConfirmSwapModal.tsx"],"names":["currencyEquals","React","useCallback","useMemo","TransactionConfirmationModal","ConfirmationModalContent","TransactionErrorContent","SwapModalFooter","SwapModalHeader","tradeMeaningfullyDiffers","tradeA","tradeB","tradeType","inputAmount","currency","equalTo","outputAmount","ConfirmSwapModal","trade","originalTrade","onAcceptChanges","allowedSlippage","onConfirm","onDismiss","recipient","swapErrorMessage","isOpen","attemptingTxn","txHash","showAcceptChanges","Boolean","modalHeader","modalBottom","pendingText","toSignificant","symbol","confirmationContent"],"mappings":"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","sourcesContent":["import { currencyEquals, Trade } from 'moonbeamswap'\r\nimport React, { useCallback, useMemo } from 'react'\r\nimport TransactionConfirmationModal, {\r\n  ConfirmationModalContent,\r\n  TransactionErrorContent\r\n} from '../TransactionConfirmationModal'\r\nimport SwapModalFooter from './SwapModalFooter'\r\nimport SwapModalHeader from './SwapModalHeader'\r\n\r\n/**\r\n * Returns true if the trade requires a confirmation of details before we can submit it\r\n * @param tradeA trade A\r\n * @param tradeB trade B\r\n */\r\nfunction tradeMeaningfullyDiffers(tradeA: Trade, tradeB: Trade): boolean {\r\n  return (\r\n    tradeA.tradeType !== tradeB.tradeType ||\r\n    !currencyEquals(tradeA.inputAmount.currency, tradeB.inputAmount.currency) ||\r\n    !tradeA.inputAmount.equalTo(tradeB.inputAmount) ||\r\n    !currencyEquals(tradeA.outputAmount.currency, tradeB.outputAmount.currency) ||\r\n    !tradeA.outputAmount.equalTo(tradeB.outputAmount)\r\n  )\r\n}\r\n\r\nexport default function ConfirmSwapModal({\r\n  trade,\r\n  originalTrade,\r\n  onAcceptChanges,\r\n  allowedSlippage,\r\n  onConfirm,\r\n  onDismiss,\r\n  recipient,\r\n  swapErrorMessage,\r\n  isOpen,\r\n  attemptingTxn,\r\n  txHash\r\n}: {\r\n  isOpen: boolean\r\n  trade: Trade | undefined\r\n  originalTrade: Trade | undefined\r\n  attemptingTxn: boolean\r\n  txHash: string | undefined\r\n  recipient: string | null\r\n  allowedSlippage: number\r\n  onAcceptChanges: () => void\r\n  onConfirm: () => void\r\n  swapErrorMessage: string | undefined\r\n  onDismiss: () => void\r\n}) {\r\n  const showAcceptChanges = useMemo(\r\n    () => Boolean(trade && originalTrade && tradeMeaningfullyDiffers(trade, originalTrade)),\r\n    [originalTrade, trade]\r\n  )\r\n\r\n  const modalHeader = useCallback(() => {\r\n    return trade ? (\r\n      <SwapModalHeader\r\n        trade={trade}\r\n        allowedSlippage={allowedSlippage}\r\n        recipient={recipient}\r\n        showAcceptChanges={showAcceptChanges}\r\n        onAcceptChanges={onAcceptChanges}\r\n      />\r\n    ) : null\r\n  }, [allowedSlippage, onAcceptChanges, recipient, showAcceptChanges, trade])\r\n\r\n  const modalBottom = useCallback(() => {\r\n    return trade ? (\r\n      <SwapModalFooter\r\n        onConfirm={onConfirm}\r\n        trade={trade}\r\n        disabledConfirm={showAcceptChanges}\r\n        swapErrorMessage={swapErrorMessage}\r\n        allowedSlippage={allowedSlippage}\r\n      />\r\n    ) : null\r\n  }, [allowedSlippage, onConfirm, showAcceptChanges, swapErrorMessage, trade])\r\n\r\n  // text to show while loading\r\n  const pendingText = `Swapping ${trade?.inputAmount?.toSignificant(6)} ${\r\n    trade?.inputAmount?.currency?.symbol\r\n  } for ${trade?.outputAmount?.toSignificant(6)} ${trade?.outputAmount?.currency?.symbol}`\r\n\r\n  const confirmationContent = useCallback(\r\n    () =>\r\n      swapErrorMessage ? (\r\n        <TransactionErrorContent onDismiss={onDismiss} message={swapErrorMessage} />\r\n      ) : (\r\n        <ConfirmationModalContent\r\n          title=\"Confirm Swap\"\r\n          onDismiss={onDismiss}\r\n          topContent={modalHeader}\r\n          bottomContent={modalBottom}\r\n        />\r\n      ),\r\n    [onDismiss, modalBottom, modalHeader, swapErrorMessage]\r\n  )\r\n\r\n  return (\r\n    <TransactionConfirmationModal\r\n      isOpen={isOpen}\r\n      onDismiss={onDismiss}\r\n      attemptingTxn={attemptingTxn}\r\n      hash={txHash}\r\n      content={confirmationContent}\r\n      pendingText={pendingText}\r\n    />\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}