{"ast":null,"code":"import{CurrencyAmount,DEV,JSBI,Token,TokenAmount}from'moonbeamswap';import{useMemo}from'react';import ERC20_INTERFACE from'../../constants/abis/erc20';import{useAllTokens}from'../../hooks/Tokens';import{useActiveWeb3React}from'../../hooks';import{useMulticallContract}from'../../hooks/useContract';import{isAddress}from'../../utils';import{useSingleContractMultipleData,useMultipleContractSingleData}from'../multicall/hooks';/**\r\n * Returns a map of the given addresses to their eventually consistent DEV balances.\r\n */export function useETHBalances(uncheckedAddresses){var multicallContract=useMulticallContract();var addresses=useMemo(function(){return uncheckedAddresses?uncheckedAddresses.map(isAddress).filter(function(a){return a!==false;}).sort():[];},[uncheckedAddresses]);var results=useSingleContractMultipleData(multicallContract,'getEthBalance',addresses.map(function(address){return[address];}));return useMemo(function(){return addresses.reduce(function(memo,address,i){var _results$i,_results$i$result;var value=results===null||results===void 0?void 0:(_results$i=results[i])===null||_results$i===void 0?void 0:(_results$i$result=_results$i.result)===null||_results$i$result===void 0?void 0:_results$i$result[0];if(value)memo[address]=CurrencyAmount.ether(JSBI.BigInt(value.toString()));return memo;},{});},[addresses,results]);}/**\r\n * Returns a map of token addresses to their eventually consistent token balances for a single account.\r\n */export function useTokenBalancesWithLoadingIndicator(address,tokens){var validatedTokens=useMemo(function(){var _tokens$filter;return(_tokens$filter=tokens===null||tokens===void 0?void 0:tokens.filter(function(t){return isAddress(t===null||t===void 0?void 0:t.address)!==false;}))!==null&&_tokens$filter!==void 0?_tokens$filter:[];},[tokens]);var validatedTokenAddresses=useMemo(function(){return validatedTokens.map(function(vt){return vt.address;});},[validatedTokens]);var balances=useMultipleContractSingleData(validatedTokenAddresses,ERC20_INTERFACE,'balanceOf',[address]);var anyLoading=useMemo(function(){return balances.some(function(callState){return callState.loading;});},[balances]);return[useMemo(function(){return address&&validatedTokens.length>0?validatedTokens.reduce(function(memo,token,i){var _balances$i,_balances$i$result;var value=balances===null||balances===void 0?void 0:(_balances$i=balances[i])===null||_balances$i===void 0?void 0:(_balances$i$result=_balances$i.result)===null||_balances$i$result===void 0?void 0:_balances$i$result[0];var amount=value?JSBI.BigInt(value.toString()):undefined;if(amount){memo[token.address]=new TokenAmount(token,amount);}return memo;},{}):{};},[address,validatedTokens,balances]),anyLoading];}export function useTokenBalances(address,tokens){return useTokenBalancesWithLoadingIndicator(address,tokens)[0];}// get the balance for a single token/account combo\nexport function useTokenBalance(account,token){var tokenBalances=useTokenBalances(account,[token]);if(!token)return undefined;return tokenBalances[token.address];}export function useCurrencyBalances(account,currencies){var tokens=useMemo(function(){var _currencies$filter;return(_currencies$filter=currencies===null||currencies===void 0?void 0:currencies.filter(function(currency){return currency instanceof Token;}))!==null&&_currencies$filter!==void 0?_currencies$filter:[];},[currencies]);var tokenBalances=useTokenBalances(account,tokens);var containsETH=useMemo(function(){var _currencies$some;return(_currencies$some=currencies===null||currencies===void 0?void 0:currencies.some(function(currency){return currency===DEV;}))!==null&&_currencies$some!==void 0?_currencies$some:false;},[currencies]);var ethBalance=useETHBalances(containsETH?[account]:[]);return useMemo(function(){var _currencies$map;return(_currencies$map=currencies===null||currencies===void 0?void 0:currencies.map(function(currency){if(!account||!currency)return undefined;if(currency instanceof Token){return tokenBalances[currency.address];}if(currency===DEV)return ethBalance[account];return undefined;}))!==null&&_currencies$map!==void 0?_currencies$map:[];},[account,currencies,ethBalance,tokenBalances]);}export function useCurrencyBalance(account,currency){return useCurrencyBalances(account,[currency])[0];}// mimics useAllBalances\nexport function useAllTokenBalances(){var _useActiveWeb3React=useActiveWeb3React(),account=_useActiveWeb3React.account;var allTokens=useAllTokens();var allTokensArray=useMemo(function(){return Object.values(allTokens!==null&&allTokens!==void 0?allTokens:{});},[allTokens]);var balances=useTokenBalances(account!==null&&account!==void 0?account:undefined,allTokensArray);return balances!==null&&balances!==void 0?balances:{};}","map":{"version":3,"sources":["C:/Users/marin/Desktop/bananaswap/src/state/wallet/hooks.ts"],"names":["CurrencyAmount","DEV","JSBI","Token","TokenAmount","useMemo","ERC20_INTERFACE","useAllTokens","useActiveWeb3React","useMulticallContract","isAddress","useSingleContractMultipleData","useMultipleContractSingleData","useETHBalances","uncheckedAddresses","multicallContract","addresses","map","filter","a","sort","results","address","reduce","memo","i","value","result","ether","BigInt","toString","useTokenBalancesWithLoadingIndicator","tokens","validatedTokens","t","validatedTokenAddresses","vt","balances","anyLoading","some","callState","loading","length","token","amount","undefined","useTokenBalances","useTokenBalance","account","tokenBalances","useCurrencyBalances","currencies","currency","containsETH","ethBalance","useCurrencyBalance","useAllTokenBalances","allTokens","allTokensArray","Object","values"],"mappings":"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","sourcesContent":["import { Currency, CurrencyAmount, DEV, JSBI, Token, TokenAmount } from 'moonbeamswap'\r\nimport { useMemo } from 'react'\r\nimport ERC20_INTERFACE from '../../constants/abis/erc20'\r\nimport { useAllTokens } from '../../hooks/Tokens'\r\nimport { useActiveWeb3React } from '../../hooks'\r\nimport { useMulticallContract } from '../../hooks/useContract'\r\nimport { isAddress } from '../../utils'\r\nimport { useSingleContractMultipleData, useMultipleContractSingleData } from '../multicall/hooks'\r\n\r\n/**\r\n * Returns a map of the given addresses to their eventually consistent DEV balances.\r\n */\r\nexport function useETHBalances(\r\n  uncheckedAddresses?: (string | undefined)[]\r\n): { [address: string]: CurrencyAmount | undefined } {\r\n  const multicallContract = useMulticallContract()\r\n\r\n  const addresses: string[] = useMemo(\r\n    () =>\r\n      uncheckedAddresses\r\n        ? uncheckedAddresses\r\n            .map(isAddress)\r\n            .filter((a): a is string => a !== false)\r\n            .sort()\r\n        : [],\r\n    [uncheckedAddresses]\r\n  )\r\n\r\n  const results = useSingleContractMultipleData(\r\n    multicallContract,\r\n    'getEthBalance',\r\n    addresses.map(address => [address])\r\n  )\r\n\r\n  return useMemo(\r\n    () =>\r\n      addresses.reduce<{ [address: string]: CurrencyAmount }>((memo, address, i) => {\r\n        const value = results?.[i]?.result?.[0]\r\n        if (value) memo[address] = CurrencyAmount.ether(JSBI.BigInt(value.toString()))\r\n        return memo\r\n      }, {}),\r\n    [addresses, results]\r\n  )\r\n}\r\n\r\n/**\r\n * Returns a map of token addresses to their eventually consistent token balances for a single account.\r\n */\r\nexport function useTokenBalancesWithLoadingIndicator(\r\n  address?: string,\r\n  tokens?: (Token | undefined)[]\r\n): [{ [tokenAddress: string]: TokenAmount | undefined }, boolean] {\r\n  const validatedTokens: Token[] = useMemo(\r\n    () => tokens?.filter((t?: Token): t is Token => isAddress(t?.address) !== false) ?? [],\r\n    [tokens]\r\n  )\r\n\r\n  const validatedTokenAddresses = useMemo(() => validatedTokens.map(vt => vt.address), [validatedTokens])\r\n\r\n  const balances = useMultipleContractSingleData(validatedTokenAddresses, ERC20_INTERFACE, 'balanceOf', [address])\r\n\r\n  const anyLoading: boolean = useMemo(() => balances.some(callState => callState.loading), [balances])\r\n\r\n  return [\r\n    useMemo(\r\n      () =>\r\n        address && validatedTokens.length > 0\r\n          ? validatedTokens.reduce<{ [tokenAddress: string]: TokenAmount | undefined }>((memo, token, i) => {\r\n              const value = balances?.[i]?.result?.[0]\r\n              const amount = value ? JSBI.BigInt(value.toString()) : undefined\r\n              if (amount) {\r\n                memo[token.address] = new TokenAmount(token, amount)\r\n              }\r\n              return memo\r\n            }, {})\r\n          : {},\r\n      [address, validatedTokens, balances]\r\n    ),\r\n    anyLoading\r\n  ]\r\n}\r\n\r\nexport function useTokenBalances(\r\n  address?: string,\r\n  tokens?: (Token | undefined)[]\r\n): { [tokenAddress: string]: TokenAmount | undefined } {\r\n  return useTokenBalancesWithLoadingIndicator(address, tokens)[0]\r\n}\r\n\r\n// get the balance for a single token/account combo\r\nexport function useTokenBalance(account?: string, token?: Token): TokenAmount | undefined {\r\n  const tokenBalances = useTokenBalances(account, [token])\r\n  if (!token) return undefined\r\n  return tokenBalances[token.address]\r\n}\r\n\r\nexport function useCurrencyBalances(\r\n  account?: string,\r\n  currencies?: (Currency | undefined)[]\r\n): (CurrencyAmount | undefined)[] {\r\n  const tokens = useMemo(() => currencies?.filter((currency): currency is Token => currency instanceof Token) ?? [], [\r\n    currencies\r\n  ])\r\n\r\n  const tokenBalances = useTokenBalances(account, tokens)\r\n  const containsETH: boolean = useMemo(() => currencies?.some(currency => currency === DEV) ?? false, [currencies])\r\n  const ethBalance = useETHBalances(containsETH ? [account] : [])\r\n\r\n  return useMemo(\r\n    () =>\r\n      currencies?.map(currency => {\r\n        if (!account || !currency) return undefined\r\n        if (currency instanceof Token) {\r\n          return tokenBalances[currency.address]\r\n        }\r\n        if (currency === DEV) return ethBalance[account]\r\n        return undefined\r\n      }) ?? [],\r\n    [account, currencies, ethBalance, tokenBalances]\r\n  )\r\n}\r\n\r\nexport function useCurrencyBalance(account?: string, currency?: Currency): CurrencyAmount | undefined {\r\n  return useCurrencyBalances(account, [currency])[0]\r\n}\r\n\r\n// mimics useAllBalances\r\nexport function useAllTokenBalances(): { [tokenAddress: string]: TokenAmount | undefined } {\r\n  const { account } = useActiveWeb3React()\r\n  const allTokens = useAllTokens()\r\n  const allTokensArray = useMemo(() => Object.values(allTokens ?? {}), [allTokens])\r\n  const balances = useTokenBalances(account ?? undefined, allTokensArray)\r\n  return balances ?? {}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}