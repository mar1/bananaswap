{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marin\\\\Documents\\\\Dev\\\\bananaswap\\\\moonbeam-uniswap\\\\uniswap-interface-moonbeam\\\\src\\\\pages\\\\Earn\\\\index.tsx\";\nimport React, { useContext } from 'react';\nimport { ThemeContext } from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport { StakeTabs } from '../../components/NavigationTabs';\nimport { useTranslation } from 'react-i18next';\nimport { Text } from 'rebass';\nimport { ButtonPrimary } from '../../components/Button';\nimport { AutoColumn } from '../../components/Column';\nimport { useActiveWeb3React } from '../../hooks';\nimport AppBody from '../AppBody';\nimport CurrencyInputPanel from '../../components/CurrencyInputPanel';\nvar Fields;\n\n(function (Fields) {\n  Fields[Fields[\"TOKEN0\"] = 0] = \"TOKEN0\";\n  Fields[Fields[\"TOKEN1\"] = 1] = \"TOKEN1\";\n})(Fields || (Fields = {}));\n\nexport default function PoolFinder() {\n  const theme = useContext(ThemeContext);\n  const {\n    t\n  } = useTranslation();\n  const {\n    account\n  } = useActiveWeb3React(); // swap state\n\n  const {\n    independentField,\n    typedValue,\n    recipient\n  } = useSwapState();\n  const {\n    v2Trade,\n    currencyBalances,\n    parsedAmount,\n    currencies,\n    inputError: swapInputError\n  } = useDerivedSwapInfo();\n  const {\n    wrapType,\n    execute: onWrap,\n    inputError: wrapInputError\n  } = useWrapCallback(currencies[Field.INPUT], currencies[Field.OUTPUT], typedValue);\n  const showWrap = wrapType !== WrapType.NOT_APPLICABLE;\n  const {\n    address: recipientAddress\n  } = useENSAddress(recipient);\n  const toggledVersion = useToggledVersion();\n  const trade = showWrap ? undefined : {\n    [Version.v2]: v2Trade\n  }[toggledVersion];\n  const parsedAmounts = showWrap ? {\n    [Field.INPUT]: parsedAmount,\n    [Field.OUTPUT]: parsedAmount\n  } : {\n    [Field.INPUT]: independentField === Field.INPUT ? parsedAmount : trade === null || trade === void 0 ? void 0 : trade.inputAmount,\n    [Field.OUTPUT]: independentField === Field.OUTPUT ? parsedAmount : trade === null || trade === void 0 ? void 0 : trade.outputAmount\n  };\n  const {\n    onSwitchTokens,\n    onCurrencySelection,\n    onUserInput,\n    onChangeRecipient\n  } = useSwapActionHandlers();\n  const isValid = !swapInputError;\n  const dependentField = independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT;\n  const handleTypeInput = useCallback(value => {\n    onUserInput(Field.INPUT, value);\n  }, [onUserInput]);\n  return /*#__PURE__*/React.createElement(AppBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(StakeTabs, {\n    active: 'earn',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(AutoColumn, {\n    gap: \"lg\",\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"http://localhost:3000/bananascoin.png\",\n    Width: \"150px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Text, {\n    textAlign: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }, \"Stake your LP tokens to get extra $BANANAS rewards\"), /*#__PURE__*/React.createElement(CurrencyInputPanel, {\n    label: independentField === Field.OUTPUT && !showWrap && trade ? 'From (estimated)' : 'From',\n    value: formattedAmounts[Field.INPUT],\n    showMaxButton: !atMaxAmountInput,\n    currency: currencies[Field.INPUT],\n    onUserInput: handleTypeInput,\n    onMax: handleMaxInput,\n    onCurrencySelect: handleInputSelect,\n    otherCurrency: currencies[Field.OUTPUT],\n    id: \"swap-currency-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(ButtonPrimary, {\n    id: \"join-pool-button\",\n    as: Link,\n    style: {\n      padding: 16\n    },\n    to: \"/add/ETH\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    fontWeight: 500,\n    fontSize: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  }, t('addLiquidity')))));\n}","map":{"version":3,"sources":["C:/Users/marin/Documents/Dev/bananaswap/moonbeam-uniswap/uniswap-interface-moonbeam/src/pages/Earn/index.tsx"],"names":["React","useContext","ThemeContext","Link","StakeTabs","useTranslation","Text","ButtonPrimary","AutoColumn","useActiveWeb3React","AppBody","CurrencyInputPanel","Fields","PoolFinder","theme","t","account","independentField","typedValue","recipient","useSwapState","v2Trade","currencyBalances","parsedAmount","currencies","inputError","swapInputError","useDerivedSwapInfo","wrapType","execute","onWrap","wrapInputError","useWrapCallback","Field","INPUT","OUTPUT","showWrap","WrapType","NOT_APPLICABLE","address","recipientAddress","useENSAddress","toggledVersion","useToggledVersion","trade","undefined","Version","v2","parsedAmounts","inputAmount","outputAmount","onSwitchTokens","onCurrencySelection","onUserInput","onChangeRecipient","useSwapActionHandlers","isValid","dependentField","handleTypeInput","useCallback","value","formattedAmounts","atMaxAmountInput","handleMaxInput","handleInputSelect","padding"],"mappings":"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","sourcesContent":["import React, { useContext, useMemo } from 'react'\r\nimport { ThemeContext } from 'styled-components'\r\nimport { Pair } from 'moonbeamswap'\r\nimport { Link } from 'react-router-dom'\r\nimport { StakeTabs } from '../../components/NavigationTabs'\r\nimport { useTranslation } from 'react-i18next'\r\n\r\nimport Question from '../../components/QuestionHelper'\r\nimport FullPositionCard from '../../components/PositionCard'\r\nimport { useTokenBalancesWithLoadingIndicator } from '../../state/wallet/hooks'\r\nimport { StyledInternalLink, TYPE } from '../../theme'\r\nimport { Text } from 'rebass'\r\nimport { LightCard } from '../../components/Card'\r\nimport { RowBetween } from '../../components/Row'\r\nimport { ButtonPrimary } from '../../components/Button'\r\nimport { AutoColumn } from '../../components/Column'\r\n\r\nimport { useActiveWeb3React } from '../../hooks'\r\nimport { usePairs } from '../../data/Reserves'\r\nimport { toV2LiquidityToken, useTrackedTokenPairs } from '../../state/user/hooks'\r\nimport AppBody from '../AppBody'\r\nimport { Dots } from '../../components/swap/styleds'\r\n\r\nimport CurrencyInputPanel from '../../components/CurrencyInputPanel'\r\n\r\nenum Fields {\r\n  TOKEN0 = 0,\r\n  TOKEN1 = 1\r\n}\r\n\r\nexport default function PoolFinder() {\r\n  const theme = useContext(ThemeContext)\r\n  const { t } = useTranslation()\r\n  const { account } = useActiveWeb3React()\r\n\r\n  // swap state\r\n  const { independentField, typedValue, recipient } = useSwapState()\r\n  const { v2Trade, currencyBalances, parsedAmount, currencies, inputError: swapInputError } = useDerivedSwapInfo()\r\n  const { wrapType, execute: onWrap, inputError: wrapInputError } = useWrapCallback(\r\n    currencies[Field.INPUT],\r\n    currencies[Field.OUTPUT],\r\n    typedValue\r\n  )\r\n  const showWrap: boolean = wrapType !== WrapType.NOT_APPLICABLE\r\n  const { address: recipientAddress } = useENSAddress(recipient)\r\n  const toggledVersion = useToggledVersion()\r\n  const trade = showWrap\r\n    ? undefined\r\n    : {\r\n        [Version.v2]: v2Trade\r\n      }[toggledVersion]\r\n\r\n  const parsedAmounts = showWrap\r\n    ? {\r\n        [Field.INPUT]: parsedAmount,\r\n        [Field.OUTPUT]: parsedAmount\r\n      }\r\n    : {\r\n        [Field.INPUT]: independentField === Field.INPUT ? parsedAmount : trade?.inputAmount,\r\n        [Field.OUTPUT]: independentField === Field.OUTPUT ? parsedAmount : trade?.outputAmount\r\n      }\r\n\r\n  const { onSwitchTokens, onCurrencySelection, onUserInput, onChangeRecipient } = useSwapActionHandlers()\r\n  const isValid = !swapInputError\r\n  const dependentField: Field = independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT\r\n\r\n  const handleTypeInput = useCallback(\r\n    (value: string) => {\r\n      onUserInput(Field.INPUT, value)\r\n    },\r\n    [onUserInput]\r\n  )\r\n\r\n\r\n  return (\r\n    <AppBody>\r\n      <StakeTabs active={'earn'} />\r\n      <AutoColumn gap=\"lg\" justify=\"center\">\r\n        <img src=\"http://localhost:3000/bananascoin.png\" Width='150px'></img>\r\n      <Text textAlign=\"center\">Stake your LP tokens to get extra $BANANAS rewards</Text>\r\n      <CurrencyInputPanel\r\n              label={independentField === Field.OUTPUT && !showWrap && trade ? 'From (estimated)' : 'From'}\r\n              value={formattedAmounts[Field.INPUT]}\r\n              showMaxButton={!atMaxAmountInput}\r\n              currency={currencies[Field.INPUT]}\r\n              onUserInput={handleTypeInput}\r\n              onMax={handleMaxInput}\r\n              onCurrencySelect={handleInputSelect}\r\n              otherCurrency={currencies[Field.OUTPUT]}\r\n              id=\"swap-currency-input\"\r\n            />\r\n          <ButtonPrimary id=\"join-pool-button\" as={Link} style={{ padding: 16 }} to=\"/add/ETH\">\r\n            <Text fontWeight={500} fontSize={20}>\r\n              {t('addLiquidity')}\r\n            </Text>\r\n          </ButtonPrimary>\r\n          </AutoColumn>\r\n    </AppBody>\r\n\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}