{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\marin\\\\Desktop\\\\bananaswap\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\Users\\\\marin\\\\Desktop\\\\bananaswap\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import schema from'@uniswap/token-lists/src/tokenlist.schema.json';import Ajv from'ajv';import contenthashToUri from'./contenthashToUri';import{parseENSAddress}from'./parseENSAddress';import uriToHttp from'./uriToHttp';var tokenListValidator=new Ajv({allErrors:true}).compile(schema);/**\r\n * Contains the logic for resolving a list URL to a validated token list\r\n * @param listUrl list url\r\n * @param resolveENSContentHash resolves an ens name to a contenthash\r\n */export default function getTokenList(_x,_x2){return _getTokenList.apply(this,arguments);}function _getTokenList(){_getTokenList=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(listUrl,resolveENSContentHash){var parsedENS,urls,_parsedENS$ensPath,contentHashUri,translatedUri,i,url,isLast,response,json,_tokenListValidator$e,_tokenListValidator$e2,validationErrors;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:parsedENS=parseENSAddress(listUrl);if(!parsedENS){_context.next=23;break;}_context.prev=2;_context.next=5;return resolveENSContentHash(parsedENS.ensName);case 5:contentHashUri=_context.sent;_context.next=12;break;case 8:_context.prev=8;_context.t0=_context[\"catch\"](2);console.debug(\"Failed to resolve ENS name: \".concat(parsedENS.ensName),_context.t0);throw new Error(\"Failed to resolve ENS name: \".concat(parsedENS.ensName));case 12:_context.prev=12;translatedUri=contenthashToUri(contentHashUri);_context.next=20;break;case 16:_context.prev=16;_context.t1=_context[\"catch\"](12);console.debug('Failed to translate contenthash to URI',contentHashUri);throw new Error(\"Failed to translate contenthash to URI: \".concat(contentHashUri));case 20:urls=uriToHttp(\"\".concat(translatedUri).concat((_parsedENS$ensPath=parsedENS.ensPath)!==null&&_parsedENS$ensPath!==void 0?_parsedENS$ensPath:''));_context.next=24;break;case 23:urls=uriToHttp(listUrl);case 24:i=0;case 25:if(!(i<urls.length)){_context.next=55;break;}url=urls[i];isLast=i===urls.length-1;response=void 0;_context.prev=29;_context.next=32;return fetch(url);case 32:response=_context.sent;_context.next=41;break;case 35:_context.prev=35;_context.t2=_context[\"catch\"](29);console.debug('Failed to fetch list',listUrl,_context.t2);if(!isLast){_context.next=40;break;}throw new Error(\"Failed to download list \".concat(listUrl));case 40:return _context.abrupt(\"continue\",52);case 41:if(response.ok){_context.next=45;break;}if(!isLast){_context.next=44;break;}throw new Error(\"Failed to download list \".concat(listUrl));case 44:return _context.abrupt(\"continue\",52);case 45:_context.next=47;return response.json();case 47:json=_context.sent;if(tokenListValidator(json)){_context.next=51;break;}validationErrors=(_tokenListValidator$e=(_tokenListValidator$e2=tokenListValidator.errors)===null||_tokenListValidator$e2===void 0?void 0:_tokenListValidator$e2.reduce(function(memo,error){var _error$message;var add=\"\".concat(error.dataPath,\" \").concat((_error$message=error.message)!==null&&_error$message!==void 0?_error$message:'');return memo.length>0?\"\".concat(memo,\"; \").concat(add):\"\".concat(add);},''))!==null&&_tokenListValidator$e!==void 0?_tokenListValidator$e:'unknown error';throw new Error(\"Token list failed validation: \".concat(validationErrors));case 51:return _context.abrupt(\"return\",json);case 52:i++;_context.next=25;break;case 55:throw new Error('Unrecognized list URL protocol.');case 56:case\"end\":return _context.stop();}}},_callee,null,[[2,8],[12,16],[29,35]]);}));return _getTokenList.apply(this,arguments);}","map":{"version":3,"sources":["C:/Users/marin/Desktop/bananaswap/src/utils/getTokenList.ts"],"names":["schema","Ajv","contenthashToUri","parseENSAddress","uriToHttp","tokenListValidator","allErrors","compile","getTokenList","listUrl","resolveENSContentHash","parsedENS","ensName","contentHashUri","console","debug","Error","translatedUri","urls","ensPath","i","length","url","isLast","response","fetch","ok","json","validationErrors","errors","reduce","memo","error","add","dataPath","message"],"mappings":"+TACA,MAAOA,CAAAA,MAAP,KAAmB,gDAAnB,CACA,MAAOC,CAAAA,GAAP,KAAgB,KAAhB,CACA,MAAOC,CAAAA,gBAAP,KAA6B,oBAA7B,CACA,OAASC,eAAT,KAAgC,mBAAhC,CACA,MAAOC,CAAAA,SAAP,KAAsB,aAAtB,CAEA,GAAMC,CAAAA,kBAAkB,CAAG,GAAIJ,CAAAA,GAAJ,CAAQ,CAAEK,SAAS,CAAE,IAAb,CAAR,EAA6BC,OAA7B,CAAqCP,MAArC,CAA3B,CAEA;AACA;AACA;AACA;AACA,GACA,uBAA8BQ,CAAAA,YAA9B,qD,+FAAe,iBACbC,OADa,CAEbC,qBAFa,8QAIPC,SAJO,CAIKR,eAAe,CAACM,OAAD,CAJpB,KAMTE,SANS,gEAScD,CAAAA,qBAAqB,CAACC,SAAS,CAACC,OAAX,CATnC,QASTC,cATS,8FAWTC,OAAO,CAACC,KAAR,uCAA6CJ,SAAS,CAACC,OAAvD,eAXS,KAYH,IAAII,CAAAA,KAAJ,uCAAyCL,SAAS,CAACC,OAAnD,EAZG,0BAgBTK,aAAa,CAAGf,gBAAgB,CAACW,cAAD,CAAhC,CAhBS,kFAkBTC,OAAO,CAACC,KAAR,CAAc,wCAAd,CAAwDF,cAAxD,EAlBS,KAmBH,IAAIG,CAAAA,KAAJ,mDAAqDH,cAArD,EAnBG,SAqBXK,IAAI,CAAGd,SAAS,WAAIa,aAAJ,6BAAoBN,SAAS,CAACQ,OAA9B,yDAAyC,EAAzC,EAAhB,CArBW,+BAuBXD,IAAI,CAAGd,SAAS,CAACK,OAAD,CAAhB,CAvBW,QAyBJW,CAzBI,CAyBA,CAzBA,cAyBGA,CAAC,CAAGF,IAAI,CAACG,MAzBZ,2BA0BLC,GA1BK,CA0BCJ,IAAI,CAACE,CAAD,CA1BL,CA2BLG,MA3BK,CA2BIH,CAAC,GAAKF,IAAI,CAACG,MAAL,CAAc,CA3BxB,CA4BPG,QA5BO,gDA8BQC,CAAAA,KAAK,CAACH,GAAD,CA9Bb,SA8BTE,QA9BS,iGAgCTV,OAAO,CAACC,KAAR,CAAc,sBAAd,CAAsCN,OAAtC,cAhCS,IAiCLc,MAjCK,+BAiCS,IAAIP,CAAAA,KAAJ,mCAAqCP,OAArC,EAjCT,0DAqCNe,QAAQ,CAACE,EArCH,8BAsCLH,MAtCK,+BAsCS,IAAIP,CAAAA,KAAJ,mCAAqCP,OAArC,EAtCT,8EA0CQe,CAAAA,QAAQ,CAACG,IAAT,EA1CR,SA0CLA,IA1CK,kBA2CNtB,kBAAkB,CAACsB,IAAD,CA3CZ,0BA4CHC,gBA5CG,gDA6CPvB,kBAAkB,CAACwB,MA7CZ,iDA6CP,uBAA2BC,MAA3B,CAA0C,SAACC,IAAD,CAAOC,KAAP,CAAiB,oBACzD,GAAMC,CAAAA,GAAG,WAAMD,KAAK,CAACE,QAAZ,6BAAwBF,KAAK,CAACG,OAA9B,iDAAyC,EAAzC,CAAT,CACA,MAAOJ,CAAAA,IAAI,CAACV,MAAL,CAAc,CAAd,WAAqBU,IAArB,cAA8BE,GAA9B,YAAyCA,GAAzC,CAAP,CACD,CAHD,CAGG,EAHH,CA7CO,+DAgDG,eAhDH,MAiDH,IAAIjB,CAAAA,KAAJ,yCAA2CY,gBAA3C,EAjDG,yCAmDJD,IAnDI,UAyBoBP,CAAC,EAzBrB,qCAqDP,IAAIJ,CAAAA,KAAJ,CAAU,iCAAV,CArDO,qF","sourcesContent":["import { TokenList } from '@uniswap/token-lists'\r\nimport schema from '@uniswap/token-lists/src/tokenlist.schema.json'\r\nimport Ajv from 'ajv'\r\nimport contenthashToUri from './contenthashToUri'\r\nimport { parseENSAddress } from './parseENSAddress'\r\nimport uriToHttp from './uriToHttp'\r\n\r\nconst tokenListValidator = new Ajv({ allErrors: true }).compile(schema)\r\n\r\n/**\r\n * Contains the logic for resolving a list URL to a validated token list\r\n * @param listUrl list url\r\n * @param resolveENSContentHash resolves an ens name to a contenthash\r\n */\r\nexport default async function getTokenList(\r\n  listUrl: string,\r\n  resolveENSContentHash: (ensName: string) => Promise<string>\r\n): Promise<TokenList> {\r\n  const parsedENS = parseENSAddress(listUrl)\r\n  let urls: string[]\r\n  if (parsedENS) {\r\n    let contentHashUri\r\n    try {\r\n      contentHashUri = await resolveENSContentHash(parsedENS.ensName)\r\n    } catch (error) {\r\n      console.debug(`Failed to resolve ENS name: ${parsedENS.ensName}`, error)\r\n      throw new Error(`Failed to resolve ENS name: ${parsedENS.ensName}`)\r\n    }\r\n    let translatedUri\r\n    try {\r\n      translatedUri = contenthashToUri(contentHashUri)\r\n    } catch (error) {\r\n      console.debug('Failed to translate contenthash to URI', contentHashUri)\r\n      throw new Error(`Failed to translate contenthash to URI: ${contentHashUri}`)\r\n    }\r\n    urls = uriToHttp(`${translatedUri}${parsedENS.ensPath ?? ''}`)\r\n  } else {\r\n    urls = uriToHttp(listUrl)\r\n  }\r\n  for (let i = 0; i < urls.length; i++) {\r\n    const url = urls[i]\r\n    const isLast = i === urls.length - 1\r\n    let response\r\n    try {\r\n      response = await fetch(url)\r\n    } catch (error) {\r\n      console.debug('Failed to fetch list', listUrl, error)\r\n      if (isLast) throw new Error(`Failed to download list ${listUrl}`)\r\n      continue\r\n    }\r\n\r\n    if (!response.ok) {\r\n      if (isLast) throw new Error(`Failed to download list ${listUrl}`)\r\n      continue\r\n    }\r\n\r\n    const json = await response.json()\r\n    if (!tokenListValidator(json)) {\r\n      const validationErrors: string =\r\n        tokenListValidator.errors?.reduce<string>((memo, error) => {\r\n          const add = `${error.dataPath} ${error.message ?? ''}`\r\n          return memo.length > 0 ? `${memo}; ${add}` : `${add}`\r\n        }, '') ?? 'unknown error'\r\n      throw new Error(`Token list failed validation: ${validationErrors}`)\r\n    }\r\n    return json\r\n  }\r\n  throw new Error('Unrecognized list URL protocol.')\r\n}\r\n"]},"metadata":{},"sourceType":"module"}