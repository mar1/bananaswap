{"ast":null,"code":"export const getAllowance = async (lpContract, farmContract, account) => {\n  try {\n    const allowance = await lpContract.methods.allowance(account, farmContract.options.address).call();\n    return allowance;\n  } catch (e) {\n    return '0';\n  }\n};\nexport const getBalance = async (provider, tokenAddress, userAddress) => {\n  const lpContract = getContract(provider, tokenAddress);\n\n  try {\n    const balance = await lpContract.methods.balanceOf(userAddress).call();\n    return balance;\n  } catch (e) {\n    return '0';\n  }\n};","map":{"version":3,"sources":["C:/Users/marin/Documents/Dev/bananaswap/moonbeam-uniswap/uniswap-interface-moonbeam/src/utils/erc20.ts"],"names":["getAllowance","lpContract","farmContract","account","allowance","methods","options","address","call","e","getBalance","provider","tokenAddress","userAddress","getContract","balance","balanceOf"],"mappings":"AASA,OAAO,MAAMA,YAAY,GAAG,OAC1BC,UAD0B,EAE1BC,YAF0B,EAG1BC,OAH0B,KAIN;AACpB,MAAI;AACF,UAAMC,SAAiB,GAAG,MAAMH,UAAU,CAACI,OAAX,CAC7BD,SAD6B,CACnBD,OADmB,EACVD,YAAY,CAACI,OAAb,CAAqBC,OADX,EAE7BC,IAF6B,EAAhC;AAGA,WAAOJ,SAAP;AACD,GALD,CAKE,OAAOK,CAAP,EAAU;AACV,WAAO,GAAP;AACD;AACF,CAbM;AAeP,OAAO,MAAMC,UAAU,GAAG,OACxBC,QADwB,EAExBC,YAFwB,EAGxBC,WAHwB,KAIJ;AACpB,QAAMZ,UAAU,GAAGa,WAAW,CAACH,QAAD,EAAWC,YAAX,CAA9B;;AACA,MAAI;AACF,UAAMG,OAAe,GAAG,MAAMd,UAAU,CAACI,OAAX,CAC3BW,SAD2B,CACjBH,WADiB,EAE3BL,IAF2B,EAA9B;AAGA,WAAOO,OAAP;AACD,GALD,CAKE,OAAON,CAAP,EAAU;AACV,WAAO,GAAP;AACD;AACF,CAdM","sourcesContent":["import Web3 from 'web3'\nimport { provider } from 'web3-core'\nimport { AbiItem } from 'web3-utils'\n\nimport ERC20ABI from '../constants/abi/erc20.json'\nimport { Contract } from 'web3-eth-contract'\n\n\n\nexport const getAllowance = async (\n  lpContract: Contract,\n  farmContract: Contract,\n  account: string,\n): Promise<string> => {\n  try {\n    const allowance: string = await lpContract.methods\n      .allowance(account, farmContract.options.address)\n      .call()\n    return allowance\n  } catch (e) {\n    return '0'\n  }\n}\n\nexport const getBalance = async (\n  provider: provider,\n  tokenAddress: string,\n  userAddress: string,\n): Promise<string> => {\n  const lpContract = getContract(provider, tokenAddress)\n  try {\n    const balance: string = await lpContract.methods\n      .balanceOf(userAddress)\n      .call()\n    return balance\n  } catch (e) {\n    return '0'\n  }\n}\n"]},"metadata":{},"sourceType":"module"}