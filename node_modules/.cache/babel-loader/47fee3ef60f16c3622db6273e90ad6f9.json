{"ast":null,"code":"import{useEffect}from'react';import{useDispatch,useSelector}from'react-redux';import{useActiveWeb3React}from'../../hooks';import{useAddPopup,useBlockNumber}from'../application/hooks';import{checkedTransaction,finalizeTransaction}from'./actions';export function shouldCheck(lastBlockNumber,tx){if(tx.receipt)return false;if(!tx.lastCheckedBlockNumber)return true;var blocksSinceCheck=lastBlockNumber-tx.lastCheckedBlockNumber;if(blocksSinceCheck<1)return false;var minutesPending=(new Date().getTime()-tx.addedTime)/1000/60;if(minutesPending>60){// every 10 blocks if pending for longer than an hour\nreturn blocksSinceCheck>9;}else if(minutesPending>5){// every 3 blocks if pending more than 5 minutes\nreturn blocksSinceCheck>2;}else{// otherwise every block\nreturn true;}}export default function Updater(){var _state$chainId;var _useActiveWeb3React=useActiveWeb3React(),chainId=_useActiveWeb3React.chainId,library=_useActiveWeb3React.library;var lastBlockNumber=useBlockNumber();var dispatch=useDispatch();var state=useSelector(function(state){return state.transactions;});var transactions=chainId?(_state$chainId=state[chainId])!==null&&_state$chainId!==void 0?_state$chainId:{}:{};// show popup on confirm\nvar addPopup=useAddPopup();useEffect(function(){if(!chainId||!library||!lastBlockNumber)return;Object.keys(transactions).filter(function(hash){return shouldCheck(lastBlockNumber,transactions[hash]);}).forEach(function(hash){library.getTransactionReceipt(hash).then(function(receipt){if(receipt){var _transactions$hash;dispatch(finalizeTransaction({chainId:chainId,hash:hash,receipt:{blockHash:receipt.blockHash,blockNumber:receipt.blockNumber,contractAddress:receipt.contractAddress,from:receipt.from,status:receipt.status,to:receipt.to,transactionHash:receipt.transactionHash,transactionIndex:receipt.transactionIndex}}));addPopup({txn:{hash:hash,success:receipt.status===1,summary:(_transactions$hash=transactions[hash])===null||_transactions$hash===void 0?void 0:_transactions$hash.summary}},hash);}else{dispatch(checkedTransaction({chainId:chainId,hash:hash,blockNumber:lastBlockNumber}));}}).catch(function(error){console.error(\"failed to check transaction hash: \".concat(hash),error);});});},[chainId,library,transactions,lastBlockNumber,dispatch,addPopup]);return null;}","map":{"version":3,"sources":["C:/Users/marin/Desktop/bananaswap/src/state/transactions/updater.tsx"],"names":["useEffect","useDispatch","useSelector","useActiveWeb3React","useAddPopup","useBlockNumber","checkedTransaction","finalizeTransaction","shouldCheck","lastBlockNumber","tx","receipt","lastCheckedBlockNumber","blocksSinceCheck","minutesPending","Date","getTime","addedTime","Updater","chainId","library","dispatch","state","transactions","addPopup","Object","keys","filter","hash","forEach","getTransactionReceipt","then","blockHash","blockNumber","contractAddress","from","status","to","transactionHash","transactionIndex","txn","success","summary","catch","error","console"],"mappings":"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","sourcesContent":["import { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useActiveWeb3React } from '../../hooks'\r\nimport { useAddPopup, useBlockNumber } from '../application/hooks'\r\nimport { AppDispatch, AppState } from '../index'\r\nimport { checkedTransaction, finalizeTransaction } from './actions'\r\n\r\nexport function shouldCheck(\r\n  lastBlockNumber: number,\r\n  tx: { addedTime: number; receipt?: {}; lastCheckedBlockNumber?: number }\r\n): boolean {\r\n  if (tx.receipt) return false\r\n  if (!tx.lastCheckedBlockNumber) return true\r\n  const blocksSinceCheck = lastBlockNumber - tx.lastCheckedBlockNumber\r\n  if (blocksSinceCheck < 1) return false\r\n  const minutesPending = (new Date().getTime() - tx.addedTime) / 1000 / 60\r\n  if (minutesPending > 60) {\r\n    // every 10 blocks if pending for longer than an hour\r\n    return blocksSinceCheck > 9\r\n  } else if (minutesPending > 5) {\r\n    // every 3 blocks if pending more than 5 minutes\r\n    return blocksSinceCheck > 2\r\n  } else {\r\n    // otherwise every block\r\n    return true\r\n  }\r\n}\r\n\r\nexport default function Updater(): null {\r\n  const { chainId, library } = useActiveWeb3React()\r\n\r\n  const lastBlockNumber = useBlockNumber()\r\n\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const state = useSelector<AppState, AppState['transactions']>(state => state.transactions)\r\n\r\n  const transactions = chainId ? state[chainId] ?? {} : {}\r\n\r\n  // show popup on confirm\r\n  const addPopup = useAddPopup()\r\n\r\n  useEffect(() => {\r\n    if (!chainId || !library || !lastBlockNumber) return\r\n\r\n    Object.keys(transactions)\r\n      .filter(hash => shouldCheck(lastBlockNumber, transactions[hash]))\r\n      .forEach(hash => {\r\n        library\r\n          .getTransactionReceipt(hash)\r\n          .then(receipt => {\r\n            if (receipt) {\r\n              dispatch(\r\n                finalizeTransaction({\r\n                  chainId,\r\n                  hash,\r\n                  receipt: {\r\n                    blockHash: receipt.blockHash,\r\n                    blockNumber: receipt.blockNumber,\r\n                    contractAddress: receipt.contractAddress,\r\n                    from: receipt.from,\r\n                    status: receipt.status,\r\n                    to: receipt.to,\r\n                    transactionHash: receipt.transactionHash,\r\n                    transactionIndex: receipt.transactionIndex\r\n                  }\r\n                })\r\n              )\r\n\r\n              addPopup(\r\n                {\r\n                  txn: {\r\n                    hash,\r\n                    success: receipt.status === 1,\r\n                    summary: transactions[hash]?.summary\r\n                  }\r\n                },\r\n                hash\r\n              )\r\n            } else {\r\n              dispatch(checkedTransaction({ chainId, hash, blockNumber: lastBlockNumber }))\r\n            }\r\n          })\r\n          .catch(error => {\r\n            console.error(`failed to check transaction hash: ${hash}`, error)\r\n          })\r\n      })\r\n  }, [chainId, library, transactions, lastBlockNumber, dispatch, addPopup])\r\n\r\n  return null\r\n}\r\n"]},"metadata":{},"sourceType":"module"}