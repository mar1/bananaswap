{"ast":null,"code":"import { useCallback } from 'react';\nimport useYam from './useYam';\nimport { useWallet } from 'use-wallet';\nimport { approve, getFarmContract } from '../farm/utils';\n\nconst useApprove = lpContract => {\n  const {\n    account\n  } = useWallet();\n  const yam = useYam();\n  const farmContract = getFarmContract(yam);\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, farmContract, account);\n      return tx;\n    } catch (e) {\n      return false;\n    }\n  }, [account, lpContract, farmContract]);\n  return {\n    onApprove: handleApprove\n  };\n};\n\nexport default useApprove;","map":{"version":3,"sources":["C:/Users/marin/Documents/Dev/bananaswap/moonbeam-uniswap/uniswap-interface-moonbeam/src/hooks/useApprove.ts"],"names":["useCallback","useYam","useWallet","approve","getFarmContract","useApprove","lpContract","account","yam","farmContract","handleApprove","tx","e","onApprove"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AAEA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,SAAT,QAA0B,YAA1B;AAIA,SAASC,OAAT,EAAkBC,eAAlB,QAAyC,eAAzC;;AAEA,MAAMC,UAAU,GAAIC,UAAD,IAA0B;AAC3C,QAAM;AAAEC,IAAAA;AAAF,MAAuDL,SAAS,EAAtE;AACA,QAAMM,GAAG,GAAGP,MAAM,EAAlB;AACA,QAAMQ,YAAY,GAAGL,eAAe,CAACI,GAAD,CAApC;AAEA,QAAME,aAAa,GAAGV,WAAW,CAAC,YAAY;AAC5C,QAAI;AACF,YAAMW,EAAE,GAAG,MAAMR,OAAO,CAACG,UAAD,EAAaG,YAAb,EAA2BF,OAA3B,CAAxB;AACA,aAAOI,EAAP;AACD,KAHD,CAGE,OAAOC,CAAP,EAAU;AACV,aAAO,KAAP;AACD;AACF,GAPgC,EAO9B,CAACL,OAAD,EAAUD,UAAV,EAAsBG,YAAtB,CAP8B,CAAjC;AASA,SAAO;AAAEI,IAAAA,SAAS,EAAEH;AAAb,GAAP;AACD,CAfD;;AAiBA,eAAeL,UAAf","sourcesContent":["import { useCallback } from 'react'\n\nimport useYam from './useYam'\nimport { useWallet } from 'use-wallet'\nimport { provider } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\n\nimport { approve, getFarmContract } from '../farm/utils'\n\nconst useApprove = (lpContract: Contract) => {\n  const { account }: { account: string; ethereum: provider } = useWallet()\n  const yam = useYam()\n  const farmContract = getFarmContract(yam)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, farmContract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, lpContract, farmContract])\n\n  return { onApprove: handleApprove }\n}\n\nexport default useApprove\n"]},"metadata":{},"sourceType":"module"}