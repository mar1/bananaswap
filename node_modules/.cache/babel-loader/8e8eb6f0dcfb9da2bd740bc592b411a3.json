{"ast":null,"code":"import { CurrencyAmount, DEV, JSBI, Token, TokenAmount } from 'moonbeamswap';\nimport { useMemo } from 'react';\nimport ERC20_INTERFACE from '../../constants/abis/erc20';\nimport { useAllTokens } from '../../hooks/Tokens';\nimport { useActiveWeb3React } from '../../hooks';\nimport { useMulticallContract } from '../../hooks/useContract';\nimport { isAddress } from '../../utils';\nimport { useSingleContractMultipleData, useMultipleContractSingleData } from '../multicall/hooks';\n/**\r\n * Returns a map of the given addresses to their eventually consistent DEV balances.\r\n */\n\nexport function useETHBalances(uncheckedAddresses) {\n  const multicallContract = useMulticallContract();\n  const addresses = useMemo(() => uncheckedAddresses ? uncheckedAddresses.map(isAddress).filter(a => a !== false).sort() : [], [uncheckedAddresses]);\n  const results = useSingleContractMultipleData(multicallContract, 'getEthBalance', addresses.map(address => [address]));\n  return useMemo(() => addresses.reduce((memo, address, i) => {\n    var _results$i, _results$i$result;\n\n    const value = results === null || results === void 0 ? void 0 : (_results$i = results[i]) === null || _results$i === void 0 ? void 0 : (_results$i$result = _results$i.result) === null || _results$i$result === void 0 ? void 0 : _results$i$result[0];\n    if (value) memo[address] = CurrencyAmount.ether(JSBI.BigInt(value.toString()));\n    return memo;\n  }, {}), [addresses, results]);\n}\n/**\r\n * Returns a map of token addresses to their eventually consistent token balances for a single account.\r\n */\n\nexport function useTokenBalancesWithLoadingIndicator(address, tokens) {\n  const validatedTokens = useMemo(() => {\n    var _tokens$filter;\n\n    return (_tokens$filter = tokens === null || tokens === void 0 ? void 0 : tokens.filter(t => isAddress(t === null || t === void 0 ? void 0 : t.address) !== false)) !== null && _tokens$filter !== void 0 ? _tokens$filter : [];\n  }, [tokens]);\n  const validatedTokenAddresses = useMemo(() => validatedTokens.map(vt => vt.address), [validatedTokens]);\n  const balances = useMultipleContractSingleData(validatedTokenAddresses, ERC20_INTERFACE, 'balanceOf', [address]);\n  const anyLoading = useMemo(() => balances.some(callState => callState.loading), [balances]);\n  return [useMemo(() => address && validatedTokens.length > 0 ? validatedTokens.reduce((memo, token, i) => {\n    var _balances$i, _balances$i$result;\n\n    const value = balances === null || balances === void 0 ? void 0 : (_balances$i = balances[i]) === null || _balances$i === void 0 ? void 0 : (_balances$i$result = _balances$i.result) === null || _balances$i$result === void 0 ? void 0 : _balances$i$result[0];\n    const amount = value ? JSBI.BigInt(value.toString()) : undefined;\n\n    if (amount) {\n      memo[token.address] = new TokenAmount(token, amount);\n    }\n\n    return memo;\n  }, {}) : {}, [address, validatedTokens, balances]), anyLoading];\n}\nexport function useTokenBalances(address, tokens) {\n  return useTokenBalancesWithLoadingIndicator(address, tokens)[0];\n} // get the balance for a single token/account combo\n\nexport function useTokenBalance(account, token) {\n  const tokenBalances = useTokenBalances(account, [token]);\n  if (!token) return undefined;\n  return tokenBalances[token.address];\n}\nexport function useCurrencyBalances(account, currencies) {\n  const tokens = useMemo(() => {\n    var _currencies$filter;\n\n    return (_currencies$filter = currencies === null || currencies === void 0 ? void 0 : currencies.filter(currency => currency instanceof Token)) !== null && _currencies$filter !== void 0 ? _currencies$filter : [];\n  }, [currencies]);\n  const tokenBalances = useTokenBalances(account, tokens);\n  const containsETH = useMemo(() => {\n    var _currencies$some;\n\n    return (_currencies$some = currencies === null || currencies === void 0 ? void 0 : currencies.some(currency => currency === DEV)) !== null && _currencies$some !== void 0 ? _currencies$some : false;\n  }, [currencies]);\n  const ethBalance = useETHBalances(containsETH ? [account] : []);\n  return useMemo(() => {\n    var _currencies$map;\n\n    return (_currencies$map = currencies === null || currencies === void 0 ? void 0 : currencies.map(currency => {\n      if (!account || !currency) return undefined;\n\n      if (currency instanceof Token) {\n        return tokenBalances[currency.address];\n      }\n\n      if (currency === DEV) return ethBalance[account];\n      return undefined;\n    })) !== null && _currencies$map !== void 0 ? _currencies$map : [];\n  }, [account, currencies, ethBalance, tokenBalances]);\n}\nexport function useCurrencyBalance(account, currency) {\n  return useCurrencyBalances(account, [currency])[0];\n} // mimics useAllBalances\n\nexport function useAllTokenBalances() {\n  const {\n    account\n  } = useActiveWeb3React();\n  const allTokens = useAllTokens();\n  const allTokensArray = useMemo(() => Object.values(allTokens !== null && allTokens !== void 0 ? allTokens : {}), [allTokens]);\n  const balances = useTokenBalances(account !== null && account !== void 0 ? account : undefined, allTokensArray);\n  return balances !== null && balances !== void 0 ? balances : {};\n}","map":{"version":3,"sources":["C:/Users/marin/Documents/Dev/bananaswap/moonbeam-uniswap/uniswap-interface-moonbeam/src/state/wallet/hooks.ts"],"names":["CurrencyAmount","DEV","JSBI","Token","TokenAmount","useMemo","ERC20_INTERFACE","useAllTokens","useActiveWeb3React","useMulticallContract","isAddress","useSingleContractMultipleData","useMultipleContractSingleData","useETHBalances","uncheckedAddresses","multicallContract","addresses","map","filter","a","sort","results","address","reduce","memo","i","value","result","ether","BigInt","toString","useTokenBalancesWithLoadingIndicator","tokens","validatedTokens","t","validatedTokenAddresses","vt","balances","anyLoading","some","callState","loading","length","token","amount","undefined","useTokenBalances","useTokenBalance","account","tokenBalances","useCurrencyBalances","currencies","currency","containsETH","ethBalance","useCurrencyBalance","useAllTokenBalances","allTokens","allTokensArray","Object","values"],"mappings":"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","sourcesContent":["import { Currency, CurrencyAmount, DEV, JSBI, Token, TokenAmount } from 'moonbeamswap'\r\nimport { useMemo } from 'react'\r\nimport ERC20_INTERFACE from '../../constants/abis/erc20'\r\nimport { useAllTokens } from '../../hooks/Tokens'\r\nimport { useActiveWeb3React } from '../../hooks'\r\nimport { useMulticallContract } from '../../hooks/useContract'\r\nimport { isAddress } from '../../utils'\r\nimport { useSingleContractMultipleData, useMultipleContractSingleData } from '../multicall/hooks'\r\n\r\n/**\r\n * Returns a map of the given addresses to their eventually consistent DEV balances.\r\n */\r\nexport function useETHBalances(\r\n  uncheckedAddresses?: (string | undefined)[]\r\n): { [address: string]: CurrencyAmount | undefined } {\r\n  const multicallContract = useMulticallContract()\r\n\r\n  const addresses: string[] = useMemo(\r\n    () =>\r\n      uncheckedAddresses\r\n        ? uncheckedAddresses\r\n            .map(isAddress)\r\n            .filter((a): a is string => a !== false)\r\n            .sort()\r\n        : [],\r\n    [uncheckedAddresses]\r\n  )\r\n\r\n  const results = useSingleContractMultipleData(\r\n    multicallContract,\r\n    'getEthBalance',\r\n    addresses.map(address => [address])\r\n  )\r\n\r\n  return useMemo(\r\n    () =>\r\n      addresses.reduce<{ [address: string]: CurrencyAmount }>((memo, address, i) => {\r\n        const value = results?.[i]?.result?.[0]\r\n        if (value) memo[address] = CurrencyAmount.ether(JSBI.BigInt(value.toString()))\r\n        return memo\r\n      }, {}),\r\n    [addresses, results]\r\n  )\r\n}\r\n\r\n/**\r\n * Returns a map of token addresses to their eventually consistent token balances for a single account.\r\n */\r\nexport function useTokenBalancesWithLoadingIndicator(\r\n  address?: string,\r\n  tokens?: (Token | undefined)[]\r\n): [{ [tokenAddress: string]: TokenAmount | undefined }, boolean] {\r\n  const validatedTokens: Token[] = useMemo(\r\n    () => tokens?.filter((t?: Token): t is Token => isAddress(t?.address) !== false) ?? [],\r\n    [tokens]\r\n  )\r\n\r\n  const validatedTokenAddresses = useMemo(() => validatedTokens.map(vt => vt.address), [validatedTokens])\r\n\r\n  const balances = useMultipleContractSingleData(validatedTokenAddresses, ERC20_INTERFACE, 'balanceOf', [address])\r\n\r\n  const anyLoading: boolean = useMemo(() => balances.some(callState => callState.loading), [balances])\r\n\r\n  return [\r\n    useMemo(\r\n      () =>\r\n        address && validatedTokens.length > 0\r\n          ? validatedTokens.reduce<{ [tokenAddress: string]: TokenAmount | undefined }>((memo, token, i) => {\r\n              const value = balances?.[i]?.result?.[0]\r\n              const amount = value ? JSBI.BigInt(value.toString()) : undefined\r\n              if (amount) {\r\n                memo[token.address] = new TokenAmount(token, amount)\r\n              }\r\n              return memo\r\n            }, {})\r\n          : {},\r\n      [address, validatedTokens, balances]\r\n    ),\r\n    anyLoading\r\n  ]\r\n}\r\n\r\nexport function useTokenBalances(\r\n  address?: string,\r\n  tokens?: (Token | undefined)[]\r\n): { [tokenAddress: string]: TokenAmount | undefined } {\r\n  return useTokenBalancesWithLoadingIndicator(address, tokens)[0]\r\n}\r\n\r\n// get the balance for a single token/account combo\r\nexport function useTokenBalance(account?: string, token?: Token): TokenAmount | undefined {\r\n  const tokenBalances = useTokenBalances(account, [token])\r\n  if (!token) return undefined\r\n  return tokenBalances[token.address]\r\n}\r\n\r\nexport function useCurrencyBalances(\r\n  account?: string,\r\n  currencies?: (Currency | undefined)[]\r\n): (CurrencyAmount | undefined)[] {\r\n  const tokens = useMemo(() => currencies?.filter((currency): currency is Token => currency instanceof Token) ?? [], [\r\n    currencies\r\n  ])\r\n\r\n  const tokenBalances = useTokenBalances(account, tokens)\r\n  const containsETH: boolean = useMemo(() => currencies?.some(currency => currency === DEV) ?? false, [currencies])\r\n  const ethBalance = useETHBalances(containsETH ? [account] : [])\r\n\r\n  return useMemo(\r\n    () =>\r\n      currencies?.map(currency => {\r\n        if (!account || !currency) return undefined\r\n        if (currency instanceof Token) {\r\n          return tokenBalances[currency.address]\r\n        }\r\n        if (currency === DEV) return ethBalance[account]\r\n        return undefined\r\n      }) ?? [],\r\n    [account, currencies, ethBalance, tokenBalances]\r\n  )\r\n}\r\n\r\nexport function useCurrencyBalance(account?: string, currency?: Currency): CurrencyAmount | undefined {\r\n  return useCurrencyBalances(account, [currency])[0]\r\n}\r\n\r\n// mimics useAllBalances\r\nexport function useAllTokenBalances(): { [tokenAddress: string]: TokenAmount | undefined } {\r\n  const { account } = useActiveWeb3React()\r\n  const allTokens = useAllTokens()\r\n  const allTokensArray = useMemo(() => Object.values(allTokens ?? {}), [allTokens])\r\n  const balances = useTokenBalances(account ?? undefined, allTokensArray)\r\n  return balances ?? {}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}