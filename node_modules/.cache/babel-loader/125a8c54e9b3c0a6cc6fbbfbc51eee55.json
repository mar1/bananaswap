{"ast":null,"code":"import { Pair, Token } from 'moonbeamswap';\nimport flatMap from 'lodash.flatmap';\nimport { useCallback, useMemo } from 'react';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { BASES_TO_TRACK_LIQUIDITY_FOR, PINNED_PAIRS } from '../../constants';\nimport { useActiveWeb3React } from '../../hooks';\nimport { useAllTokens } from '../../hooks/Tokens';\nimport { addSerializedPair, addSerializedToken, removeSerializedToken, updateUserDarkMode, updateUserDeadline, updateUserExpertMode, updateUserSlippageTolerance } from './actions';\n\nfunction serializeToken(token) {\n  return {\n    chainId: token.chainId,\n    address: token.address,\n    decimals: token.decimals,\n    symbol: token.symbol,\n    name: token.name\n  };\n}\n\nfunction deserializeToken(serializedToken) {\n  return new Token(serializedToken.chainId, serializedToken.address, serializedToken.decimals, serializedToken.symbol, serializedToken.name);\n}\n\nexport function useIsDarkMode() {\n  const {\n    userDarkMode,\n    matchesDarkMode\n  } = useSelector(({\n    user: {\n      matchesDarkMode,\n      userDarkMode\n    }\n  }) => ({\n    userDarkMode,\n    matchesDarkMode\n  }), shallowEqual);\n  return userDarkMode === null ? matchesDarkMode : userDarkMode;\n}\nexport function useDarkModeManager() {\n  const dispatch = useDispatch();\n  const darkMode = useIsDarkMode();\n  const toggleSetDarkMode = useCallback(() => {\n    dispatch(updateUserDarkMode({\n      userDarkMode: !darkMode\n    }));\n  }, [darkMode, dispatch]);\n  return [darkMode, toggleSetDarkMode];\n}\nexport function useIsExpertMode() {\n  return useSelector(state => state.user.userExpertMode);\n}\nexport function useExpertModeManager() {\n  const dispatch = useDispatch();\n  const expertMode = useIsExpertMode();\n  const toggleSetExpertMode = useCallback(() => {\n    dispatch(updateUserExpertMode({\n      userExpertMode: !expertMode\n    }));\n  }, [expertMode, dispatch]);\n  return [expertMode, toggleSetExpertMode];\n}\nexport function useUserSlippageTolerance() {\n  const dispatch = useDispatch();\n  const userSlippageTolerance = useSelector(state => {\n    return state.user.userSlippageTolerance;\n  });\n  const setUserSlippageTolerance = useCallback(userSlippageTolerance => {\n    dispatch(updateUserSlippageTolerance({\n      userSlippageTolerance\n    }));\n  }, [dispatch]);\n  return [userSlippageTolerance, setUserSlippageTolerance];\n}\nexport function useUserDeadline() {\n  const dispatch = useDispatch();\n  const userDeadline = useSelector(state => {\n    return state.user.userDeadline;\n  });\n  const setUserDeadline = useCallback(userDeadline => {\n    dispatch(updateUserDeadline({\n      userDeadline\n    }));\n  }, [dispatch]);\n  return [userDeadline, setUserDeadline];\n}\nexport function useAddUserToken() {\n  const dispatch = useDispatch();\n  return useCallback(token => {\n    dispatch(addSerializedToken({\n      serializedToken: serializeToken(token)\n    }));\n  }, [dispatch]);\n}\nexport function useRemoveUserAddedToken() {\n  const dispatch = useDispatch();\n  return useCallback((chainId, address) => {\n    dispatch(removeSerializedToken({\n      chainId,\n      address\n    }));\n  }, [dispatch]);\n}\nexport function useUserAddedTokens() {\n  const {\n    chainId\n  } = useActiveWeb3React();\n  const serializedTokensMap = useSelector(({\n    user: {\n      tokens\n    }\n  }) => tokens);\n  return useMemo(() => {\n    var _serializedTokensMap;\n\n    if (!chainId) return [];\n    return Object.values((_serializedTokensMap = serializedTokensMap[chainId]) !== null && _serializedTokensMap !== void 0 ? _serializedTokensMap : {}).map(deserializeToken);\n  }, [serializedTokensMap, chainId]);\n}\n\nfunction serializePair(pair) {\n  return {\n    token0: serializeToken(pair.token0),\n    token1: serializeToken(pair.token1)\n  };\n}\n\nexport function usePairAdder() {\n  const dispatch = useDispatch();\n  return useCallback(pair => {\n    dispatch(addSerializedPair({\n      serializedPair: serializePair(pair)\n    }));\n  }, [dispatch]);\n}\n/**\r\n * Given two tokens return the liquidity token that represents its liquidity shares\r\n * @param tokenA one of the two tokens\r\n * @param tokenB the other token\r\n */\n\nexport function toV2LiquidityToken([tokenA, tokenB]) {\n  return new Token(tokenA.chainId, Pair.getAddress(tokenA, tokenB), 18, 'UNI-V2', 'Uniswap V2');\n}\n/**\r\n * Returns all the pairs of tokens that are tracked by the user for the current chain ID.\r\n */\n\nexport function useTrackedTokenPairs() {\n  const {\n    chainId\n  } = useActiveWeb3React();\n  const tokens = useAllTokens(); // pinned pairs\n\n  const pinnedPairs = useMemo(() => {\n    var _PINNED_PAIRS$chainId;\n\n    return chainId ? (_PINNED_PAIRS$chainId = PINNED_PAIRS[chainId]) !== null && _PINNED_PAIRS$chainId !== void 0 ? _PINNED_PAIRS$chainId : [] : [];\n  }, [chainId]); // pairs for every token against every base\n\n  const generatedPairs = useMemo(() => chainId ? flatMap(Object.keys(tokens), tokenAddress => {\n    var _BASES_TO_TRACK_LIQUI;\n\n    const token = tokens[tokenAddress]; // for each token on the current chain,\n\n    return (// loop though all bases on the current chain\n      ((_BASES_TO_TRACK_LIQUI = BASES_TO_TRACK_LIQUIDITY_FOR[chainId]) !== null && _BASES_TO_TRACK_LIQUI !== void 0 ? _BASES_TO_TRACK_LIQUI : []). // to construct pairs of the given token with each base\n      map(base => {\n        if (base.address === token.address) {\n          return null;\n        } else {\n          return [base, token];\n        }\n      }).filter(p => p !== null)\n    );\n  }) : [], [tokens, chainId]); // pairs saved by users\n\n  const savedSerializedPairs = useSelector(({\n    user: {\n      pairs\n    }\n  }) => pairs);\n  const userPairs = useMemo(() => {\n    if (!chainId || !savedSerializedPairs) return [];\n    const forChain = savedSerializedPairs[chainId];\n    if (!forChain) return [];\n    return Object.keys(forChain).map(pairId => {\n      return [deserializeToken(forChain[pairId].token0), deserializeToken(forChain[pairId].token1)];\n    });\n  }, [savedSerializedPairs, chainId]);\n  const combinedList = useMemo(() => userPairs.concat(generatedPairs).concat(pinnedPairs), [generatedPairs, pinnedPairs, userPairs]);\n  return useMemo(() => {\n    // dedupes pairs of tokens in the combined list\n    const keyed = combinedList.reduce((memo, [tokenA, tokenB]) => {\n      const sorted = tokenA.sortsBefore(tokenB);\n      const key = sorted ? `${tokenA.address}:${tokenB.address}` : `${tokenB.address}:${tokenA.address}`;\n      if (memo[key]) return memo;\n      memo[key] = sorted ? [tokenA, tokenB] : [tokenB, tokenA];\n      return memo;\n    }, {});\n    return Object.keys(keyed).map(key => keyed[key]);\n  }, [combinedList]);\n}","map":{"version":3,"sources":["C:/Users/marin/Documents/Dev/bananaswap/moonbeam-uniswap/uniswap-interface-moonbeam/src/state/user/hooks.tsx"],"names":["Pair","Token","flatMap","useCallback","useMemo","shallowEqual","useDispatch","useSelector","BASES_TO_TRACK_LIQUIDITY_FOR","PINNED_PAIRS","useActiveWeb3React","useAllTokens","addSerializedPair","addSerializedToken","removeSerializedToken","updateUserDarkMode","updateUserDeadline","updateUserExpertMode","updateUserSlippageTolerance","serializeToken","token","chainId","address","decimals","symbol","name","deserializeToken","serializedToken","useIsDarkMode","userDarkMode","matchesDarkMode","user","useDarkModeManager","dispatch","darkMode","toggleSetDarkMode","useIsExpertMode","state","userExpertMode","useExpertModeManager","expertMode","toggleSetExpertMode","useUserSlippageTolerance","userSlippageTolerance","setUserSlippageTolerance","useUserDeadline","userDeadline","setUserDeadline","useAddUserToken","useRemoveUserAddedToken","useUserAddedTokens","serializedTokensMap","tokens","Object","values","map","serializePair","pair","token0","token1","usePairAdder","serializedPair","toV2LiquidityToken","tokenA","tokenB","getAddress","useTrackedTokenPairs","pinnedPairs","generatedPairs","keys","tokenAddress","base","filter","p","savedSerializedPairs","pairs","userPairs","forChain","pairId","combinedList","concat","keyed","reduce","memo","sorted","sortsBefore","key"],"mappings":"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","sourcesContent":["import { ChainId, Pair, Token } from 'moonbeamswap'\r\nimport flatMap from 'lodash.flatmap'\r\nimport { useCallback, useMemo } from 'react'\r\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux'\r\nimport { BASES_TO_TRACK_LIQUIDITY_FOR, PINNED_PAIRS } from '../../constants'\r\n\r\nimport { useActiveWeb3React } from '../../hooks'\r\nimport { useAllTokens } from '../../hooks/Tokens'\r\nimport { AppDispatch, AppState } from '../index'\r\nimport {\r\n  addSerializedPair,\r\n  addSerializedToken,\r\n  removeSerializedToken,\r\n  SerializedPair,\r\n  SerializedToken,\r\n  updateUserDarkMode,\r\n  updateUserDeadline,\r\n  updateUserExpertMode,\r\n  updateUserSlippageTolerance\r\n} from './actions'\r\n\r\nfunction serializeToken(token: Token): SerializedToken {\r\n  return {\r\n    chainId: token.chainId,\r\n    address: token.address,\r\n    decimals: token.decimals,\r\n    symbol: token.symbol,\r\n    name: token.name\r\n  }\r\n}\r\n\r\nfunction deserializeToken(serializedToken: SerializedToken): Token {\r\n  return new Token(\r\n    serializedToken.chainId,\r\n    serializedToken.address,\r\n    serializedToken.decimals,\r\n    serializedToken.symbol,\r\n    serializedToken.name\r\n  )\r\n}\r\n\r\nexport function useIsDarkMode(): boolean {\r\n  const { userDarkMode, matchesDarkMode } = useSelector<\r\n    AppState,\r\n    { userDarkMode: boolean | null; matchesDarkMode: boolean }\r\n  >(\r\n    ({ user: { matchesDarkMode, userDarkMode } }) => ({\r\n      userDarkMode,\r\n      matchesDarkMode\r\n    }),\r\n    shallowEqual\r\n  )\r\n\r\n  return userDarkMode === null ? matchesDarkMode : userDarkMode\r\n}\r\n\r\nexport function useDarkModeManager(): [boolean, () => void] {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const darkMode = useIsDarkMode()\r\n\r\n  const toggleSetDarkMode = useCallback(() => {\r\n    dispatch(updateUserDarkMode({ userDarkMode: !darkMode }))\r\n  }, [darkMode, dispatch])\r\n\r\n  return [darkMode, toggleSetDarkMode]\r\n}\r\n\r\nexport function useIsExpertMode(): boolean {\r\n  return useSelector<AppState, AppState['user']['userExpertMode']>(state => state.user.userExpertMode)\r\n}\r\n\r\nexport function useExpertModeManager(): [boolean, () => void] {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const expertMode = useIsExpertMode()\r\n\r\n  const toggleSetExpertMode = useCallback(() => {\r\n    dispatch(updateUserExpertMode({ userExpertMode: !expertMode }))\r\n  }, [expertMode, dispatch])\r\n\r\n  return [expertMode, toggleSetExpertMode]\r\n}\r\n\r\nexport function useUserSlippageTolerance(): [number, (slippage: number) => void] {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const userSlippageTolerance = useSelector<AppState, AppState['user']['userSlippageTolerance']>(state => {\r\n    return state.user.userSlippageTolerance\r\n  })\r\n\r\n  const setUserSlippageTolerance = useCallback(\r\n    (userSlippageTolerance: number) => {\r\n      dispatch(updateUserSlippageTolerance({ userSlippageTolerance }))\r\n    },\r\n    [dispatch]\r\n  )\r\n\r\n  return [userSlippageTolerance, setUserSlippageTolerance]\r\n}\r\n\r\nexport function useUserDeadline(): [number, (slippage: number) => void] {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const userDeadline = useSelector<AppState, AppState['user']['userDeadline']>(state => {\r\n    return state.user.userDeadline\r\n  })\r\n\r\n  const setUserDeadline = useCallback(\r\n    (userDeadline: number) => {\r\n      dispatch(updateUserDeadline({ userDeadline }))\r\n    },\r\n    [dispatch]\r\n  )\r\n\r\n  return [userDeadline, setUserDeadline]\r\n}\r\n\r\nexport function useAddUserToken(): (token: Token) => void {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  return useCallback(\r\n    (token: Token) => {\r\n      dispatch(addSerializedToken({ serializedToken: serializeToken(token) }))\r\n    },\r\n    [dispatch]\r\n  )\r\n}\r\n\r\nexport function useRemoveUserAddedToken(): (chainId: number, address: string) => void {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  return useCallback(\r\n    (chainId: number, address: string) => {\r\n      dispatch(removeSerializedToken({ chainId, address }))\r\n    },\r\n    [dispatch]\r\n  )\r\n}\r\n\r\nexport function useUserAddedTokens(): Token[] {\r\n  const { chainId } = useActiveWeb3React()\r\n  const serializedTokensMap = useSelector<AppState, AppState['user']['tokens']>(({ user: { tokens } }) => tokens)\r\n\r\n  return useMemo(() => {\r\n    if (!chainId) return []\r\n    return Object.values(serializedTokensMap[chainId as ChainId] ?? {}).map(deserializeToken)\r\n  }, [serializedTokensMap, chainId])\r\n}\r\n\r\nfunction serializePair(pair: Pair): SerializedPair {\r\n  return {\r\n    token0: serializeToken(pair.token0),\r\n    token1: serializeToken(pair.token1)\r\n  }\r\n}\r\n\r\nexport function usePairAdder(): (pair: Pair) => void {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n\r\n  return useCallback(\r\n    (pair: Pair) => {\r\n      dispatch(addSerializedPair({ serializedPair: serializePair(pair) }))\r\n    },\r\n    [dispatch]\r\n  )\r\n}\r\n\r\n/**\r\n * Given two tokens return the liquidity token that represents its liquidity shares\r\n * @param tokenA one of the two tokens\r\n * @param tokenB the other token\r\n */\r\nexport function toV2LiquidityToken([tokenA, tokenB]: [Token, Token]): Token {\r\n  return new Token(tokenA.chainId, Pair.getAddress(tokenA, tokenB), 18, 'UNI-V2', 'Uniswap V2')\r\n}\r\n\r\n/**\r\n * Returns all the pairs of tokens that are tracked by the user for the current chain ID.\r\n */\r\nexport function useTrackedTokenPairs(): [Token, Token][] {\r\n  const { chainId } = useActiveWeb3React()\r\n  const tokens = useAllTokens()\r\n\r\n  // pinned pairs\r\n  const pinnedPairs = useMemo(() => (chainId ? PINNED_PAIRS[chainId] ?? [] : []), [chainId])\r\n\r\n  // pairs for every token against every base\r\n  const generatedPairs: [Token, Token][] = useMemo(\r\n    () =>\r\n      chainId\r\n        ? flatMap(Object.keys(tokens), tokenAddress => {\r\n            const token = tokens[tokenAddress]\r\n            // for each token on the current chain,\r\n            return (\r\n              // loop though all bases on the current chain\r\n              (BASES_TO_TRACK_LIQUIDITY_FOR[chainId] ?? [])\r\n                // to construct pairs of the given token with each base\r\n                .map(base => {\r\n                  if (base.address === token.address) {\r\n                    return null\r\n                  } else {\r\n                    return [base, token]\r\n                  }\r\n                })\r\n                .filter((p): p is [Token, Token] => p !== null)\r\n            )\r\n          })\r\n        : [],\r\n    [tokens, chainId]\r\n  )\r\n\r\n  // pairs saved by users\r\n  const savedSerializedPairs = useSelector<AppState, AppState['user']['pairs']>(({ user: { pairs } }) => pairs)\r\n\r\n  const userPairs: [Token, Token][] = useMemo(() => {\r\n    if (!chainId || !savedSerializedPairs) return []\r\n    const forChain = savedSerializedPairs[chainId]\r\n    if (!forChain) return []\r\n\r\n    return Object.keys(forChain).map(pairId => {\r\n      return [deserializeToken(forChain[pairId].token0), deserializeToken(forChain[pairId].token1)]\r\n    })\r\n  }, [savedSerializedPairs, chainId])\r\n\r\n  const combinedList = useMemo(() => userPairs.concat(generatedPairs).concat(pinnedPairs), [\r\n    generatedPairs,\r\n    pinnedPairs,\r\n    userPairs\r\n  ])\r\n\r\n  return useMemo(() => {\r\n    // dedupes pairs of tokens in the combined list\r\n    const keyed = combinedList.reduce<{ [key: string]: [Token, Token] }>((memo, [tokenA, tokenB]) => {\r\n      const sorted = tokenA.sortsBefore(tokenB)\r\n      const key = sorted ? `${tokenA.address}:${tokenB.address}` : `${tokenB.address}:${tokenA.address}`\r\n      if (memo[key]) return memo\r\n      memo[key] = sorted ? [tokenA, tokenB] : [tokenB, tokenA]\r\n      return memo\r\n    }, {})\r\n\r\n    return Object.keys(keyed).map(key => keyed[key])\r\n  }, [combinedList])\r\n}\r\n"]},"metadata":{},"sourceType":"module"}