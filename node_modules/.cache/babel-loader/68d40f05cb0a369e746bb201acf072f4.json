{"ast":null,"code":"import{namehash}from'ethers/lib/utils';import{useMemo}from'react';import{useSingleCallResult}from'../state/multicall/hooks';import isZero from'../utils/isZero';import{useENSRegistrarContract,useENSResolverContract}from'./useContract';import useDebounce from'./useDebounce';/**\r\n * Does a lookup for an ENS name to find its address.\r\n */export default function useENSAddress(ensName){var _resolverAddress$resu,_addr$result$,_addr$result;var debouncedName=useDebounce(ensName,200);var ensNodeArgument=useMemo(function(){if(!debouncedName)return[undefined];try{return debouncedName?[namehash(debouncedName)]:[undefined];}catch(error){return[undefined];}},[debouncedName]);var registrarContract=useENSRegistrarContract(false);var resolverAddress=useSingleCallResult(registrarContract,'resolver',ensNodeArgument);var resolverAddressResult=(_resolverAddress$resu=resolverAddress.result)===null||_resolverAddress$resu===void 0?void 0:_resolverAddress$resu[0];var resolverContract=useENSResolverContract(resolverAddressResult&&!isZero(resolverAddressResult)?resolverAddressResult:undefined,false);var addr=useSingleCallResult(resolverContract,'addr',ensNodeArgument);var changed=debouncedName!==ensName;return{address:changed?null:(_addr$result$=(_addr$result=addr.result)===null||_addr$result===void 0?void 0:_addr$result[0])!==null&&_addr$result$!==void 0?_addr$result$:null,loading:changed||resolverAddress.loading||addr.loading};}","map":{"version":3,"sources":["C:/Users/marin/Desktop/bananaswap/src/hooks/useENSAddress.ts"],"names":["namehash","useMemo","useSingleCallResult","isZero","useENSRegistrarContract","useENSResolverContract","useDebounce","useENSAddress","ensName","debouncedName","ensNodeArgument","undefined","error","registrarContract","resolverAddress","resolverAddressResult","result","resolverContract","addr","changed","address","loading"],"mappings":"AAAA,OAASA,QAAT,KAAyB,kBAAzB,CACA,OAASC,OAAT,KAAwB,OAAxB,CACA,OAASC,mBAAT,KAAoC,0BAApC,CACA,MAAOC,CAAAA,MAAP,KAAmB,iBAAnB,CACA,OAASC,uBAAT,CAAkCC,sBAAlC,KAAgE,eAAhE,CACA,MAAOC,CAAAA,WAAP,KAAwB,eAAxB,CAEA;AACA;AACA,GACA,cAAe,SAASC,CAAAA,aAAT,CAAuBC,OAAvB,CAA8F,sDAC3G,GAAMC,CAAAA,aAAa,CAAGH,WAAW,CAACE,OAAD,CAAU,GAAV,CAAjC,CACA,GAAME,CAAAA,eAAe,CAAGT,OAAO,CAAC,UAAM,CACpC,GAAI,CAACQ,aAAL,CAAoB,MAAO,CAACE,SAAD,CAAP,CACpB,GAAI,CACF,MAAOF,CAAAA,aAAa,CAAG,CAACT,QAAQ,CAACS,aAAD,CAAT,CAAH,CAA+B,CAACE,SAAD,CAAnD,CACD,CAAC,MAAOC,KAAP,CAAc,CACd,MAAO,CAACD,SAAD,CAAP,CACD,CACF,CAP8B,CAO5B,CAACF,aAAD,CAP4B,CAA/B,CAQA,GAAMI,CAAAA,iBAAiB,CAAGT,uBAAuB,CAAC,KAAD,CAAjD,CACA,GAAMU,CAAAA,eAAe,CAAGZ,mBAAmB,CAACW,iBAAD,CAAoB,UAApB,CAAgCH,eAAhC,CAA3C,CACA,GAAMK,CAAAA,qBAAqB,wBAAGD,eAAe,CAACE,MAAnB,gDAAG,sBAAyB,CAAzB,CAA9B,CACA,GAAMC,CAAAA,gBAAgB,CAAGZ,sBAAsB,CAC7CU,qBAAqB,EAAI,CAACZ,MAAM,CAACY,qBAAD,CAAhC,CAA0DA,qBAA1D,CAAkFJ,SADrC,CAE7C,KAF6C,CAA/C,CAIA,GAAMO,CAAAA,IAAI,CAAGhB,mBAAmB,CAACe,gBAAD,CAAmB,MAAnB,CAA2BP,eAA3B,CAAhC,CAEA,GAAMS,CAAAA,OAAO,CAAGV,aAAa,GAAKD,OAAlC,CACA,MAAO,CACLY,OAAO,CAAED,OAAO,CAAG,IAAH,8BAAUD,IAAI,CAACF,MAAf,uCAAU,aAAc,CAAd,CAAV,+CAA8B,IADzC,CAELK,OAAO,CAAEF,OAAO,EAAIL,eAAe,CAACO,OAA3B,EAAsCH,IAAI,CAACG,OAF/C,CAAP,CAID","sourcesContent":["import { namehash } from 'ethers/lib/utils'\r\nimport { useMemo } from 'react'\r\nimport { useSingleCallResult } from '../state/multicall/hooks'\r\nimport isZero from '../utils/isZero'\r\nimport { useENSRegistrarContract, useENSResolverContract } from './useContract'\r\nimport useDebounce from './useDebounce'\r\n\r\n/**\r\n * Does a lookup for an ENS name to find its address.\r\n */\r\nexport default function useENSAddress(ensName?: string | null): { loading: boolean; address: string | null } {\r\n  const debouncedName = useDebounce(ensName, 200)\r\n  const ensNodeArgument = useMemo(() => {\r\n    if (!debouncedName) return [undefined]\r\n    try {\r\n      return debouncedName ? [namehash(debouncedName)] : [undefined]\r\n    } catch (error) {\r\n      return [undefined]\r\n    }\r\n  }, [debouncedName])\r\n  const registrarContract = useENSRegistrarContract(false)\r\n  const resolverAddress = useSingleCallResult(registrarContract, 'resolver', ensNodeArgument)\r\n  const resolverAddressResult = resolverAddress.result?.[0]\r\n  const resolverContract = useENSResolverContract(\r\n    resolverAddressResult && !isZero(resolverAddressResult) ? resolverAddressResult : undefined,\r\n    false\r\n  )\r\n  const addr = useSingleCallResult(resolverContract, 'addr', ensNodeArgument)\r\n\r\n  const changed = debouncedName !== ensName\r\n  return {\r\n    address: changed ? null : addr.result?.[0] ?? null,\r\n    loading: changed || resolverAddress.loading || addr.loading\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}